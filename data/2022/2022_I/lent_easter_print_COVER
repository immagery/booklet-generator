%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: cover_template_print.ai
%%Creator: Adobe Graphics Manager
%%For: Jesús Rodríguez Nieto
%%CreationDate: 2/2/2020
%%BoundingBox: 0 0 945 684
%%HiResBoundingBox: 0 0 944.6080 683.0079
%%CropBox: 8.5040 8.5040 936.1041 674.5039
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Special
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 24.0.2 x373 R agm 4.7767 ct 5.4352
%ADOEndClientInjection: DocumentHeader "AI11"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -683.008 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 683.008 li
944.608 683.008 li
944.608 0 li
cp
clp
-10.2388 703.539 mo
971.072 703.539 li
971.072 -14.57 li
-10.2388 -14.57 li
-10.2388 703.539 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .281621 .733333 0 cmyk
f
339.424 470.209 mo
244.562 470.209 li
215.724 420.368 177.492 377.008 130.055 340.114 cv
95.9272 313.571 58.242 294.285 16.3994 284.405 cv
14.8416 284.037 13.5103 283.826 12.3574 283.826 cv
9.11949 283.826 7.29063 285.495 5.81862 290.061 cv
.65616 306.072 -4.83582 321.966 -10.2388 337.893 cv
-10.2388 134.78 li
-10.2388 125.892 -1.44192 125.892 -1.44192 125.892 cv
414.845 125.892 li
423.642 125.892 423.642 134.78 423.642 134.78 cv
423.642 461.322 li
423.642 462.206 423.555 463.002 423.399 463.719 cv
413.239 437.731 401.153 412.441 387.19 387.843 cv
331.876 290.39 257.465 213.718 160.197 162.245 cv
131.914 147.279 102.284 135.874 71.6425 127.318 cv
69.5973 126.747 67.7107 126.25 66.0207 126.25 cv
63.179 126.25 60.8931 127.657 59.343 132.488 cv
52.0639 155.177 44.1419 177.64 36.0976 201.296 cv
42.2854 203.051 46.3632 204.452 50.5399 205.355 cv
93.9164 214.726 133.057 234.247 169.346 260.169 cv
243.05 312.819 298.259 382.279 337.315 465.66 cv
338.024 467.174 338.728 468.693 339.424 470.209 cv
153.334 470.209 mo
25.3541 470.209 li
14.2007 462.117 2.34663 454.979 -10.2388 448.828 cv
-10.2388 364.911 li
-9.9128 364.956 -9.57349 365.002 -9.22195 365.049 cv
17.8153 368.657 42.7211 378.629 66.2371 392.56 cv
100.775 413.019 129.545 439.219 153.334 470.209 cv
.00784314 .439216 .85098 0 cmyk
f
1017.04 703.54 mo
1015.86 703.54 1014.44 703.474 1012.74 703.387 cv
998.849 702.674 984.962 701.771 971.072 700.939 cv
971.072 410.575 li
998.175 467.382 1015.69 527.688 1022.97 591.439 cv
1026.83 625.171 1027.81 659.222 1024.14 693.178 cv
1023.19 701.912 1022.95 703.54 1017.04 703.54 cv
.0145329 .213841 .47128 0 cmyk
f
971.072 700.939 mo
964.382 700.537 957.692 700.153 950.999 699.814 cv
944.823 699.501 942.574 697.119 943.523 690.453 cv
955.6 605.646 937.018 526.449 901.608 450.853 cv
862.552 367.471 807.343 298.012 733.638 245.361 cv
697.35 219.439 658.21 199.919 614.833 190.547 cv
610.656 189.644 606.579 188.243 600.391 186.488 cv
608.435 162.833 616.357 140.369 623.637 117.68 cv
625.187 112.849 627.472 111.442 630.314 111.442 cv
632.004 111.442 633.891 111.94 635.936 112.511 cv
666.577 121.066 696.207 132.471 724.49 147.437 cv
821.759 198.911 896.169 275.583 951.483 373.035 cv
958.486 385.371 965.019 397.888 971.072 410.575 cv
971.072 700.939 li
.0156863 .345098 .815686 0 cmyk
f
859.352 693.666 mo
859.014 693.666 858.661 693.654 858.29 693.63 cv
834.434 692.078 810.554 690.921 787.632 689.667 cv
785.263 685.22 786.057 682.201 786.409 679.289 cv
793.328 622.165 781.04 568.794 756.296 518.303 cv
727.273 459.077 686.469 410.889 630.53 377.752 cv
607.014 363.822 582.108 353.849 555.071 350.241 cv
545.69 348.988 545.516 348.609 548.724 338.944 cv
555.779 317.687 563.237 296.573 570.112 275.253 cv
571.584 270.687 573.413 269.018 576.651 269.018 cv
577.804 269.018 579.135 269.229 580.693 269.597 cv
622.535 279.477 660.221 298.763 694.349 325.307 cv
779.438 391.484 834.914 478.473 859.674 586.339 cv
867.089 618.636 869.158 651.533 866.583 684.714 cv
866.161 690.157 865.141 693.666 859.352 693.666 cv
0 .407843 .827451 0 cmyk
f
690.507 683.275 mo
688.175 683.275 685.289 683.105 681.726 682.894 cv
675.979 682.554 670.229 682.262 664.479 681.947 cv
664.488 681.777 li
656.302 681.329 648.109 680.485 639.927 680.485 cv
639.491 680.485 639.055 680.488 638.618 680.493 cv
638.523 680.494 638.428 680.494 638.335 680.494 cv
630.972 680.494 629.193 677.037 628.821 669.652 cv
625.923 612.115 602.433 564.938 561.485 526.915 cv
545.564 512.132 527.282 501.258 507.577 492.922 cv
497.937 488.845 497.829 488.788 500.941 479.446 cv
506.45 462.914 512.384 446.531 517.585 429.895 cv
519.172 424.818 520.824 422.485 524.27 422.485 cv
525.756 422.485 527.575 422.919 529.868 423.753 cv
581 442.374 621.427 475.488 652.604 521.184 cv
681.711 563.847 697.251 611.566 699.6 663.911 cv
700.329 680.182 700.436 683.275 690.507 683.275 cv
.0196078 .470588 .87451 .00392157 cmyk
f
gsave
-100.165 721.789 mo
515.012 721.789 li
515.012 98.3895 li
-100.165 98.3895 li
-100.165 721.789 li
clp
452.75 718.347 mo
451.563 718.347 450.147 718.282 448.451 718.195 cv
427.863 717.139 407.294 715.664 386.706 714.622 cv
380.53 714.309 378.28 711.926 379.23 705.26 cv
379.312 704.686 379.392 704.113 379.471 703.539 cv
460.299 703.539 li
460.156 705.022 460.005 706.504 459.845 707.986 cv
458.9 716.72 458.658 718.347 452.75 718.347 cv
.00419838 .0617762 .136148 0 cmyk
f
460.299 703.539 mo
379.471 703.539 li
390.821 621.079 373.224 543.922 339.424 470.209 cv
414.845 470.209 li
414.845 470.209 421.979 470.209 423.399 463.719 cv
441.148 509.124 453.01 556.647 458.68 606.246 cv
462.366 638.507 463.426 671.058 460.299 703.539 cv
.00392157 .301961 .756863 0 cmyk
f
414.845 470.209 mo
339.424 470.209 li
338.728 468.693 338.024 467.174 337.315 465.66 cv
298.259 382.279 243.05 312.819 169.346 260.169 cv
133.057 234.247 93.9164 214.726 50.5399 205.355 cv
46.3632 204.452 42.2854 203.051 36.0976 201.296 cv
44.1419 177.64 52.0639 155.177 59.343 132.488 cv
60.8931 127.657 63.179 126.25 66.0207 126.25 cv
67.7107 126.25 69.5973 126.747 71.6425 127.318 cv
102.284 135.874 131.914 147.279 160.197 162.245 cv
257.465 213.718 331.876 290.39 387.19 387.843 cv
401.153 412.441 413.239 437.731 423.399 463.719 cv
421.979 470.209 414.845 470.209 414.845 470.209 cv
.0117647 .431373 .854902 0 cmyk
f
295.058 708.474 mo
294.72 708.474 294.367 708.462 293.996 708.438 cv
270.14 706.885 246.262 705.73 223.338 704.476 cv
223.168 704.157 223.014 703.844 222.876 703.539 cv
301.719 703.539 li
300.946 706.628 299.256 708.474 295.058 708.474 cv
-10.2388 364.911 mo
-18.6118 363.755 -18.6581 363.055 -15.5691 353.752 cv
-13.8123 348.458 -12.0304 343.174 -10.2388 337.893 cv
-10.2388 364.911 li
0 .0797693 .139146 0 cmyk
f
301.719 703.539 mo
222.876 703.539 li
221.082 699.594 221.789 696.799 222.116 694.098 cv
229.034 636.973 216.747 583.603 192.003 533.111 cv
180.9 510.453 168.073 489.412 153.334 470.209 cv
244.562 470.209 li
267.452 509.77 284.424 553.416 295.381 601.148 cv
302.795 633.445 304.865 666.341 302.29 699.522 cv
302.174 701.018 302.012 702.368 301.719 703.539 cv
0 .317647 .760784 0 cmyk
f
244.562 470.209 mo
153.334 470.209 li
129.545 439.219 100.775 413.019 66.2371 392.56 cv
42.7211 378.629 17.8153 368.657 -9.22195 365.049 cv
-9.57349 365.002 -9.9128 364.956 -10.2388 364.911 cv
-10.2388 337.893 li
-4.83582 321.966 .65616 306.072 5.81862 290.061 cv
7.29063 285.495 9.11949 283.826 12.3574 283.826 cv
13.5103 283.826 14.8416 284.037 16.3994 284.405 cv
58.242 294.285 95.9272 313.571 130.055 340.114 cv
177.492 377.008 215.724 420.368 244.562 470.209 cv
.00784314 .45098 .858823 0 cmyk
f
-10.2388 535.24 mo
-24.3272 523.689 -40.0103 514.797 -56.716 507.73 cv
-66.356 503.653 -66.4646 503.595 -63.3523 494.253 cv
-57.844 477.721 -51.9093 461.338 -46.7082 444.703 cv
-45.1209 439.626 -43.4692 437.293 -40.0234 437.293 cv
-38.5373 437.293 -36.7181 437.727 -34.4254 438.561 cv
-26.0803 441.6 -18.0199 445.025 -10.2388 448.828 cv
-10.2388 535.24 li
.00539792 .0971626 .152941 .000599769 cmyk
f
126.214 698.083 mo
123.881 698.083 120.995 697.912 117.432 697.701 cv
111.686 697.362 105.936 697.07 100.186 696.754 cv
100.195 696.585 li
92.009 696.137 83.8177 695.293 75.6371 695.293 cv
75.1994 695.293 74.7622 695.295 74.3246 695.3 cv
74.2286 695.301 74.1328 695.302 74.0386 695.302 cv
66.6775 695.302 64.8998 691.843 64.5281 684.459 cv
61.6294 626.922 38.1406 579.745 -2.80819 541.723 cv
-5.23172 539.473 -7.70919 537.314 -10.2388 535.24 cv
-10.2388 448.828 li
-10.2388 448.828 li
-10.2388 461.322 li
-10.2388 461.322 -10.2388 470.209 -1.44192 470.209 cv
25.3541 470.209 li
49.5563 487.769 70.4517 509.817 88.3108 535.993 cv
117.418 578.655 132.958 626.373 135.306 678.718 cv
136.036 694.989 136.143 698.083 126.214 698.083 cv
.00392157 .337255 .772549 0 cmyk
f
25.3541 470.209 mo
-1.44192 470.209 li
-10.2388 470.209 -10.2388 461.322 -10.2388 461.322 cv
-10.2388 448.828 li
2.34663 454.979 14.2007 462.117 25.3541 470.209 cv
.0117647 .470588 .87451 0 cmyk
f
grestore
-10.2388 103.767 mo
-61.1418 103.767 li
-61.1418 59.8334 li
-10.2388 59.8334 li
-10.2388 103.767 li
0 .276125 .481661 0 cmyk
f
58.2309 103.767 mo
-10.2388 103.767 li
-10.2388 59.8334 li
58.2309 59.8334 li
58.2309 103.767 li
0 .407843 .827451 0 cmyk
f
347.119 104.605 mo
343.809 104.605 li
343.809 60.6089 li
347.119 60.6089 li
347.119 104.605 li
f
448.835 104.605 mo
350.615 104.605 li
350.615 60.6089 li
448.835 60.6089 li
448.835 104.605 li
f
612.717 183.406 mo
612.717 172.499 612.717 161.592 612.717 150.685 cv
612.717 150.266 612.711 149.846 612.719 149.427 cv
612.749 147.892 612.746 147.864 614.266 147.619 cv
616.118 147.322 617.971 147.007 619.835 146.822 cv
625.576 146.253 631.333 146.039 637.091 146.366 cv
641.251 146.602 645.336 147.381 649.149 149.241 cv
656.657 152.904 660.458 159.194 660.998 167.72 cv
661.165 170.377 660.992 173.029 660.405 175.636 cv
658.609 183.583 653.744 188.668 646.645 191.619 cv
641.52 193.75 636.148 194.296 630.682 194.149 cv
627.783 194.072 627.783 194.081 627.783 197.18 cv
627.783 203.892 627.788 210.604 627.779 217.316 cv
627.778 219.728 627.118 220.412 624.812 220.417 cv
621.73 220.426 618.649 220.431 615.569 220.415 cv
613.456 220.405 612.723 219.625 612.721 217.386 cv
612.714 206.06 612.717 194.733 612.717 183.406 cv
627.769 169.994 mo
627.769 173.211 627.793 176.428 627.755 179.643 cv
627.743 180.614 628.078 181.044 629.014 181.076 cv
631.023 181.141 633.036 181.273 635.034 181.02 cv
637.101 180.76 639.121 180.265 640.944 179.139 cv
645.215 176.499 646.252 172.386 645.72 167.596 cv
645.28 163.664 642.764 160.882 638.662 159.699 cv
635.505 158.787 632.309 158.935 629.091 159.227 cv
628.034 159.323 627.734 159.72 627.751 160.766 cv
627.8 163.842 627.767 166.919 627.769 169.994 cv
.0342718 .634272 1 .00231937 cmyk
f
780.89 199.211 mo
781.332 198.93 781.397 198.507 781.508 198.108 cv
784.254 188.185 786.999 178.263 789.751 168.34 cv
790.293 166.387 790.305 166.387 792.338 166.387 cv
796.022 166.386 799.707 166.373 803.391 166.393 cv
805.287 166.401 806.23 167.7 805.585 169.489 cv
800.214 184.38 795.307 199.451 789.592 214.207 cv
787.76 218.938 785.682 223.55 783.131 227.913 cv
780.041 233.2 776.064 237.551 770.858 240.614 cv
766.467 243.198 761.704 243.981 756.564 243.923 cv
756.474 240.831 756.356 237.773 756.307 234.714 cv
756.283 233.395 755.821 231.841 756.484 230.82 cv
757.105 229.864 758.666 229.969 759.807 229.59 cv
765.298 227.759 769.418 224.228 772.213 218.962 cv
772.856 217.751 772.856 216.688 772.358 215.396 cv
766.556 200.304 760.804 185.191 755.054 170.076 cv
754.796 169.397 754.254 168.737 754.681 167.906 cv
755.18 166.941 755.735 166.312 756.993 166.347 cv
760.942 166.456 764.898 166.433 768.849 166.357 cv
769.992 166.336 770.455 166.73 770.809 167.861 cv
773.981 177.939 777.221 187.993 780.444 198.052 cv
780.57 198.442 780.737 198.818 780.89 199.211 cv
f
734.487 216.656 mo
733.751 216.786 733.389 217.343 732.898 217.688 cv
727.323 221.595 721.269 222.603 714.89 220.55 cv
707.307 218.105 703.328 210.492 704.134 202.743 cv
704.807 196.262 708.029 191.566 713.455 188.468 cv
717.635 186.084 722.182 184.997 726.874 184.482 cv
728.865 184.266 730.867 184.142 732.858 183.977 cv
732.906 181.126 731.696 179.189 729.187 178.107 cv
726.68 177.023 724.059 177.161 721.465 177.502 cv
718.527 177.887 715.723 178.797 713.088 180.254 cv
711.509 181.128 710.209 180.563 709.686 178.811 cv
708.988 176.481 708.365 174.124 707.646 171.801 cv
707.346 170.831 707.568 170.303 708.426 169.787 cv
712.082 167.597 716.039 166.354 720.162 165.707 cv
724.554 165.018 728.956 164.876 733.339 165.929 cv
741.346 167.854 746.394 173.45 747.781 181.937 cv
748.121 184.014 748.249 186.096 748.25 188.198 cv
748.256 195.33 748.239 202.461 748.304 209.592 cv
748.327 212.244 748.483 214.898 748.826 217.534 cv
749.043 219.189 748.115 220.392 746.527 220.41 cv
743.178 220.445 739.828 220.378 736.48 220.445 cv
735.417 220.466 735.051 220.009 734.967 219.011 cv
734.903 218.256 734.948 217.466 734.487 216.656 cv
733.362 199.671 mo
733.362 198.262 733.364 197.215 733.36 196.169 cv
733.359 195.671 733.147 195.395 732.636 195.414 cv
728.944 195.556 725.287 195.865 722.029 197.954 cv
720.794 198.746 719.918 199.861 719.455 201.316 cv
718.374 204.72 719.773 208.12 722.65 209.06 cv
726.937 210.464 732.177 207.393 733.212 202.856 cv
733.477 201.688 733.339 200.493 733.362 199.671 cv
f
813.532 105.698 mo
814.488 102.34 815.434 99.1479 816.29 95.9291 cv
816.582 94.8369 817.193 94.9433 817.969 95.1147 cv
822.301 96.0742 826.51 97.4379 830.557 99.3085 cv
844.475 105.742 855.385 115.862 863.777 129.024 cv
869.597 138.152 873.482 148.12 875.27 158.924 cv
876.044 163.597 876.419 168.334 876.146 173.096 cv
876.06 174.566 876.046 174.602 874.629 174.607 cv
871.752 174.616 868.875 174.566 865.998 174.579 cv
865.134 174.582 864.804 174.268 864.889 173.331 cv
865.979 161.416 862.836 150.52 857.369 140.251 cv
851.342 128.926 843.159 119.666 832.518 112.889 cv
827.278 109.551 821.686 107.13 815.573 106.154 cv
814.985 106.06 814.406 105.896 813.532 105.698 cv
.0258488 .403723 .890745 .000640879 cmyk
f
683.313 171.922 mo
684.136 171.637 684.395 170.941 684.843 170.46 cv
688.755 166.261 693.389 164.382 699.02 165.534 cv
699.843 165.702 700.147 166.008 700.141 166.875 cv
700.112 170.647 700.156 174.422 700.117 178.194 cv
700.102 179.78 699.053 180.6 697.46 180.397 cv
695.924 180.203 694.377 180.084 692.862 180.451 cv
688.767 181.442 686.487 184.311 685.534 188.444 cv
685.159 190.077 685.06 191.748 685.065 193.435 cv
685.087 201.331 685.077 209.228 685.073 217.125 cv
685.073 219.81 684.487 220.415 681.893 220.418 cv
678.881 220.424 675.869 220.429 672.856 220.418 cv
670.628 220.41 669.862 219.616 669.86 217.3 cv
669.855 205.351 669.869 193.402 669.852 181.453 cv
669.846 177.332 669.882 173.21 669.547 169.095 cv
669.413 167.452 670.291 166.415 671.826 166.399 cv
675.173 166.363 678.52 166.422 681.866 166.366 cv
682.894 166.351 683.081 166.812 683.088 167.746 cv
683.098 169.114 683.034 170.504 683.313 171.922 cv
.0342718 .634272 1 .00231937 cmyk
f
599.115 193.517 mo
599.115 201.412 599.118 209.305 599.113 217.2 cv
599.112 219.81 598.562 220.38 596.054 220.385 cv
592.909 220.393 589.764 220.402 586.618 220.381 cv
584.667 220.368 583.862 219.511 583.862 217.446 cv
583.853 201.38 583.853 185.312 583.862 169.245 cv
583.863 167.285 584.661 166.42 586.474 166.408 cv
589.82 166.387 593.167 166.389 596.513 166.408 cv
598.448 166.42 599.108 167.128 599.11 169.206 cv
599.122 177.31 599.115 185.414 599.115 193.517 cv
f
843.153 174.411 mo
842.792 173.809 842.882 173.381 842.911 172.974 cv
843.475 164.958 841.389 157.612 837.587 150.763 cv
833.125 142.728 827.101 136.323 819.071 132.129 cv
815.696 130.366 812.154 129.167 808.361 128.87 cv
807.045 128.767 807.016 128.716 807.396 127.344 cv
808.232 124.327 809.123 121.327 809.932 118.302 cv
810.168 117.425 810.532 117.283 811.367 117.433 cv
817.269 118.491 822.658 120.893 827.6 124.331 cv
839.925 132.908 848.266 144.611 852.474 159.458 cv
853.732 163.904 854.25 168.474 854.125 173.119 cv
854.102 173.924 853.973 174.433 853.031 174.424 cv
849.695 174.39 846.357 174.411 843.153 174.411 cv
0 .520195 .909026 .000274662 cmyk
f
825.933 174.249 mo
824.727 174.249 823.518 174.188 822.317 174.268 cv
821.259 174.339 820.981 173.87 820.877 172.831 cv
820.07 164.833 816.466 158.435 810.49 153.448 cv
808.169 151.509 805.543 150.133 802.738 149.121 cv
801.367 148.626 801.351 148.619 801.72 147.292 cv
802.371 144.946 803.085 142.618 803.692 140.259 cv
803.959 139.228 804.282 138.981 805.362 139.31 cv
812.619 141.515 818.487 145.822 823.153 151.955 cv
827.509 157.68 830.01 164.213 830.703 171.491 cv
830.969 174.286 830.962 174.285 828.343 174.274 cv
827.541 174.27 826.737 174.274 825.933 174.274 cv
825.933 174.249 li
cp
.0342718 .634272 1 .00231937 cmyk
f
591.385 161.911 mo
586.613 161.893 583.177 158.392 583.182 153.552 cv
583.186 148.678 586.761 145.06 591.552 145.077 cv
596.351 145.093 599.838 148.682 599.85 153.615 cv
599.861 158.474 596.335 161.93 591.385 161.911 cv
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: MyriadPro-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /MyriadPro-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 71 /G put
dup 87 /W put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/FontBBox {-163 -250 1256 989} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 489 501 650 662 674 686 710 722] def
/OtherBlues [-210 -198 -129 -117] def
/FamilyBlues [-12 -0 484 496 650 662 674 686 710 722] def
/FamilyOtherBlues [-210 -198 -121 -109] def
/BlueScale 0.0625 def
/BlueFuzz 0 def
/StdHW [112] def
/StdVW [152] def
/StemSnapH [102 112 125] def
/StemSnapV [152] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/space <1C60D8A8C9B8A02BC0> |-
/G <1C60D8A8C9B65F8A3E204B61DC5AC7CE68BFEED73A8329CFB6B63677D20F
85A0F3C5AB9FFF15E6735E38EA6C6F06C46D8E6862DCCD6E3A8EE2825A2B3853
5869D482F007EC390D3313D512FC8322269BAD04DBD4B514EBF1C256955F411F
13CCE851D34FFD1180409D4B5159706D56CB7AED09B6A18B1F0404> |-
/W <1C60D8A8C9B59EB766D8ED475BD7893C560D70EE590F845A6F3051A2ED49
6CD5E333A51ABD22C028D9719969DC23B66777597303EA30E6A3501993A19357
3918F16DC72B8FEC1B8CED67F6E3B71D4124714F37F6455F0D89FDFB27B6BA70
EB635B46597D30869860BC43A37A34C2EB3E5FDADFCAB94E65DBF25A77152A34
7410FFF4C4DCD68312E7F9535E6D91FFA76BCDB4429F61AB64DBD89EEE30742D
B54C> |-
/e <1C60D8A8C9B78B91A75FABEAF2834102048AB5127C88BDE4553E93F7DDE2
A0ABB57C4176C61FD95C77645E4D4FC1EF17749EE3183D026D4A559F76EBABD9
7F406A39496E4035004307B90E4307D1A0E0BD2DD208624E82D752AE09D8FE14
5E0BBBC74AF51B8B1F3ACAE4> |-
/h <1C60D8A8C9B7F1D1E7783E2CED1D74FC901DC7F6FF903173AA408DD0A1D1
B9BB63268615F8A5A799A3FD7E887A569DEB979A22A3B2D69F79DF8862F8E45F
59B677737223EC27F0ED7E1795ECE4403579D24BBEF5A8254FF0E1C941715ECD
BC> |-
/i <1C60D8A8C9B8581A0B08AEB90736162406B499B04D4F8AA5A829EC69E305
8F4ED4D82C4D99954B35ECBE10D21214F4FD0223EF76EE2A9FC2E0A5A29910D2
87FB0AD3772CCF64319285090642EB0C8826FFF054C9176937> |-
/l <1C60D8A8C9B859EB6C7454A0C68F6A460C7930A56FC58784196BEC828043
DE45> |-
/o <1C60D8A8C9B7FA1300A59CB80CE3A4425ED846AE958C3FA7ED9201ED0D71
E8D857EDEE06E472CFCA170C757035B761255AC0B41B0BCC03E2E94071A46097
2A177DCD726A09BF3553424570400B0CB827337C8F0BE912B0F1> |-
/p <1C60D8A8C9B7C56CB7BACFA0134F592A1B428DF719C873B1D2CF3DAB3DFB
3D939C018588197B94BDA30C01C7350185E9FFDFE3D62827A8A8B53CB3A455BF
BE5FBE8F08F39599BF74FED48D47B8467BB44F3305353991B8D9E0704BE0D8B3
E9B2B5791F332B3803B7B9D2A015AD4D4C5C5B4A408BD4F1FCA3FD44E2A1BAA5
B09985DB9E537C68F1AF263D19442831333CF8702B9613D217F75857DE8D85B8
35BA320B58E8E986F05830F20DD62EBCC331A0262F94289D6B38A2992CB74831
25BFD4F319D06108B2D7> |-
/s <1C60D8A8C9B7693F0446E3F42B6C7FF247984CE6414CA2A28D7C80424BA6
743BA7837E2A900B607D9846593DDE68DE96AB25B38A995ED0313A13DFAC1BDA
F4322237E3AF45B03BD19ADDB01F94A84D73248C4C5473717462017BD726B71C
9213F1A680FB31DE24A8722D02C37D10> |-
/t <1C60D8A8C9B72C0F871D3ECA6462DDA683B9A97C0F8B54F1BDF3380BA89A
8F4318697583BCB870A386789AED1E105A7FA23136F933FE4290FF02C014989E
53A38206A78460FD52CBAB12EF5051B0E1BFF4C902AB630BE2443E26DA> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BPKFLH+MyriadPro-Bold /MyriadPro-Bold findfont ct_VMDictPut
/BPKFLH+MyriadPro-Bold*1 
[32{/.notdef}rp /space 38{/.notdef}rp /G 15{/.notdef}rp /W 13{/.notdef}rp /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l 2{/.notdef}rp /o /p 
2{/.notdef}rp /s /t 139{/.notdef}rp]
BPKFLH+MyriadPro-Bold nf
BPKFLH+MyriadPro-Bold*1 [17.5845 0 0 -18.356 0 0 ]msf
622.68 243.09 mo
(W)sh
637.837 243.09 mo
(ith the )
[4.81836 6.45313 10.3047 3.55176 6.45313 10.3047 9.28516 0 ]xsh
692.56 243.09 mo
(G)sh
704.64 243.09 mo
(os)
[10.1465 0 ]xsh
722.418 243.09 mo
(p)sh
732.985 243.09 mo
(el)
[9.28516 0 ]xsh
565.766 249.376 mo
815.945 249.376 li
815.945 248.376 li
565.766 248.376 li
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /MyriadPro-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 89 /Y put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 484 496 650 662 674 686 710 722] def
/OtherBlues [-210 -198 -121 -109] def
/BlueScale 0.0625 def
/BlueFuzz 0 def
/StdHW [67] def
/StdVW [88] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/space <1C60D8A8C9B896187A> |-
/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F1
5865B21E5E7BB034E6AF82883E05563056B289C39B2EA350305E00FB98125757
C6B71D805070E392C2F5C67BAB2BDB26729DB33934727F6026751FF00CC19CB2
FCE13DD0FF> |-
/C <1C60D8A8C9B7F7BFE3B180C56AF03E84FDFE1B891BF0BDDE2A383D526FA5
F5DFDA781369FECA62B706458FA8E5D416C9F1A54D53D39B454D4B4A5AA674C3
7D8866FD97E642C991F09AC3F4EB6888A09F29DD6765382F269ACB77ACC8CCEE
228E09F4DDA531160B9495579459312C02> |-
/E <1C60D8A8C9B7AFA9BC4F00998616708AD319D68861297151CC95B7F0DB51
0272712476AFC1F2C943C567A57033FD1283345EB0696AEA3E2C01AFF042> |-
/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E8BCF65E1A153B8F64C14E
4D433BE34E80499C2222430927749B4F85A3CF0F> |-
/G <1C60D8A8C9B67B1690716FF04D0147EA5B51F2B65610FAF234C3B18546B2
1D3F6F92D294E6EC2B21999B1FED2DAC6EDC52B42B78221AD7265CB9722E2689
0713820AC3CF72AA36DA53BE7D477EB132919417E817793987155D1BFBFA170A
DE07C15A513B743AB17B84741CBB0BB1F3B8087B3CA8CD5F587C0628B9BEC5AC
A38B81696B9E718212159FC34AA218A60D02D05E5A350CADBB646ECC> |-
/L <1C60D8A8C9B74383E5F6C6CDF9C5C9B87417EDC75203EAC0F1F9428D2177
D6066C95DE> |-
/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD8
33E1AD6BC7D55692C9AE2F77E568D5881F872B2DD35BA9F526AA31403949B904
F2FBFFA219269CB793CC5D4E2B92EAFFDD1A748A3F84A703B249550493724F42
4782ACE69D75F53E9659B9B2838FB0059CC29141042064D2E7FC418574> |-
/O <1C60D8A8C9B624F9257693AA048B36DADFC211B8894F7756BF33A04DC83C
0B4C52C95D9CA2F8E3A6F92259B8EFC855E76BA25786D3A63D8F17EAD5862D55
6BB80BAD93C174B7B09C35FAA86BAE6F39D6EA2536F89B8D1AF08D0CC0EEA8CA
A25E3645138071> |-
/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED1
9B0A38B3CB0F4F897304E6BAD55EEDCCDEBF2A9B8B5B52460C00D9A306CF6EA5
1A21B19E9B3BA70F64BDE9BAA61A839E8FB51C8743E8A82D68D8F927748ABF13
844E9C386BBD03D70DAF9D> |-
/R <1C60D8A8C9B7818197CA8C10BDEF079227EB9AB9E6BB1BEBF94303949A9D
57DC48BE0CBABA6B2F38795EB0B14AF8016F1F5E72EA92249DAC1B3C3DF395AC
3F2C437EECDF2E212D25ADD95C1165C0D3093ED6DD657D8595753AC4F714ACD0
CC3DE31498EBF4AEAD79663C716613A4CC76F86E7772DA8716237A83> |-
/S <1C60D8A8C9B7AED8026F44F98B5D343CF5F718671081699D2B46DCF54CF7
6FF9B03E38534A56DDD76042189F93F8B774AE25457E79E0931E7CC91B3416B8
D2743A464B4F7D3888B59520A4D7BED8CEC539F5E5E499CAD80C04BFC86A41D5
A6CBC9CE2E30F7E0C1B9BCAFAE809AF1F5D7B9CCA4394DD69583644C37B0A21F
2A0B6101430602AFDF4CB529AFA5EE04> |-
/U <1C60D8A8C9B67A40D81BFBD664698F172962E5E1FA1185B63F3290B3666C
21E697944FEFF2AC6E2D54F3FF697DB22E6B78C4D5D25B8089F41A75E7ED2FD2
098CDB96DAA535> |-
/Y <1C60D8A8C9B79EE31BCA65993FF5717FF3016C54D40CB82890A01A323C94
73F1409F5F01EEF288FBECEF4725C95F64EB10D4475E25291D61221BB6B2A929
E512FD2A745E> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BPKFLI+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut
/BPKFLI+MyriadPro-Regular*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /.notdef /E 
/F /G 4{/.notdef}rp /L /.notdef /N /O /P 
/.notdef /R /S /.notdef /U 3{/.notdef}rp /Y 166{/.notdef}rp]
BPKFLI+MyriadPro-Regular nf
BPKFLI+MyriadPro-Regular*1 [13.3977 0 0 -13.9856 0 0 ]msf
579.555 264.913 mo
(P)sh
586.683 264.913 mo
(R)sh
593.957 264.913 mo
(A)sh
601.098 264.913 mo
(Y)sh
608.266 264.913 mo
(ER RESOU)
[6.5918 7.20801 2.83984 7.20801 6.5918 6.60449 9.23145 0 ]xsh
663.209 264.913 mo
(R)sh
670.443 264.913 mo
(CES FOR)
[7.77051 6.5918 6.60547 2.83984 6.52441 9.23145 0 ]xsh
719.452 264.913 mo
(Y)sh
726.23 264.913 mo
(OUNG PEOPLE)
[9.23145 8.66797 8.81543 8.65527 2.83984 7.12793 6.5918 9.23047 7.12793 6.32324 0 ]xsh
321.427 488.967 mo
322.284 485.956 323.133 483.092 323.9 480.207 cv
324.161 479.226 324.71 479.322 325.405 479.476 cv
329.29 480.336 333.065 481.559 336.695 483.237 cv
349.177 489.006 358.96 498.082 366.486 509.886 cv
371.705 518.072 375.191 527.011 376.793 536.7 cv
377.487 540.89 377.824 545.139 377.579 549.41 cv
377.502 550.728 377.489 550.759 376.218 550.764 cv
373.638 550.772 371.058 550.728 368.477 550.739 cv
367.703 550.743 367.407 550.46 367.483 549.62 cv
368.461 538.935 365.642 529.164 360.74 519.955 cv
355.335 509.798 347.996 501.494 338.453 495.415 cv
333.754 492.422 328.739 490.251 323.257 489.376 cv
322.73 489.291 322.21 489.144 321.427 488.967 cv
.0258488 .403723 .890745 .000640879 cmyk
f
347.991 550.588 mo
347.667 550.049 347.748 549.664 347.773 549.299 cv
348.28 542.111 346.408 535.523 342.999 529.38 cv
338.998 522.175 333.596 516.431 326.394 512.669 cv
323.368 511.089 320.191 510.014 316.789 509.747 cv
315.609 509.655 315.585 509.61 315.924 508.378 cv
316.674 505.673 317.473 502.983 318.198 500.27 cv
318.41 499.483 318.736 499.356 319.485 499.491 cv
324.778 500.44 329.611 502.594 334.043 505.677 cv
345.096 513.369 352.577 523.864 356.349 537.179 cv
357.478 541.165 357.943 545.264 357.83 549.429 cv
357.81 550.152 357.693 550.609 356.849 550.601 cv
353.857 550.57 350.864 550.588 347.991 550.588 cv
0 .520195 .909026 .000274662 cmyk
f
332.548 550.444 mo
331.466 550.444 330.382 550.389 329.305 550.461 cv
328.356 550.524 328.107 550.104 328.014 549.172 cv
327.289 541.999 324.057 536.261 318.699 531.789 cv
316.617 530.05 314.262 528.816 311.746 527.909 cv
310.516 527.464 310.503 527.458 310.833 526.269 cv
311.418 524.164 312.057 522.077 312.602 519.961 cv
312.842 519.037 313.131 518.815 314.1 519.11 cv
320.608 521.087 325.87 524.95 330.055 530.45 cv
333.961 535.584 336.203 541.443 336.825 547.97 cv
337.064 550.477 337.058 550.475 334.709 550.465 cv
333.99 550.462 333.268 550.465 332.548 550.465 cv
332.548 550.444 li
cp
.0342718 .634272 1 .00231937 cmyk
f
98.1659 617.869 mo
322.527 617.869 li
322.527 616.869 li
98.1659 616.869 li
0 0 0 0 cmyk
f
.0342718 .634272 1 .00231937 cmyk
%ADOBeginSubsetFont: KeepCalm-Medium Initial
ct_T42Dict begin
-0.148 -0.305 1.344 1.262
 256 array 0 1 255 {1 index exch /.notdef put} for  /KeepCalm-Medium
Type42DictBegin
[<00010000000c000c000c000c4f532f32a7b0cf0a000000cc000000606376
742004fe01720000012c000000186670676d06599c370000014400000173
676c79665f0d4d80000013080000ff3c686561640634d172000002b80000
00366868656108310519000002f000000024686d7478c1ad3dfd00000314
000005dc6c6f6361ee0a2ad0000008f0000002f06d61787003ab0a780000
0be0000000206e616d65c541ed0e00000c00000006ae70726570c7ead2f8
000012b000000056676469720000000000000000000000000003029201f4
0005000002bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000a00000af5000204a00000000000000007079727300800000
fb020320ff3800c8042e0118200001934500000002660320000000200002
001400900082009b0000000fff05001b0243000e0320000fb800002c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800012c20
20456944b001602db800022cb800012a212db800032c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800042c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800052c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800062c2020456944b00160202045
7d691844b001602db800072cb800062a2db800082c4b20b003265358b040
1bb000598a8a20b0032653582321b0808a8a1b8a235920b0032653582321
b800c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326
53582321b801408a8a1b8a235920b80003265358b0032545b80180505823
21b8018023211bb003254523212321591b2159442db800092c4b53584544
1b2121592d0000010000000100c5adbb517a5f0f3cf5000903e800000000
d136598000000000d137328cff6afecc054004ef00000009000200000000
0000000100000384fed400000568ff6aff65054000010000000000000000
000000000000017701f4003f0000000003e80000013b0000033f001402a2
002802770014013a00140284002802010028032c000f024e000f03e80000
03e80000027400500286004602d40028022d001403e8000003e8000003e8
0000039000280342002800fc002803c7002801c7002801bb0028011f0052
0281003c0293004603e8000003e800000111003c0195001e02f20028025c
002803a6002802eb005000c70019017b0032017bfff101e5001e02ae003c
00f9003c0176001e00fd003c013affec0318003c01a8002802a6002802d1
002802b7001e02b6003c02e90046024f001402e4004602d5003c00fd003c
00fd003c02a0003202c8004602a0003202340028048200320377000a02a8
0050032c0032033f00500288005002740050035800320307005001310050
0245001402eb00500277005003b40050032f005003ab00320294005003a5
003202b90050028400280289001e033f00460307000f0453000f0316000a
032c000f02d40028017a003c013affec0179000f048e0014022bffe70244
00770244001e0286003c025000280290002802af0028016f001402590023
0279003c0118003c0124ffce0258003c013a003c03c5003c027c003c02af
00280286003c028f002801d2003c020100280197000f027800320255000f
0379000f024f000f024e000f022d00140194001e010b00520194000f028b
0019014100000377000a0377000a032c003202880050032f005003ab0032
033f00460244001e0244001e0244001e0244001e0244001e0244001e0250
002802af002802af002802af002802af00280118001e0118fff60118ffc5
0118ffd4027c003c02af002802af002802af002802af002802af00280278
00320278003202780032027800320197000f01b4003202550028027c0032
048e0014017d000002770028025d003c038c0019028600280342001e024e
00c40244006602c80046043d000003ab003202ac0028048e0014025f0032
025f0032030a000f027d0032038c001902ce000502e6003c02d000320185
ffe20188001401c40014030e003203f9001e02af00280234002801110028
02a0002802a3000001e7ff6a0293004602d6000a02680014026800140301
003c013b00000377000a0377000a03ab0032051f003204750028024b001e
0397001e0194001e0194001e00c2001900c200190281003c033d0014024e
000f032c000f026dffec0327001e01710014016f00140287001402a90014
038c0019010c003c00c70019018f0019056800280377000a028800500377
000a0288005002880050013100320131ffdd0131ffe90131000203ab0032
03ab00320370000003ab0032033f0046033f0046033f00460118003e0244
005b024400570278005e025900740133013d024400a902840105031800b3
037701f60244005b032c003202500028032c0032025000280327001e0377
000a0244001e0288005002af00280288005002af00280131ffda0118ffc3
033f004602780032033f00460278003202840028020100280289001e0197
000f0358003202590023032f0050027c003c028400280201002802d40028
022d001402d40028022d00140176001e0131005002a1003c028400280201
00280289001e0197000f0377000a0244001e03ab003202af0028033f0046
02780032033f005002fc002802770050013a003c027700500194003c032f
0050027c003c02b9005001d2003c0289001e0216000f033f001402900028
0288005002af002802b9005001d2003b033f0046027800320377000a0244
001e0288005002af002803580032025900230131ffc50118ffaa02eb0050
0258003c02770050013a003c032f0050027c003c03ab003202af00280377
000a0244001e043d000003f9001e03ab003202af00280277005001a3003c
0453000f0379000f0453000f0379000f0453000f0379000f0453000f0379
000f032c000f024e000f032c000f024e000f035800320259002303b40050
03c5003c0289001e0197000f02740050016f0014032c0032025000280284
002802010028033f005002900028029400500286003c02a800500286003c
01e2002803e80000000000300030003000300084010e0136016c01f2027e
02a802d602d602d60326038a03ac03cc03cc03cc03cc0436048e04a40542
05a805e406060614062e062e062e064c06620692072e07cc0856086a0898
08c6090c0930095a0968097a098e09ea0a000a400ab00ade0b280b9c0bae
0c5a0cd00cf00d320d460d5a0d6e0dd60e840e9e0f140f540f9a0fbc0fdc
103a106c107e10a610ca10e01118114811a411ee126012d21344135c139a
13b013d013ec14101426143e145014681c481c561c6a1cd41d361d761dd8
1e121e441efc1f3e1f641f9c1fbe1fe22034207820d42136219621c22234
226a22aa22be22dc22f6231c2332236a237c23b423de23de2426248e250c
2536259a2606265426d0274c27ca284628e2298c2a1c2a5e2aa02ae62b50
2b6a2b842ba22bd62c522cc42d362da82e182ea82efa2f4e2fa22ffc3032
308430ee31583938394c398839fc3a9e3b1a3b583b6c3b943bb63be03c5a
3cc844a844c244dc4516455845e245fe4626466e46a84712476c47e2487a
48fa4954496e4984499c49da49f44a0a4a284a464a984a984aba4b1a4ba0
4c0c4c7c4c8a4c984cee4d484d744da04dc84de24e2e4e704e804ee64efa
4f0c4f684fc650505062508c50e451c451ea521c523e527c52aa52c852ea
531e533c53ae5424544454b6550a555c55b055c255d85618562c56505664
56b256f057145750576857b057f85844589458fa594c59e25a405ab05ae2
5b285b685bc25c365ca45ce85d305dd45e705ed05f485fbe608e60d4612a
61ae62326250626c629462be62cc62f6633a63c66446648864ea651e65a0
661e669c66fc675c67bc6838685c688c68d2692a696e69c86a4c6a846aa8
6b106b646bdc6c0e6c546cda6d126d8a6e0a6e2c6e9e6ec86f0a6f7a7056
7074708e70e07130717271c2720c726c72d0733473a474607492753c75ca
765e768676c476ee7718773e7764778a77b077f0783c786a789c78cc78fa
79567a187a587ac27aec7b347b647baa7bfc7c4e7cc47d2e7d7a7de07e32
7e9a7f207f887f9e7f9e0001000001770313002900000000000100000000
000a0000020007640000000000000016010e0001000000000000005d0000
0001000000000001000d005d00010000000000020007006a000100000000
0003001c007100010000000000040010008d00010000000000050045009d
0001000000000006000f00e20001000000000008001700f1000100000000
0009000b0108000100000000000a00c401130001000000000010000901d7
000300010409000000ba01e00003000104090001001a029a000300010409
0002000e02b40003000104090003003802c20003000104090004002002fa
0003000104090005008a031a0003000104090006001e03a4000300010409
0008002e03c20003000104090009001603f0000300010409000a01880406
00030001040900100012058e4b6565702043616c6d202876657273696f6e
20312e332920206279204b6569746820426174657320202020202020a920
323031312020207777772e6b2d747970652e636f6d202020202020206b65
697468406b2d747970652e636f6d204b6565702043616c6d204d65645265
67756c6172707972733a204b6565702043616c6d204d656469756d3a2032
3031354b6565702043616c6d204d656469756d4b6565702043616c6d2028
76657273696f6e20312e332920206279204b656974682042617465732020
2020202020a920323031312020207777772e6b2d747970652e636f6d4b65
657043616c6d2d4d656469756da920323031312020207777772e6b2d7479
70652e636f6d4b656974682042617465734b6565702043616c6d20697320
612068696768207175616c69747920666f6e74206261736564206f6e2074
6865207477656c766520617661696c61626c652075707065726361736520
6c657474657273206f662074686520274b6565702043616c6d20616e6420
4361727279204f6e2720706f737465722c20616e64206f6e2073696d696c
6172206c6574746572696e672066726f6d20746865206f74686572207477
6f20706f737465727320696e20746865206f726967696e616c2073657269
65732e4b6565702043616c6d004b006500650070002000430061006c006d
0020002800760065007200730069006f006e00200031002e003300290020
0020006200790020004b0065006900740068002000420061007400650073
002000200020002000200020002000a90020003200300031003100200020
0020007700770077002e006b002d0074007900700065002e0063006f006d
0020002000200020002000200020006b00650069007400680040006b002d
0074007900700065002e0063006f006d0020004b00650065007000200043
0061006c006d0020004d006500640052006500670075006c006100720070
007900720073003a0020004b006500650070002000430061006c006d0020
004d0065006400690075006d003a00200032003000310035004b00650065
0070002000430061006c006d0020004d0065006400690075006d004b0065
00650070002000430061006c006d0020002800760065007200730069006f
006e00200031002e0033002900200020006200790020004b006500690074
0068002000420061007400650073002000200020002000200020002000a9
00200032003000310031002000200020007700770077002e006b002d0074
007900700065002e0063006f006d004b00650065007000430061006c006d
002d004d0065006400690075006d00a90020003200300031003100200020
0020007700770077002e006b002d0074007900700065002e0063006f006d
004b0065006900740068002000420061007400650073004b006500650070
002000430061006c006d0020006900730020006100200068006900670068
0020007100750061006c00690074007900200066006f006e007400200062
00610073006500640020006f006e00200074006800650020007400770065
006c0076006500200061007600610069006c00610062006c006500200075
007000700065007200630061007300650020006c00650074007400650072
00730020006f0066002000740068006500200027004b0065006500700020
00430061006c006d00200061006e00640020004300610072007200790020
004f006e002700200070006f0073007400650072002c00200061006e0064
0020006f006e002000730069006d0069006c006100720020006c00650074
0074006500720069006e0067002000660072006f006d0020007400680065
0020006f0074006800650072002000740077006f00200070006f00730074
00650072007300200069006e00200074006800650020006f007200690067
0069006e0061006c0020007300650072006900650073002e004b00650065
0070002000430061006c006d0000b800002b01ba0001000300022b01bf00
010027002000190012000b000000082bbf0002002b002000190012000b00
0000082bbf00030024002000190012000b000000082b00ba000400040007
2bb8000020457d691844000000>
[16325 14797 16313 16213 1697 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 4892 47 <0002003cfff102e60331001300270044b800282fb800142f410500090014
0019001400025db900000003f4b8002810b8000ad0b8000a2fb9001e0003
f441050006001e0016001e00025db8000010b80029dc303101140e022322
2e0235343e0233321e0207342e0223220e0215141e0233323e0202e62e58
7f50507e582f2c558054547f562ca2112a453331442b13142b443030442b
1401874a9273474773924a4d987a4b4c7a984c2a64563a3b5764282a5d50
34344f5e>KeepCalm-Medium AddT42Char 
1 5120 49 <0001002800000274032f001d0021bb00160003000700042b410500090007
0019000700025db8001610b8001fdc30312901013e033534262322060727
3e0133321e0215140e020f01210274fdb4013412251e12433138581e6c35
866334614c2e1625321b72010c016d162f323117353e392d6b43481f3e5c
3c28484341228e00>KeepCalm-Medium AddT42Char 
1 0 0 <0002003f000001b60320000400090032b8000a2fb800062fb8000a10b800
00d0b800002fb8000610b80003dcb8000010b80005dcb80008d0b8000310
b8000bdc3031331121112137331123113f0177fe893efafa0320fce03f02
a3fd5d000000>KeepCalm-Medium AddT42Char 
KeepCalm-Medium /CharStrings get begin
/zero 47 def
/two 49 def
end
KeepCalm-Medium /Encoding get
dup 48 /zero put
dup 50 /two put
pop
end
%ADOEndSubsetFont
/BPKFLJ+KeepCalm-Medium /KeepCalm-Medium findfont ct_VMDictPut
/BPKFLJ+KeepCalm-Medium*1 
[48{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]
BPKFLJ+KeepCalm-Medium nf
BPKFLJ+KeepCalm-Medium*1 [47.2415 0 0 -54.7935 0 0 ]msf
81.2441 104.119 mo
(2020)
[31.1318 36.5171 31.1318 0 ]xsh
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BPKFLI+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB5
3E56E1831B0550D2FE4055F5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BPKFLI+MyriadPro-Regular /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/BPKFLI+MyriadPro-Regular*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /.notdef /E 
/F /G 4{/.notdef}rp /L /.notdef /N /O /P 
/.notdef /R /S /T /U 3{/.notdef}rp /Y 166{/.notdef}rp]
BPKFLI+MyriadPro-Regular nf
BPKFLI+MyriadPro-Regular*1 [26.9951 0 0 -28.1795 0 0 ]msf
238.952 82.6709 mo
(LENT)sh
238.952 104.339 mo
(EASTER)sh
0 0 0 0 cmyk
BPKFLI+MyriadPro-Regular*1 [26.9951 0 0 -28.1795 0 0 ]msf
237.657 82.708 mo
(LENT)sh
237.657 104.376 mo
(EASTER)sh
BPKFLJ+KeepCalm-Medium*1 [47.2415 0 0 -54.7935 0 0 ]msf
79.0908 103.666 mo
(2020)
[31.1318 36.5171 31.1318 0 ]xsh
609.089 182.57 mo
609.089 171.663 609.089 160.756 609.089 149.849 cv
609.089 149.429 609.082 149.01 609.091 148.59 cv
609.12 147.055 609.117 147.027 610.638 146.782 cv
612.49 146.485 614.343 146.17 616.206 145.985 cv
621.947 145.417 627.705 145.202 633.463 145.529 cv
637.623 145.765 641.707 146.544 645.52 148.405 cv
653.028 152.067 656.83 158.357 657.369 166.883 cv
657.537 169.54 657.364 172.192 656.776 174.799 cv
654.981 182.746 650.116 187.831 643.016 190.783 cv
637.892 192.914 632.519 193.459 627.054 193.312 cv
624.154 193.235 624.154 193.244 624.154 196.344 cv
624.154 203.055 624.159 209.768 624.151 216.479 cv
624.149 218.892 623.489 219.576 621.183 219.581 cv
618.102 219.589 615.02 219.595 611.94 219.579 cv
609.827 219.568 609.094 218.789 609.092 216.549 cv
609.085 205.223 609.089 193.896 609.089 182.57 cv
624.141 169.158 mo
624.141 172.374 624.165 175.591 624.126 178.806 cv
624.114 179.778 624.449 180.208 625.386 180.239 cv
627.395 180.304 629.408 180.437 631.406 180.184 cv
633.473 179.923 635.492 179.428 637.316 178.302 cv
641.587 175.663 642.623 171.549 642.091 166.759 cv
641.652 162.827 639.135 160.046 635.033 158.862 cv
631.877 157.95 628.682 158.099 625.463 158.391 cv
624.405 158.487 624.105 158.883 624.123 159.929 cv
624.171 163.006 624.14 166.082 624.141 169.158 cv
f
777.262 198.374 mo
777.703 198.093 777.768 197.67 777.879 197.271 cv
780.626 187.349 783.371 177.426 786.122 167.503 cv
786.665 165.551 786.677 165.551 788.71 165.551 cv
792.393 165.549 796.078 165.537 799.763 165.556 cv
801.658 165.564 802.601 166.864 801.957 168.652 cv
796.586 183.543 791.679 198.614 785.963 213.371 cv
784.131 218.102 782.053 222.713 779.502 227.077 cv
776.412 232.363 772.436 236.714 767.229 239.777 cv
762.839 242.361 758.076 243.144 752.936 243.086 cv
752.846 239.994 752.728 236.936 752.678 233.877 cv
752.654 232.559 752.192 231.005 752.855 229.984 cv
753.476 229.028 755.038 229.132 756.179 228.753 cv
761.67 226.923 765.789 223.392 768.585 218.126 cv
769.227 216.914 769.227 215.852 768.73 214.56 cv
762.928 199.467 757.175 184.354 751.426 169.239 cv
751.168 168.561 750.625 167.9 751.052 167.07 cv
751.551 166.105 752.107 165.476 753.365 165.51 cv
757.313 165.619 761.269 165.596 765.22 165.521 cv
766.364 165.5 766.826 165.893 767.182 167.024 cv
770.353 177.102 773.592 187.157 776.815 197.216 cv
776.941 197.605 777.109 197.981 777.262 198.374 cv
f
730.859 215.82 mo
730.122 215.949 729.761 216.507 729.269 216.851 cv
723.694 220.758 717.641 221.767 711.262 219.713 cv
703.679 217.269 699.699 209.656 700.505 201.906 cv
701.178 195.425 704.4 190.729 709.826 187.632 cv
714.007 185.247 718.554 184.16 723.246 183.646 cv
725.237 183.429 727.238 183.305 729.229 183.141 cv
729.278 180.289 728.067 178.352 725.558 177.27 cv
723.052 176.186 720.431 176.325 717.837 176.665 cv
714.899 177.05 712.094 177.961 709.46 179.417 cv
707.881 180.291 706.581 179.727 706.058 177.975 cv
705.36 175.644 704.737 173.288 704.018 170.965 cv
703.717 169.994 703.939 169.466 704.797 168.951 cv
708.453 166.76 712.41 165.517 716.533 164.871 cv
720.925 164.182 725.327 164.04 729.71 165.092 cv
737.717 167.017 742.766 172.613 744.153 181.101 cv
744.493 183.177 744.62 185.26 744.622 187.361 cv
744.627 194.494 744.61 201.624 744.676 208.755 cv
744.699 211.407 744.854 214.061 745.198 216.697 cv
745.414 218.353 744.486 219.556 742.898 219.573 cv
739.549 219.608 736.2 219.541 732.851 219.608 cv
731.789 219.629 731.422 219.173 731.338 218.175 cv
731.274 217.419 731.319 216.629 730.859 215.82 cv
729.733 198.834 mo
729.733 197.425 729.735 196.378 729.732 195.332 cv
729.73 194.834 729.519 194.558 729.007 194.578 cv
725.315 194.719 721.658 195.028 718.401 197.118 cv
717.165 197.91 716.289 199.025 715.827 200.479 cv
714.745 203.883 716.145 207.283 719.022 208.224 cv
723.309 209.627 728.548 206.556 729.583 202.019 cv
729.849 200.852 729.71 199.656 729.733 198.834 cv
f
679.684 171.085 mo
680.507 170.8 680.766 170.104 681.214 169.623 cv
685.126 165.425 689.76 163.545 695.392 164.697 cv
696.215 164.865 696.519 165.171 696.513 166.038 cv
696.484 169.811 696.527 173.585 696.489 177.358 cv
696.474 178.943 695.424 179.763 693.831 179.56 cv
692.296 179.367 690.748 179.247 689.234 179.615 cv
685.14 180.606 682.858 183.475 681.905 187.607 cv
681.53 189.24 681.432 190.912 681.436 192.599 cv
681.459 200.495 681.448 208.392 681.445 216.289 cv
681.445 218.974 680.859 219.579 678.265 219.582 cv
675.252 219.587 672.241 219.592 669.228 219.582 cv
666.999 219.573 666.233 218.779 666.232 216.463 cv
666.226 204.514 666.24 192.565 666.224 180.616 cv
666.217 176.496 666.254 172.373 665.919 168.258 cv
665.785 166.615 666.662 165.579 668.198 165.562 cv
671.544 165.526 674.891 165.585 678.238 165.529 cv
679.266 165.514 679.452 165.975 679.459 166.909 cv
679.469 168.278 679.405 169.667 679.684 171.085 cv
f
595.486 192.68 mo
595.486 200.575 595.49 208.468 595.485 216.363 cv
595.483 218.973 594.933 219.543 592.426 219.548 cv
589.28 219.557 586.135 219.566 582.99 219.545 cv
581.039 219.531 580.233 218.674 580.233 216.61 cv
580.224 200.544 580.224 184.476 580.233 168.408 cv
580.235 166.449 581.032 165.583 582.846 165.571 cv
586.192 165.55 589.538 165.552 592.884 165.571 cv
594.82 165.583 595.48 166.291 595.481 168.37 cv
595.493 176.473 595.486 184.578 595.486 192.68 cv
f
587.756 161.074 mo
582.984 161.056 579.548 157.555 579.553 152.716 cv
579.558 147.842 583.132 144.223 587.924 144.24 cv
592.723 144.256 596.21 147.845 596.222 152.779 cv
596.233 157.637 592.706 161.093 587.756 161.074 cv
f
139.251 556.992 mo
139.251 547.21 139.251 537.429 139.251 527.648 cv
139.251 527.271 139.245 526.895 139.252 526.519 cv
139.28 525.142 139.277 525.117 140.64 524.898 cv
142.301 524.631 143.962 524.349 145.634 524.183 cv
150.783 523.673 155.946 523.48 161.109 523.774 cv
164.84 523.985 168.503 524.684 171.923 526.353 cv
178.656 529.637 182.065 535.278 182.549 542.924 cv
182.699 545.307 182.544 547.685 182.017 550.023 cv
180.407 557.15 176.044 561.71 169.678 564.357 cv
165.082 566.268 160.264 566.757 155.362 566.625 cv
152.762 566.557 152.762 566.565 152.762 569.344 cv
152.762 575.363 152.766 581.383 152.759 587.402 cv
152.757 589.565 152.166 590.178 150.098 590.183 cv
147.334 590.191 144.571 590.196 141.808 590.181 cv
139.913 590.172 139.256 589.473 139.254 587.464 cv
139.248 577.307 139.251 567.149 139.251 556.992 cv
152.75 544.963 mo
152.75 547.848 152.771 550.733 152.736 553.617 cv
152.726 554.488 153.026 554.873 153.866 554.902 cv
155.668 554.959 157.474 555.079 159.265 554.852 cv
161.119 554.618 162.93 554.174 164.565 553.164 cv
168.395 550.797 169.325 547.108 168.847 542.813 cv
168.453 539.287 166.196 536.792 162.518 535.731 cv
159.687 534.913 156.822 535.046 153.935 535.308 cv
152.987 535.394 152.718 535.749 152.733 536.687 cv
152.777 539.447 152.748 542.206 152.75 544.963 cv
.0342718 .634272 1 .00231937 cmyk
f
290.068 571.165 mo
290.465 570.914 290.523 570.534 290.622 570.176 cv
293.085 561.278 295.547 552.379 298.015 543.48 cv
298.501 541.729 298.512 541.729 300.335 541.729 cv
303.639 541.727 306.943 541.716 310.247 541.734 cv
311.948 541.742 312.793 542.907 312.215 544.51 cv
307.398 557.865 302.997 571.38 297.872 584.614 cv
296.229 588.857 294.365 592.993 292.078 596.906 cv
289.307 601.646 285.741 605.548 281.072 608.295 cv
277.134 610.613 272.862 611.315 268.253 611.263 cv
268.172 608.49 268.067 605.747 268.022 603.004 cv
268.001 601.822 267.586 600.428 268.181 599.512 cv
268.738 598.655 270.138 598.749 271.161 598.409 cv
276.085 596.767 279.78 593.601 282.286 588.878 cv
282.863 587.791 282.863 586.838 282.417 585.68 cv
277.213 572.145 272.055 558.592 266.898 545.037 cv
266.667 544.429 266.181 543.836 266.563 543.091 cv
267.011 542.226 267.51 541.662 268.638 541.693 cv
272.179 541.79 275.726 541.77 279.269 541.703 cv
280.295 541.683 280.71 542.037 281.028 543.05 cv
283.873 552.089 286.777 561.105 289.668 570.126 cv
289.781 570.476 289.932 570.813 290.068 571.165 cv
f
248.454 586.81 mo
247.794 586.926 247.469 587.426 247.029 587.735 cv
242.03 591.24 236.6 592.144 230.879 590.302 cv
224.079 588.11 220.511 581.283 221.233 574.332 cv
221.837 568.521 224.726 564.309 229.592 561.532 cv
233.341 559.393 237.419 558.417 241.627 557.956 cv
243.412 557.762 245.207 557.651 246.993 557.503 cv
247.037 554.947 245.951 553.209 243.701 552.239 cv
241.453 551.267 239.102 551.391 236.776 551.697 cv
234.141 552.041 231.626 552.859 229.264 554.164 cv
227.847 554.949 226.682 554.442 226.213 552.871 cv
225.587 550.781 225.028 548.667 224.384 546.584 cv
224.114 545.714 224.313 545.241 225.082 544.778 cv
228.361 542.814 231.91 541.699 235.607 541.119 cv
239.545 540.501 243.494 540.374 247.424 541.318 cv
254.605 543.044 259.133 548.063 260.376 555.674 cv
260.682 557.537 260.796 559.404 260.797 561.289 cv
260.802 567.685 260.786 574.08 260.845 580.475 cv
260.866 582.853 261.006 585.233 261.314 587.597 cv
261.508 589.082 260.675 590.161 259.252 590.176 cv
256.248 590.207 253.244 590.148 250.242 590.207 cv
249.288 590.226 248.959 589.817 248.884 588.922 cv
248.827 588.245 248.868 587.537 248.454 586.81 cv
247.445 571.578 mo
247.445 570.314 247.447 569.375 247.444 568.438 cv
247.442 567.991 247.253 567.743 246.793 567.76 cv
243.483 567.887 240.203 568.164 237.282 570.039 cv
236.174 570.748 235.388 571.748 234.974 573.053 cv
234.003 576.106 235.259 579.155 237.839 579.998 cv
241.684 581.257 246.382 578.502 247.31 574.434 cv
247.549 573.387 247.424 572.315 247.445 571.578 cv
f
202.561 546.693 mo
203.299 546.437 203.532 545.813 203.933 545.381 cv
207.441 541.616 211.597 539.93 216.648 540.963 cv
217.385 541.115 217.659 541.388 217.653 542.166 cv
217.627 545.549 217.666 548.934 217.632 552.318 cv
217.618 553.74 216.676 554.475 215.248 554.293 cv
213.871 554.119 212.483 554.012 211.125 554.341 cv
207.453 555.231 205.408 557.803 204.553 561.509 cv
204.217 562.974 204.128 564.472 204.133 565.986 cv
204.152 573.067 204.143 580.149 204.14 587.231 cv
204.14 589.638 203.615 590.181 201.288 590.184 cv
198.586 590.189 195.886 590.194 193.184 590.184 cv
191.185 590.176 190.498 589.464 190.497 587.387 cv
190.493 576.671 190.504 565.956 190.49 555.24 cv
190.483 551.544 190.516 547.848 190.216 544.158 cv
190.096 542.684 190.883 541.754 192.26 541.74 cv
195.261 541.706 198.263 541.76 201.264 541.71 cv
202.186 541.696 202.353 542.11 202.359 542.947 cv
202.368 544.174 202.311 545.421 202.561 546.693 cv
f
127.053 566.059 mo
127.053 573.139 127.056 580.217 127.051 587.297 cv
127.05 589.638 126.557 590.149 124.307 590.154 cv
121.487 590.162 118.666 590.169 115.846 590.151 cv
114.096 590.138 113.373 589.371 113.373 587.519 cv
113.366 573.111 113.366 558.702 113.373 544.291 cv
113.375 542.535 114.09 541.758 115.717 541.747 cv
118.717 541.729 121.718 541.73 124.719 541.747 cv
126.455 541.758 127.047 542.393 127.048 544.257 cv
127.059 551.524 127.053 558.792 127.053 566.059 cv
f
120.119 537.714 mo
115.841 537.699 112.759 534.558 112.764 530.218 cv
112.768 525.848 115.973 522.602 120.27 522.618 cv
124.574 522.632 127.701 525.851 127.712 530.275 cv
127.722 534.632 124.559 537.732 120.119 537.714 cv
f
0 0 0 0 cmyk
BPKFLH+MyriadPro-Bold*1 [15.7698 0 0 -16.4617 0 0 ]msf
146.684 610.514 mo
(W)sh
160.277 610.514 mo
(ith the )
[4.3208 5.78711 9.24121 3.18555 5.78711 9.24121 8.32666 0 ]xsh
209.352 610.514 mo
(G)sh
220.186 610.514 mo
(os)
[9.09912 0 ]xsh
236.128 610.514 mo
(p)sh
245.606 610.514 mo
(el)
[8.32666 0 ]xsh
BPKFLI+MyriadPro-Regular*1 [12.0151 0 0 -12.5422 0 0 ]msf
104.85 631.212 mo
(P)sh
111.242 631.212 mo
(R)sh
117.766 631.212 mo
(A)sh
124.17 631.212 mo
(Y)sh
130.598 631.212 mo
(ER RESOU)
[5.91113 6.46436 2.54688 6.46387 5.91162 5.92334 8.27832 0 ]xsh
179.871 631.212 mo
(R)sh
186.359 631.212 mo
(CES FOR)
[6.96826 5.91162 5.92334 2.54688 5.85156 8.27832 0 ]xsh
230.31 631.212 mo
(Y)sh
236.389 631.212 mo
(OUNG PE)sh
282.959 631.212 mo
(OPLE)
[8.27832 6.3916 5.6709 0 ]xsh
135.997 556.242 mo
135.997 546.46 135.997 536.678 135.997 526.897 cv
135.997 526.521 135.991 526.145 135.998 525.768 cv
136.025 524.392 136.022 524.367 137.386 524.147 cv
139.047 523.881 140.708 523.599 142.38 523.432 cv
147.528 522.923 152.692 522.73 157.855 523.023 cv
161.586 523.235 165.249 523.934 168.669 525.602 cv
175.402 528.887 178.811 534.528 179.295 542.173 cv
179.445 544.557 179.29 546.935 178.763 549.273 cv
177.153 556.4 172.79 560.96 166.424 563.607 cv
161.828 565.518 157.01 566.007 152.108 565.875 cv
149.508 565.806 149.508 565.814 149.508 568.594 cv
149.508 574.613 149.513 580.633 149.505 586.652 cv
149.503 588.815 148.911 589.428 146.844 589.433 cv
144.08 589.441 141.317 589.446 138.555 589.431 cv
136.659 589.422 136.001 588.723 136 586.714 cv
135.994 576.557 135.997 566.399 135.997 556.242 cv
149.496 544.213 mo
149.496 547.098 149.517 549.983 149.482 552.866 cv
149.472 553.738 149.772 554.123 150.612 554.152 cv
152.414 554.209 154.219 554.329 156.011 554.101 cv
157.865 553.868 159.676 553.424 161.311 552.414 cv
165.141 550.047 166.071 546.358 165.593 542.062 cv
165.2 538.537 162.942 536.042 159.264 534.981 cv
156.433 534.163 153.567 534.295 150.681 534.557 cv
149.733 534.644 149.464 534.999 149.479 535.937 cv
149.523 538.697 149.494 541.456 149.496 544.213 cv
f
286.814 570.415 mo
287.21 570.163 287.269 569.784 287.368 569.426 cv
289.831 560.528 292.293 551.628 294.761 542.73 cv
295.247 540.979 295.258 540.979 297.081 540.979 cv
300.385 540.977 303.689 540.966 306.993 540.984 cv
308.693 540.992 309.539 542.156 308.961 543.76 cv
304.144 557.115 299.744 570.63 294.618 583.864 cv
292.974 588.106 291.111 592.242 288.824 596.155 cv
286.053 600.896 282.487 604.798 277.818 607.545 cv
273.88 609.862 269.608 610.565 264.999 610.513 cv
264.918 607.74 264.813 604.997 264.768 602.253 cv
264.747 601.072 264.332 599.678 264.927 598.762 cv
265.484 597.905 266.884 597.998 267.907 597.659 cv
272.831 596.017 276.526 592.85 279.033 588.128 cv
279.609 587.041 279.609 586.088 279.163 584.93 cv
273.959 571.395 268.8 557.842 263.644 544.287 cv
263.413 543.678 262.927 543.085 263.309 542.341 cv
263.757 541.476 264.256 540.912 265.384 540.943 cv
268.925 541.039 272.473 541.019 276.016 540.952 cv
277.041 540.933 277.456 541.286 277.774 542.3 cv
280.619 551.338 283.523 560.355 286.414 569.375 cv
286.527 569.726 286.677 570.063 286.814 570.415 cv
f
245.201 586.06 mo
244.54 586.176 244.215 586.676 243.775 586.985 cv
238.775 590.489 233.346 591.394 227.625 589.551 cv
220.825 587.36 217.256 580.532 217.979 573.582 cv
218.582 567.77 221.472 563.559 226.338 560.781 cv
230.087 558.643 234.165 557.667 238.373 557.206 cv
240.159 557.012 241.953 556.901 243.739 556.753 cv
243.783 554.197 242.697 552.459 240.447 551.489 cv
238.199 550.517 235.848 550.641 233.522 550.947 cv
230.888 551.291 228.372 552.108 226.01 553.414 cv
224.593 554.198 223.428 553.692 222.959 552.121 cv
222.333 550.031 221.774 547.917 221.13 545.834 cv
220.859 544.964 221.059 544.491 221.828 544.028 cv
225.107 542.064 228.656 540.949 232.353 540.369 cv
236.291 539.751 240.24 539.624 244.17 540.568 cv
251.351 542.294 255.879 547.312 257.122 554.924 cv
257.428 556.787 257.541 558.654 257.543 560.539 cv
257.547 566.935 257.533 573.33 257.591 579.725 cv
257.612 582.103 257.752 584.483 258.059 586.847 cv
258.253 588.331 257.421 589.411 255.997 589.426 cv
252.994 589.457 249.99 589.398 246.988 589.457 cv
246.034 589.476 245.705 589.067 245.63 588.172 cv
245.573 587.495 245.614 586.786 245.201 586.06 cv
244.191 570.828 mo
244.191 569.564 244.193 568.624 244.19 567.687 cv
244.188 567.241 243.999 566.993 243.539 567.01 cv
240.229 567.137 236.949 567.414 234.028 569.288 cv
232.92 569.998 232.134 570.998 231.72 572.303 cv
230.749 575.355 232.005 578.405 234.585 579.248 cv
238.43 580.507 243.128 577.752 244.056 573.684 cv
244.295 572.637 244.17 571.564 244.191 570.828 cv
f
199.307 545.942 mo
200.045 545.687 200.278 545.063 200.679 544.631 cv
204.187 540.866 208.343 539.18 213.394 540.213 cv
214.131 540.364 214.405 540.638 214.398 541.415 cv
214.373 544.799 214.412 548.184 214.377 551.568 cv
214.364 552.99 213.422 553.725 211.994 553.542 cv
210.617 553.369 209.229 553.262 207.871 553.591 cv
204.199 554.48 202.154 557.053 201.299 560.759 cv
200.963 562.223 200.874 563.722 200.879 565.235 cv
200.898 572.317 200.889 579.399 200.886 586.48 cv
200.886 588.888 200.36 589.431 198.034 589.434 cv
195.332 589.439 192.632 589.443 189.93 589.434 cv
187.931 589.426 187.245 588.714 187.243 586.637 cv
187.239 575.921 187.25 565.206 187.235 554.49 cv
187.229 550.794 187.263 547.098 186.962 543.407 cv
186.842 541.933 187.629 541.003 189.006 540.99 cv
192.007 540.956 195.009 541.01 198.01 540.959 cv
198.932 540.946 199.099 541.36 199.105 542.197 cv
199.114 543.424 199.057 544.67 199.307 545.942 cv
f
123.799 565.309 mo
123.799 572.389 123.802 579.467 123.797 586.547 cv
123.796 588.888 123.303 589.399 121.053 589.404 cv
118.233 589.412 115.412 589.419 112.592 589.401 cv
110.842 589.388 110.119 588.62 110.119 586.768 cv
110.112 572.361 110.112 557.951 110.119 543.541 cv
110.121 541.784 110.836 541.008 112.462 540.997 cv
115.463 540.978 118.464 540.98 121.465 540.997 cv
123.201 541.008 123.793 541.643 123.794 543.507 cv
123.805 550.774 123.799 558.041 123.799 565.309 cv
f
116.866 536.964 mo
112.587 536.949 109.505 533.808 109.51 529.468 cv
109.514 525.097 112.719 521.852 117.016 521.868 cv
121.32 521.882 124.447 525.101 124.458 529.525 cv
124.468 533.881 121.305 536.981 116.866 536.964 cv
f
.0342718 .634272 1 .00231937 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BPKFLI+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B64FADC8BE4593403BE5D574FAA91D2562B9CACA5724F68CBA
F9B633416D067A5E8A48880CF83E5CAB8A03949B1116C187CA13B7F370A65C8E
97DC500D70EFBCB5CC26BBB7D696E8150B2CA220CEDCF26D8B900AAD91454029
49556A2673EAB0E2F57A487E41> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BPKFLI+MyriadPro-Regular /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/BPKFLI+MyriadPro-Regular*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /D /E 
/F /G 4{/.notdef}rp /L /.notdef /N /O /P 
/.notdef /R /S /T /U 3{/.notdef}rp /Y 166{/.notdef}rp]
BPKFLI+MyriadPro-Regular nf
BPKFLI+MyriadPro-Regular*1 [13.4116 0 0 -14 0 0 ]msf
297.097 83.5752 mo
(AND)sh
0 0 0 0 cmyk
BPKFLI+MyriadPro-Regular*1 [13.4116 0 0 -14 0 0 ]msf
297.661 83.3354 mo
(AND)sh
.0342718 .634272 1 .00231937 cmyk
BPKFLJ+KeepCalm-Medium*1 [61.3423 0 0 -71.1485 0 0 ]msf
559.814 594.21 mo
(2020)
[40.4238 47.418 40.4238 0 ]xsh
0 0 0 0 cmyk
BPKFLJ+KeepCalm-Medium*1 [61.3423 0 0 -71.1485 0 0 ]msf
557.019 591.588 mo
(2020)
[40.4238 47.418 40.4238 0 ]xsh
%ADOBeginSubsetFont: Lato-Medium Initial
ct_T42Dict begin
-0.559 -0.27 1.34 1.082
 256 array 0 1 255 {1 index exch /.notdef put} for  /Lato-Medium
Type42DictBegin
[<00010000000c000c000c000c4f532f326a7ce799000000cc000000606376
74203ae0b4570000012c000000e66670676de414dbf00000021400000b97
676c7966a57f2566000084ec0005c52268656164091d2e9500000dac0000
0036686865610dd60ca700000de400000024686d7478c48ce73400000e08
00002f3c6c6f636129aeaa0a00003d4400002f406d6178700d960d760000
6c84000000206e616d65fb5ec47a00006ca40000178c707265706f0a693a
00008430000000b9676469720000000000000000000000000003045801f4
00050000057805140000011805780514000003ba005c022a0000020f0502
020204030203e10002ff5000ecff00000021000000007479504c00400000
feff064afe7a019007b601aa2000019f0000000003f8059c00000020000b
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000ca00ca00980098059c000003f80000feab
07b6fe5605acfff10408fff2feab07b6fe5600ca00ca00980098059c0000
059c03f4fff3feac07b6fe5605acfff105ab0408fff3feab07b6fe56008e
008e006b006b0684059c039302ec07b6fe56068505a4038b02de07b6fe56
008e008e006b006b067003930684059c039302ec07b6fe560678038b0685
05a4038b02de07b6fe5600ca00ca00980098059c000005be03f80000feab
07b6fe5605acfff005be0408fff2fe9507b6fe560000b0002c20b0005558
455920204bb8000e514bb006535a58b0341bb028596066208a5558b00225
61b908000800636323621b2121b00059b000432344b20001004360422db0
012cb02060662db0022c206420b0c050b004265ab228010a43456345525b
582123211b8a5820b050505821b040591b20b038505821b038595920b101
0a434563456164b028505821b1010a4345634520b030505821b030591b20
b0c050582066208a8a6120b00a5058601b20b020505821b00a601b20b036
505821b036601b605959591bb0012b595923b00050586559592db0032c20
4520b00425616420b005435058b0052342b00623421b212159b001602db0
042c232123212064b105624220b0062342b1010a434563b1010a43b00560
4563b0032a2120b00643208a208ab0012bb1300525b00426515860501b61
52595823592120b0405358b0012b1b21b0405923b000505865592db0052c
b007432bb20002004360422db0062cb00723422320b000234261b0026266
b00163b00160b0052a2db0072c20204520b00b4363b804006220b0005058
b040605966b001636044b001602db0082cb2070b004345422a21b2000100
4360422db0092cb000432344b20001004360422db00a2c20204520b0012b
23b00043b004256020458a2361206420b020505821b0001bb0305058b020
1bb040595923b00050586559b0032523614444b001602db00b2c20204520
b0012b23b00043b004256020458a23612064b0245058b0001bb0405923b0
0050586559b0032523614444b001602db00c2c20b0002342b20b0a034558
211b2321592a212db00d2cb1020245b06461442db00e2cb001602020b00c
434ab000505820b00c234259b00d434ab000525820b00d2342592db00f2c
20b0106266b0016320b80400638a2361b00e4360208a6020b00e2342232d
b0102c4b5458b10464445924b00d6523782db0112c4b51584b5358b10464
44591b215924b0136523782db0122cb1000f435558b10f0f43b0016142b0
0f2b59b00043b0022542b10c022542b10d022542b001162320b003255058
b101004360b00425428a8a208a2361b00e2a2123b00161208a2361b00e2a
211bb101004360b0022542b0022561b00e2a2159b00c4347b00d434760b0
026220b0005058b040605966b0016320b00b4363b804006220b0005058b0
40605966b0016360b10000132344b00143b0003eb20101014360422db013
2c00b10002455458b00f23422045b00b2342b00a23b00560422060b00161
b5101001000e0042428a60b112062bb0752b1b22592db0142cb100132b2d
b0152cb101132b2db0162cb102132b2db0172cb103132b2db0182cb10413
2b2db0192cb105132b2db01a2cb106132b2db01b2cb107132b2db01c2cb1
08132b2db01d2cb109132b2db0292c202eb0015d2db02a2c202eb001712d
b02b2c202eb001722db01e2c00b00d2bb10002455458b00f23422045b00b
2342b00a23b00560422060b00161b5101001000e0042428a60b112062bb0
752b1b22592db01f2cb1001e2b2db0202cb1011e2b2db0212cb1021e2b2d
b0222cb1031e2b2db0232cb1041e2b2db0242cb1051e2b2db0252cb1061e
2b2db0262cb1071e2b2db0272cb1081e2b2db0282cb1091e2b2db02c2c20
3cb001602db02d2c2060b01060204323b0016043b0022561b00160b02c2a
212db02e2cb02d2bb02d2a2db02f2c2020472020b00b4363b804006220b0
005058b040605966b001636023613823208a555820472020b00b4363b804
006220b0005058b040605966b00163602361381b21592db0302c00b10002
455458b00116b02f2ab1050115455830591b22592db0312c00b00d2bb100
02455458b00116b02f2ab1050115455830591b22592db0322c2035b00160
2db0332c00b0014563b804006220b0005058b040605966b00163b0012bb0
0b4363b804006220b0005058b040605966b00163b0012bb00016b4000000
0000443e2338b13201152a2db0342c203c204720b00b4363b804006220b0
005058b040605966b0016360b0004361382db0352c2e173c2db0362c203c
204720b00b4363b804006220b0005058b040605966b0016360b0004361b0
014363382db0372cb102001625202e2047b0002342b00225498a8a472347
23612058621b2159b0012342b236010115142a2db0382cb00016b00425b0
04254723472361b009432b658a2e2320203c8a382db0392cb00016b00425
b00425202e472347236120b0042342b009432b20b060505820b0405158b3
022003201bb30226031a5942422320b00843208a234723472361234660b0
0443b0026220b0005058b040605966b001636020b0012b208a8a6120b002
43606423b0034361645058b00243611bb003436059b00325b0026220b000
5058b040605966b0016361232020b00426234661381b23b0084346b00225
b0084347234723616020b00443b0026220b0005058b040605966b0016360
2320b0012b23b0044360b0012bb0052561b00525b0026220b0005058b040
605966b00163b004266120b00425606423b0032560645058211b23215923
2020b0042623466138592db03a2cb00016202020b00526202e4723472361
233c382db03b2cb0001620b0082342202020462347b0012b2361382db03c
2cb00016b00325b002254723472361b00054582e203c23211bb00225b002
25472347236120b00525b004254723472361b00625b0052549b0022561b9
080008006363232058621b215963b804006220b0005058b040605966b001
6360232e2320203c8a382321592db03d2cb0001620b00843202e47234723
612060b0206066b0026220b0005058b040605966b001632320203c8a382d
b03e2c23202e46b00225465258203c592eb12e01142b2db03f2c23202e46
b00225465058203c592eb12e01142b2db0402c23202e46b0022546525820
3c5923202e46b00225465058203c592eb12e01142b2db0412cb0382b2320
2e46b00225465258203c592eb12e01142b2db0422cb0392b8a20203cb004
23428a3823202e46b00225465258203c592eb12e01142bb004432eb02e2b
2db0432cb00016b00425b00426202e4723472361b009432b23203c202e23
38b12e01142b2db0442cb108042542b00016b00425b00425202e47234723
6120b0042342b009432b20b060505820b0405158b3022003201bb3022603
1a594242232047b00443b0026220b0005058b040605966b001636020b001
2b208a8a6120b00243606423b0034361645058b00243611bb003436059b0
0325b0026220b0005058b040605966b0016361b0022546613823203c2338
1b212020462347b0012b2361382159b12e01142b2db0452cb0382b2eb12e
01142b2db0462cb0392b212320203cb00423422338b12e01142bb004432e
b02e2b2db0472cb000152047b0002342b20001011514132eb0342a2db048
2cb000152047b0002342b20001011514132eb0342a2db0492cb100011413
b0352a2db04a2cb0372a2db04b2cb000164523202e20468a236138b12e01
142b2db04c2cb0082342b04b2b2db04d2cb20000442b2db04e2cb2000144
2b2db04f2cb20100442b2db0502cb20101442b2db0512cb20000452b2db0
522cb20001452b2db0532cb20100452b2db0542cb20101452b2db0552cb2
0000412b2db0562cb20001412b2db0572cb20100412b2db0582cb2010141
2b2db0592cb20000432b2db05a2cb20001432b2db05b2cb20100432b2db0
5c2cb20101432b2db05d2cb20000462b2db05e2cb20001462b2db05f2cb2
0100462b2db0602cb20101462b2db0612cb20000422b2db0622cb2000142
2b2db0632cb20100422b2db0642cb20101422b2db0652cb03a2b2eb12e01
142b2db0662cb03a2bb03e2b2db0672cb03a2bb03f2b2db0682cb00016b0
3a2bb0402b2db0692cb03b2b2eb12e01142b2db06a2cb03b2bb03e2b2db0
6b2cb03b2bb03f2b2db06c2cb03b2bb0402b2db06d2cb03c2b2eb12e0114
2b2db06e2cb03c2bb03e2b2db06f2cb03c2bb03f2b2db0702cb03c2bb040
2b2db0712cb03d2b2eb12e01142b2db0722cb03d2bb03e2b2db0732cb03d
2bb03f2b2db0742cb03d2bb0402b2db0752cb3090402034558211b232159
422bb00865b003245078b1050115455830592d0000010000000203d7e83e
8c675f0f3cf5001907d000000000d1e8a87900000000d1e9371efb9efde0
0a7f08780000000900020001000000000001000007b6fe5600000abdfb9e
f7c40a7f000100000000000000000000000000000bcf042f002c00000000
01f9000005530002055100010746fff6051300b10535005a0535005a05f1
00b106020002048200b1048200b1046b00b105b3005905fb00b1060b0019
023800b10239006303510017053900b1040600b104230016040600b10749
00b105fb00b105fb00b106450059064500590880005c04ba00b104b500b1
0645005a04ed00b10440003d0440003d04a2001e04be002c05c3009f05c3
009f05530002081f001b051c000f04ecfffe04b6003203e7003d03e7003d
064c00400464008903bd004f03be004f0827004f07cc004f0685004f0686
004f046400520464005204650053046e004e0423004f0423004f02c1002e
072d002e09a8002e053b002e0728002e09a2002e0487002f0487002f0486
002f0487002f0486002f0487002f0486002f0486002f0487002f0701002f
0700002e0701002f0701002f0701002f0701002f0701002f0701002f0701
002f0487002f0701002f06ce002e094a002f04a6002f071f002e0564002e
07e0002f0414003b04640052045f0089045fffa2045ffff101e7006d01e7
003f01e80092041c005f01e7ffb801e8ffb904050089040500890273002a
01de008d06750089045f0089045f00890472004f0470004506d400500465
0089046500890463005202dd00890365003e0365003e0642003e0643003e
049400880241002f02d4002902d2002702db002c0566002904dd002804de
00290560002907f300290756002807570029045e007e045e007e040e0013
062b001d03f00013040d0011038c003802df005f03240059032c006b022c
002802670050021100300267003202430030019000240240002502670050
0126003f0127ffe902510050012a0050037e005002660050026900300268
005002670031019d005001e5002901b000210266004a0224000703540019
024500160225000501f6002b032000760320001f0320011c0320010a0320
00540320004c032000540320004600000128032000680320004c03200058
032000480320006e03200074032000770320005d032000c2032000ce0320
00c2032000d7032000b20320009c0320010a0320010f032000ef032000e0
0320012403200138044900b105560019064500590550000004d8005305fb
00b104c30041068b0043066800600654006404a50050046000880472006d
044700290452004c038d00520316004d0494001204ad006c05150029021a
0081043b002704af008804080013031a004e031e004b04d700490468007b
04b4004f03a4004e03ab00180455007e05d4004d05d5004e03c5fffe0605
007906060054032001540320005601af005201af005204dd00b1043500b1
043500b1062f000e082c000e0482002605fb00b1054a00b105b4fffa0842
fffa088900b10645005905c400b104ec0002057bffff06280049061f00b1
05c400b105320058086d00b108c800b105cc001d071000b104c500b10543
00340544005a083300b10539fffa05cd001b05db001b05af00340495006d
0453004d03e40089033e0089033e008904dc001506360017038200310483
00890418008904990000068e00000589008904690089065f00890472004f
0469008903f6001a043b0011058f004d04c0008904690089040c004e0672
008906c900890495001c05ad008903c1008903c7003703c7004f06270089
03e1000b0454ffd70469001d03200064032000ab032000640220008a0385
004f03d8005801ca00660210008301f8007901d8006905e7006901af005d
01ae006202e6005d02e5006201b0005402e70054023700620238007a0367
00620368007a038f004101fa00b1020000b4038f004102e8007a048800b3
0635007e039a0043048800c1020f0069021a0056021a0038026800b20268
003b025d0041025d0040035200760488006d0488006d03e30062058b0045
0488007c04880073019c007902f2007905960055068d0065067c0061067c
0061067c006105e0005705d6007b033e00540488007f048800180438000f
0488005a048800860488002d04880028048800280438002a068900380915
00c90488002f04f90067030d0022043c00570427004e046b002503e80039
0446005e03d4002f044e0068040c00450438003404380084043800530438
0053043800090438005f043800580438005f0438005d0438005a05280066
0320001d0470004e0482004f04ac00250441004704280037044800430488
003a0488009c0488005a04880051048800130488006a0488006804880063
029c003a029c0063029c0046029c0042029c0020029c004f029c004e029c
0055029c004d029c0050029c0057029c006c029c006c014e003b014e0033
029c003a029c0060029c0044029c0041029c001d029c004f029c004d029c
0052029c004d029c00510118fe9305ce005e05b2005c0488006304880093
0488007d048800620488009304880094048800aa0488009f048800df0488
0063048800b6048800c804880090066f00670445003e05c0006904850051
03f1000404e00029056e0046055600490488006407d0006907d0007405dc
00ae05dc00af05dc002d05dc008605dc002d05dc008607d0006905dc00ae
032000cd032000c8032000540320004c0320ff1e0320ff1e032000540320
004c032000540320004c032000470320004d032000470320fff603200047
0320004d032000470320004c0320011a06a80059069f009f04ce004f04fe
007e04c40053052e0072052e007905a200b105b900b105760060047100ab
048300ab044800620204004e02b8003602550064035d00360257002a02f0
000d02e400190296fff60294002b0000fdae0320014a032000b90320ffd6
0320ffa6032000470320004d03200077032001240320010e030a0098030a
0098030a0098030a0092030a0098030a0098030a0098030a006e030a00cb
032000c20320014a030a0032030a0032030a0032030a0092030a0036030a
00a00320012103200121032000480460001d0460018000000000030a00f8
032000f203200041030a00de030a010a030a00130320014a023f006a03a0
00a2032000cb088e0052088e0052088e0068088e0068088e0071088e0052
088e00680238005802420053014f006202660053025f0067021100530262
0053025f00700356006f01b4006b01b600400243003d024e00410320002e
0320002e0000ff7703200077030a00de030a00130645002b05520031053e
002f053d005c0723002b04dd004e047d005105a9005304a30061046bff71
05b900590546ffde028900aa056600b1087500a305fbff710645005907de
005c05ed002b04b300b10437004a0540002c04a2001e0654006405b000a5
05abfffd04bd003604980030049900580483003805ed005a084e00b10582
00b105ba00b10503006304c5003205e400060606005d04f8001205930023
05c3009f04ec00b1059500b104c5003205410032046d0042049800b10465
fff5046400890485ffdf03c40050046400520412002a02aaff7606ac0089
045a00890405008904360009063b004f046500890366004402e9002902d4
002904b900100394003b0374004203700023037a00390423004a04520000
0373ffea050b0052042a004903a200380238006504c2008902eb002f06f4
005206f400520365003e03590039039a0007046300520486002602afff91
0484004303790028042a005b04b10089047a008903a20038040f0037033a
00310351008905d4004d0486002f0486002f0486002f0486002f0486002f
0701002f0701002f0701002f0701002f0701002f04dd00280756002803e7
007d04640051046400890464008903c3003303df00500464005204640052
0423004a0423004a05960046038d005204d00030046b004f04640053042f
004d03dcfff0040b0006045f007e045f0089045f0089030d001d01d40088
049c00890675007e0675007f06750089045fff81045f0089046900890472
004f061f004e05f8004d02dc000d02dc000d02dc000d02dd008902dd0089
028600c30286000203c4008903c30088036b004401d4ff4701d4ff460232
ff5602dc001302ca002f04c9003604ab005504350071040c0012062b001d
040c000c03bf0010038d0039047c00390373ffea0380002002ccff2202cc
002e03cf000703a0006c05c10058046b00530436004d0233ff5604040007
02ee00890464005207210052075d005208100052055600250407002805d2
0028069b002e05140080051a00820429006b045fff77045fff7704030013
0543fffe064a004c0403003403dd004e045b00890467001503570089038d
003101d500640270000e03f30089032c0041049f004d03dd003504b5004f
04bd00530539005206d3004d03c10054049a0063049a0063038d008903c3
002303c30023034b00150441007c04c80065063d004f04c1005904030012
05e9001f038900370371003403630043044c002803190089040100110469
008904b800500449001a02f3000f03d3000002c7006402da002003290064
027200640272003d0304003503390064015d006301d8001902e90064020f
006403ed0064033900640312005003580035029d002d02a2006402c50064
0276001a031b005a0459001d022c004a02670031035900320242003101eb
003301f30020012a003f0267005002120024026b0031026c0032028b0041
037d004a023f0018026a00500242000e025a002e033e002f020900090268
0048033e002f06c9007e0597002504780023041d002002d0005003d00027
04cc003204e000340281001003a5003802670050021f00300269002f01eb
0020015d00050266004a015e002a0154004c01260051016d00390179ffdb
0154004c01580043019f0050037e0050037e004a0268ffb402680050026e
005102690030033e002f01ea002d012affb501bb0022028f002802880033
0279005a024f00430224000701f4002b0278002b01e4fff9028c00410280
006901aa001a01be002e02460063029400c3041f00c301af006901900061
01900060022800230228003b03b0005803b0005801f100b202d500bc02d5
00bc030a008e030a008e030a008e030a008e0000008e0260002e02e600a1
02e600a102e600a102e600a102e600a103e8008c03e8008c024100300320
007704f70017047000b1057e0051047c001306a900b105a50015048f0058
0472006d03a8004f03aa004004fc002904a0003d06cb001f0468007a0469
ffe905d5004e038d007a0472004f03fb00150533008904ab000b039e004f
0465002c04e7003d01fa00a2063a00b1052c0026049f002604f200b1088e
000d059f00b1059300b105b100260650001d065600b107f800b1087800b1
067c005a04aa001e050e000f055e000e0725001d058d00580532005804fe
00b106aa001906aa0019058400b10601fffa05fb00b1064800b105320058
079600b105a900530498003006450059043800b1049f0025056c000e0576
003d04b40037062e0037060f001904c400180720fffa076700b105f5005a
04fd001c04a3006105fbfffa04cd00890418002c0397002d03d70089069d
0017047e008904670089046f002c04ec001c04c0008905d3008906630089
04d4004f03ff001a0408001004100014044c00120595001c0463004e040b
004d04040089051d0031051d0031043c008904f200000469008904c20089
040a004d05e100890423004a037cfff20472004f034100880398002d044b
001204320034060f00510529001103d2001306440000061500890458004d
0498001a038d005204e5000005bd00510561005d057a0064048800460488
0035063b005b0488002d078000cd084f005d06a600c805e1004d04f8004d
098e003e04e1003a0488001f05bd005a05d5006604bb005b0567005a0673
001404a200ac04aa006d0488009305f5007704880099032801370328ffeb
05dcffce05dc02ae05dc02ae05dcffce05dc02ae05dcffce087600a30524
003a04fe00b1043b0060054fffe4059c0065048200270674007f044f0050
0458001103860044046afff6048d007103bc001a07650051086800630772
00b1057ffffa07d600b1067b001608d600b1045f00190a45005a06a20059
0869006404fb005b061500710571008904640007063100890511001306e3
0089037200180876004f04f5004f06190055039a004f0000001603200058
03200054032000580000ffca0000ffc00000009e0000009e0485004f08a9
004808a9004808a9004808a9004808a9004808a9004808a9004808a90048
08a9004808a9004808a9004808a9004808a9004808a9004808a9004808a9
004808a9004808a9004808a9004808a9004808a9004801de008d04880066
0488005c064c00550201007b029c0046029c0043029c006205c0005405b0
005605cf005503780051092200550000fffe0364006702e9007b048800b3
0636007f0252006c0252008b0382006c0382008b02280076048800c10488
00c104880078023a009b038500560230005d02300047028300c102830048
027100490271004c03ccffed068d006505fb0067046f005a049700630512
00560470004f043d00610488002d0534004204c5005004e50064054d0059
05c300570438001f04380074043800780438004c0438003f043800510438
003704da005803fc0056040e006304680064047f004d0462005404380051
0497006604cf005a04380056043800830438009804380083043800910438
00a3043800b7043800c90438005804380083043800820438006b04380057
029c0033029c0057029c006c029c006c014e0058014e0056029c006c029c
005b029c0044029c0063029c003f029c002a029c004f029c0042029c0044
029c002c014e0038014e0035029c0033029c0057029c006c029c006c014e
0059014e0055029c003a029c0021029c004e029c004e029c0055029c004d
029c0050029c005c029c0043029c0063029c003f029c002a029c004b029c
0042029c0040029c0029014e003a014e0033029c0033014e0059014e0056
02b5007f029c005c029c0044029c0064029c003f029c002a029c0049029c
0042029c003f029c0028029c0035029c0057029c006c029c006c014e0058
014e0055029c006d029c003a029c005f029c0048029c0040029c0015029c
004f029c004d029c004f029c004d029c0052029c005c029c0044029c0062
029c0040029c002a029c0051029c0040029c0044029c002a014e0036014e
003702f1008d00640000062a00500614001906140019035800350000fc0b
0000fc0b025ffff9025d00360264fffe023300360224005504640052042a
004f0396005304bc005b03c4008903b4006602a7002a0347005d03530066
0360005f032c0056034f005c032d005c0372003a031600550000ffe70000
ff3f000000000438009c01af005502e6005502bc0064030a00a003200128
032001280320014c032000e003200068032000a603200091032000860320
00a0032000860320008e0320000c0320000c03200058032001280320006e
032000770180006305dc000003e8000005dc000003e80000029a000001f4
0000014d00000488000001af000000fa0000007d00000320fff003200005
032001280320012805b0002e08c5005d087c004705dc00ae000000f70530
00cc0000ffe70000fe0f01f40000020e00840190000008a6004608a60046
08a9004808a9004808a9004808a9004808a9004808a9004808a9004808a9
004808a9004808a9004808a9004808a9004808a9004808a9004808a90048
08a9004808a9004808a9004808a9004808a9004808a9004804b0005c0330
00840330008404b0006d0330007e0000fc0b000000000000fc2a00000000
00000000032000680320004c0320006e03200067032000740320000b0320
006403200058032000480320005303200054032000460320ffe002bc0082
032000e0032000480320005c0320fee60320ff920000fffc032000480320
004803200058032000460320ffe7032000740320006e0320ffa00320005d
032000680320004c03e8004a030a00a1030a00a1030a00de030a010a0320
00c2030a0098030a0098030a0098030a009404e2004a04e2004a046000e4
03200086032000c50320008c030a003e05550098055500980320006e0320
006e0320006e0320006e032000770320007703200077053a002b0487002f
0701002f0320007a0320010a01e7ffb80372ffea059100b2050700600485
0072048800550000ffba00000076000000760000ffca0487002f04a6002f
04a6002f0564002e0564002e0358fffb05b20057059a005705ab005705a7
005705ab005505b9005505d2004405d5005605d100560559005c06440059
0219ffac04200020042500070471004f0320006e032000e6032000c401f1
00b205f100b104640052032000640464ff9604640052043000b1045e007e
0383003103bd004f037c00b10438009c039c004405a400c30514003803ac
008a048200260535005a03bd004f03bd002d0539005a053a002b02310095
03200021019000600190006103c900390347003507ac00230464ff970366
fff9037bffce036c003103e7006a0127003f019e004f0266004a02250008
0269005002470011020c000c041d002e01900060019000610000fe6f0000
fe6f03200076032000540320005403200077032000680000ff8603200054
032000770000fdae030a003204880000032000b9030a0098030a00a001b4
006b05fb007302dd0073045f008902fb001902d4001f0000fd560000fcff
0000fdfc0000fdea0000fd340000fd2c0000fd340000fd260000fd480000
fd2c0000fd380000fd280000fd4e0000fd540000fd570000fd3d0000fda2
0000fdae0000fd920000fd7c0000fdea0000fdef0000fdcf0000fdc00000
fd360000fd440000fd440000fe880000fdc60000fda40000fe6c0000fd34
0000fd340000fd570000fd480000fd4e0000fe080000fe080000fe2c0000
fdc00000fd480000fd860000fd710000fd660000fd800000fd6e0000fd66
0000fcec0000fcec0000fd380000fecb045600a1045600a1045600a10456
00a102e6006c0456006c0456006c0456006c0456006c0456006c02e6005c
0456005c0456005c0456005c0456005c0456005c02e60057045600570456
005704560057045600570456005702e60055045600550456005504560055
045600550456005502e6006d0456006d0456006d0456006d0456006d0456
006d045600a1045600a1045600a1045600a102e6006c0456006c0456006c
0456006c0456006c0456006c02e6005c0456005c0456005c0456005c0456
005c0456005c02e600570456005704560057045600570456005704560057
02e6005c0456005c0456005c0456005c0456005c0456005c02e6006d0456
006d0456006d0456006d0456006d0456006d045600a1045600a1045600a1
045600a102e6006c0456006c0456006c0456006c0456006c0456006c02e6
005c0456005c0456005c0456005c0456005c0456005c02e6005704560057
0456005704560057045600570456005702e6005c0456005c0456005c0456
005c0456005c0456005c02e6006d0456006d0456006d0456006d0456006d
0456006d045600a1045600a1045600a1045600a102e6006c0456006c0456
006c0456006c0456006c0456006c02e60055045600550456005504560055
045600550456005502e60057045600570456005704560057045600570456
005702e6005c0456005c0456005c0456005c0456005c0456005c02e6006d
0456006d0456006d0456006d0456006d0456006d045600a1045600a10456
00a1045600a10000fe880000fdee0000fe6c0000fdee0000fd560000fcff
0000fdfc0000fdea0320011c0320001f0320011d0000fe040000fd860000
fd480000fdc00000fe2c0000fe080000fe080000fd090472004f030a0032
000000320000fd710000fd660000fd800000fd6e0000fd660000fcec0000
fcec0000fd380000fe080000fecb0000fd3b0000fd2c0000fd380000fdad
0000fda80000fdfa0000fcd20000fdea0000fdef0000fe180000fe180000
fc110000fcce0000fc800000fb9e0000fc1d0000fcf70000fd3b0000fd48
0000fccc0000fc310000fce50000fc9f0000fc3b0000fc510000fd4e0000
fd4e0000fd4e0000fd4e0000fd570000fd570000fd570000fd570000fcec
0000fcec0000fcec0000fcec055300020553000205530002055300020553
0002055300020553000205530002055300020553000205530002054effff
055300020553000205530002055300020553000205530002055300020553
000205530002055300020553000205530002055300020553000205530002
055300020553000205530002055c0002055300020553ff4e0553ff390553
ff9e055300020553ff480553ff360553ff9e055300020553fff805530002
0553000205530002055300020553ff4e0553ff390553ff9e055300020553
ff480553ff360553ff9e054e0000054e0000055300020746fff60746fff6
0744fff4051300b1051300b105240009051300b1051300b1051300b10534
00590534005905340059053400590535005a054d00200539005a05340059
05f100b105f100b105f100b105f100b105f100b10abd00b1098200b10602
000206020002048200b1048200b1048200b1048200b1048200b1048200b1
048200b1048200b1048200b105220006048200b1048200b1048200b10482
00b1048200b1048200b1048200b104820009048200b1048200b1048200b1
0482008b048200b1048200b104b3ffc6048200b1048200b1048200b10482
00b1048200b10482ff1e0482fe330482fe1e0482ff250482fe2d0482fe1b
0486ff4e0482ff39048200b1046b00b105b3005905b3005905b3005905b3
005905b3005905b3005905b3005905fb00b105fb00b10600ff6a05fb00b1
05fb00b105fb00b105fb00b105fb00b105fb00b105fbff1e05fbfe3305fb
fe1e05fbfe8305fbff2505fbfe2d05fbfe1b05fbfe830600ff4e05fbff31
05fb00b105fbff1e05fbfe3305fbfe1e05fbfe8305fbff2505fbfe2d05fb
fe1b05fbfe830238ffa20238008d0238ffdb0238ffdb0238ffd702380003
0238ffec0238009e023800b10238ff550238ffd7023800b10238ffd70238
0059023800a50238ffd50238ff2f0238ffec0238fff20238ffd70238ff0e
0238fe230238fe0e0238fe730238ff150238fe1d0238fe0b0238fe730238
ff390238ff1f023800030238ffec023800b1023800b105c200b103510017
0351001703630017053900b1053900b1053900b1053900b1053900b10539
00b104060098040600b104180013040600b10406000e040600b1040600b1
078000b1060500b1074900b1074900b1074900b1074900b1074900b105fb
00b105fb00b105fb00b105fb00b105fb00b105fb00b105fb00b105fb00b1
05fb00b105fb00b1096200b107e700b10645005906450059064500590645
005906450059064500590645005906450059064500590643ff8706450059
064500590645005906450059064500590645005906450059064500590645
005906450059064500590645005906450059064500590645005906450059
064500590645005906450059064500590645ff410645fe560645fe410645
ff490645fe500645fe3e0645ff6d0645ff49064500590642005904ba00b1
04ba00b104ba00b104ba00b104cc000704ba00b104ba00b104b500b104ed
00b104ed00b104ed00b104ed006904ed00b104ed00b104ed00b104ed00b1
04ed00b10440003d0440003d0440003d0440003d0440003d0440003d0440
003d0440003d0440003d0440003d04a2001e04a2001e04a2001e04a2001e
04a2001e04c4ffcb04a2001e04a2001e04a2001e04a2001e05c3009f05c3
009f05c3009f05c3009f05c3009f05c3009f05c3009f05c3009f05c3009f
05c3009f05c3009f05c3009f05c3009f05c3009f05c3009f05c3009f05c3
009f05c3009f05c3009f05c3009f05c3009f05c3009f0553000205530002
081f001b081f001b081f001b081f001b081f001b081f001b051c000f051c
000f051c000f051c000f04ecfffe04ecfffe04ecfffe04ecfffe04ecfffe
04ebfee604ecfffe04ecfffe04ecfffe04ecfffe04ecfffe04ecfffe04eb
fec404ebfdb304ebfdb904ebfe2204ebfed004ebfed404ecfffe04ecfffe
04e7fffc04b6003204b6003204b6003204b6003204b6003204b6003204b6
003203e7003d03e7003d03e7003d03e7003d03e7003d03e7003d03e7003d
03e7003d03e7003d03e7003d03e7003d03e7003d03e7003d03e8ff7c03e7
003d03e7003d03e7003d03e7003d03e7003d03e7003d03e7003d03e7003d
03e7003d03e7003d03e7003d03e7003d03e8002f042d003d03e7003d03e7
003d03e7003d03e7003203e7003d064c0040064c0040064c004004640089
04640089046400890466008903bd004f03bd004f03bd004f03bd004f03bd
004f03c2ffe203bd004f03be004f04640052046400520464005204640052
04ad005204640052080900520423004f0423004f0423004f0423004f0423
004f0423004f0423004f0423004f0423004f0423004f0423004f0423004f
0423004f0423004f0423004f0423ffc00423004f0423004f0423004f0423
004f042a00180423004f0423004f0423004f0423004f0423004f0423004f
0423004f0423004f02c1002e02d7002e0487002f0487002f04ad002f0486
002f0487002f0487002f0487002f04ad002f0701002f0701002f072b002f
0701002f06f7002f0701002f0701002f072b002f04a6002f0414003b0414
003b0414003b0414003b0414003b0414003b0414003b0464005204640052
046400520464005204640052046400520598005204640052046400520464
0052045fffa5045f0089045f0089045fffa9045f0046045f0089045ffff1
03ea006d01e7006d01e7006d01e7ffc90216006301e7ffdf01e7008501e7
ffbd01e7ffd101e7ffe301e7ffd701e7ffe001d4ffcd01e7ffe301e70037
01e7ffbd0204ffd701e7ffc10204000a01d500890204008b01e7ffe001e7
ff3f01e7ffb80230ffda01d4ffae01e7ffb801f8ffc7040500890405ffa2
040500890405008904050089046500890406008901de005f01de0085022c
001d01de007b01deffd301deffcf01deffb50276003f03e6008d06770089
06750089067500890675008906c50089067d008b045f0089045f0089045f
0089045f0089045f0089045f0089045f0089045f0089045f008904af0089
065600890472004f0472004f0472004f0472004f0472004f0472004f0472
004f0472004f0472004f0472004f0472004f0472004f0472004f0471004f
0472ffca0472004f0472004f0472004f0472004f0472004f0472004f0472
004f0472004f0472004f0472004f0472004f0472004f0472004f0471004f
0472004f0471004f0471004f0472004f0472004f0472004f0472004f0472
004f0472004f047200450464008904640089046400890464fff604660089
0464008902dd008902dc006802dd008102fc001702dd008902dd007702dd
007702e4005002dc008802dcffea0365003e0365003e0365003e0365003e
0365003e0365003e0365003e0365003e0365003e0365003e03b3003e0241
002f02d2002702d4002a02d3002902d4002902d4002902d4002902f1ffaa
04de002904de002904dc002704de002904de002904de002904dc002704de
002904de002904dc002704dd002704dc0027050f0029050f002904de0029
04de00290756002907560029075500270756002907560029075600290755
002707560029075600290755002707550027075500270784002907840029
0756002907560029045e007e045e007e045e007e045e007e045e007e045e
007e045e007e045d007e045f007e045e007e045e007e045e007e045e007e
045e007e045e007e045e007e045e007e045e007e045e007e045e007e045e
007e04a0007e045e007e045e0076040e0013040e001304160012062b001d
062b001d062b001d062b001d062b001d062b001d062b001d03f0001303f0
001303f0001304470012040d0011040d0011040d0011040d0011040d0011
040d0011040d0011040d0011040d0011040d0011040d0011040d0011040d
0011040d0011040d0011038d0039038c0038038c0038038c0038038c0038
038c003803db0038022c0028022c00280267005002110030026700320243
00300242003001900024024000250240002502710059019b0079013ffffb
0251005001380057037e005002690030026900300268005001aa005001ee
003101b000210266004a02240007035100170257001f02450016024a0016
01f6002b0550000004c30041066800600651ffbc0663006b0654ff780654
fe8d0654fe780654fedd0654ff7f0654fe870654fe750654fedd0654ffa3
0653ff7a065400640654ff780654fe8d0654fe780654fedd0654ff7f0654
fe870654fe750654fedd04a5005004a5005004a5005004a5005004a50050
04a5005004a5005004a5005004a5005004a5005004a5005004a5005004a5
005004a5005004a5005004a5005004a5005004a5005004a5005004a50050
04a5005004a5005004a5005004a5005004a5005004a50050038d0052038d
0052038d0052038d0052038d0052038d0052038d0052038d0052038d0052
0494001204aa002804940012049400120494001204940012049400120494
001204940012049400120494001204940012049400120494001204940012
049400120494001204940012049400120494001204940012049400120494
00120494001204940012021a0081021affaa0232008102860041021a007d
0219fffa0219ffe5021affdb021a007d0219fff40219ffe2021affdb021a
ffaa0219ff600219ffac021a0081021a00350219ffbc0219ffc20219ffcb
051800b00468007b0468007b0455007e0455007e0455007e0455007e0455
007e0455007e0455007e0455007e0455007e0455007e0455007e0455007e
0455007e0455007e0455007e0455007e0455007e0455007e0455007e05d4
004d06050079060600540606005406060054060600540606005406060054
060600540606005406060054060600540606005406060054060600540606
005406060054060600540606005406060054060600540606005406060054
06060054060600540606005404dd00b1043500b1082c000e082c000e0482
002605fb00b105fb00b105fb00b105fb00b1054a00b10645005904ec0002
04ec000204ec000204ec000205320058071000b105430034057bffff03e4
0089033e0089063600170636001703810031038a00390382003104830089
04830089048300890483008904830089041700890589008904690089040c
004e05ad008903c70037043b0011019f004a0210008301af007304c40016
01af006502e6006501a90089040100880635007e064c008a031400000314
000000000000000000000000000000000000020f00690226007406a20044
04880092048800ec06a6005906a6005906a6005906a6005906a70059069f
009f069f009f069f009f069f009f069f009f04ce004f04ce004f04ce004f
04ce004f04ce004f04fe007e04fe007e04fe007e04fe007e04fe007e0000
fdae0000fdae0000fdae0320014a0000014a0000014a032000b9000000b9
000000b9000000b90000ffd60000ffa6000000470000004d032000770000
007700000077000000770320012403200124000001240000012400000124
0320010e0000010e0000010e0000009800000098030a0098000000980000
009800000098000000920000009800000098000000980000006e000000cb
000000c20000014a00000032000000320000003200000032000000920000
0036030a00a0000000a0000000a0000000a0000001210000012103200048
00000048000000480000001d00000180030a00f8000000f8000000f80320
00f2000000f2000000f2032000410000004100000041000000de0000010a
000000130320014a01b200780000014a0000014a0000006a000000a20320
00cb000000cb000000cb00000052088e00520000005200000052088e0068
000000680000006800000068088e00710000007100000071088e00520000
0068023800580000005800000058024200530000005300000053014f0062
0000006200000062026600530000005300000053025f0067000000670000
0067021100530000005300000053026200530000005300000053025f0070
00000070000000700356006f0000006f0000006f01b4006b0000006b0000
006b0000006b01b6004000000040000000400243003d0000003d0000003d
024e004100000041000000410320002e0000002e0000002e0320002e0000
002e0000002e0320007700000077030a00de000000de000000de00000013
049800300498003004a6005203c3003303bb002d025fff8c0311ff4703be
fffd0325ff8a031c001f038d008902f3000f02c700640329006402720064
0304003503390064015d006301d8001902e90064020f006403ed00640339
006402a2006402c500640276001a031b005a0459001d029400c3041f00c3
00000061000000610228003b04f7ff0004f7001704f7fdc104f7fdb504f7
fe3004f7feea04f7fed404f7001704f7001704f7fed2064200b105a90053
06450059042a004a0423004a0472004f0000fff003200005000000050000
000503200128000001280000012803200128000001280000012808680063
061500710abd00b108090052098200b1074a00200540002f000000000000
010400000104000001040000018c0000029c0000034c00000408000004d8
0000068c00000708000007b800000818000009000000095400000a280000
0a8000000b0800000b3400000bdc00000c7800000d1000000d5000000dbc
00000dd400000e7400000ee000000fc80000106800001188000013380000
13c0000014500000155c00001604000016f000001894000018d800001944
000019b800001ab000001b2000001bd400001c5c00001ccc00001d300000
1e4800001fbc000021c0000022c8000023b400002518000026bc00002948
00002b2000002dec00002ec800002ee000002fdc000030f8000031ec0000
33b800003450000036d000003a0400003b8400003d2800003f5400003ff0
0000409c0000417800004190000042d4000042ec00004304000044340000
44c4000045bc0000473c000047540000476c000049740000498c000049a4
00004b3c00004c7800004d4c00004e780000503c000052680000532c0000
5494000055ec000057a80000594000005a9400005b0800005bb800005c4c
00005cc400005dc400005df800005f68000060100000607c000061180000
61b00000620800006220000062f800006390000064b00000656000006660
0000681800006910000069e000006afc00006be400006cc800006e600000
70e0000074000000753c000075bc000076640000767c0000773800007890
00007a6c00007b3c00007c3c00007dd0000080100000813c000081dc0000
82d00000833c0000840000008488000085040000856800008640000086c8
0000874400008818000088bc0000897000008a1c00008ae400008b680000
8cdc00008d5000008e0400008ef800008f8000008fb40000904c0000906c
000090f0000091c0000092b40000935800009424000094b00000952c0000
95940000963c000096bc0000973400009798000097e00000982800009870
000098bc000099180000996c000099d000009a3000009a8000009b000000
9b9400009c4000009cd400009d0800009d3c00009da400009e0800009ea8
00009f2c0000a0080000a0c00000a1340000a1a80000a1fc0000a2580000
a3240000a3d00000a43c0000a46c0000a4a80000a5140000a5cc0000a630
0000a6a00000a6e00000a7980000a85c0000a8f80000a9f80000ab280000
ac600000ad740000ae100000af340000b0600000b1200000b1b00000b268
0000b3640000b3b80000b5200000b66c0000b6e40000b7c80000b8a40000
ba5c0000bafc0000bbac0000bc600000bd180000bdac0000be800000bf70
0000c0b80000c1740000c26c0000c2c80000c3c40000c3e40000c43c0000
c4d80000c5140000c55c0000c6100000c6fc0000c8300000c8b80000c94c
0000c9e00000cae80000cbc40000cc8c0000cccc0000cd800000cdfc0000
ceb80000cf180000cf7c0000cff00000d0480000d0b80000d1540000d16c
0000d1f80000d2cc0000d3b40000d50c0000d5c40000d6640000d6e40000
d7980000d8b00000d9f40000dabc0000daf80000db680000dc140000dcf8
0000de280000deac0000df3c0000dfcc0000e0c80000e1740000e1cc0000
e2a40000e37c0000e3bc0000e4000000e4a40000e6340000e6940000e6f8
0000e7680000e7c00000e8300000e8c40000e9640000e9ec0000eaec0000
ebf00000ed300000ede80000eeb80000ef680000efdc0000f05c0000f0dc
0000f16c0000f2440000f3400000f3bc0000f3e00000f4040000f4580000
f4780000f4c40000f4e40000f4fc0000f52c0000f5780000f5900000f5dc
0000f6280000f6400000f6580000f6980000f6c40000f7080000f7480000
f77c0000f7b00000f7e40000f81c0000f88c0000f8e40000f9400000f99c
0000fa380000facc0000fbfc0000fd240000fe080000feb40000ffa00001
00d40001013c000101a0000102300001028000010298000103d800010528
000106b400010828000109c000010a8400010c6800010cf800010de00001
0f000001101c000111ac000112900001136c00011414000114c400011570
000117640001188c0001198c00011a5800011ab000011ac000011ad00001
1ae000011af000011b0000011b1000011b2000011b3000011bfc00011c64
00011d3000011e2c00011ec400011f8800012050000120b8000121bc0001
22800001231c0001238400012394000123a4000123b4000123c4000123d4
000123e400012480000124ec000125b0000126a000012730000127f40001
285c0001291800012938000129580001297800012998000129b8000129d8
000129f800012a1800012a3800012a5800012a7800012a9800012ab80001
2ad800012af800012bfc00012c6000012d1000012e7400012efc0001306c
000131b00001321c000133a80001345000013490000134c0000134f00001
35480001357c000135c800013678000136c40001377c000138b0000138fc
00013944000139b800013a2c00013aa000013b0000013bbc00013ca00001
3dcc00013ef400013f940001401400014064000140dc00014154000141dc
00014264000142d800014350000143d40001444c000144cc000145500001
4614000146b800014748000147e0000148640001490c0001499000014a0c
00014ae800014bd400014c9800014d9000014e2c00014ec800014f640001
4ffc000150f0000151f0000152d0000153e0000154340001551c000155d0
000156c8000157c0000158dc0001597400015c7800015d8400015edc0001
6024000161740001624c00016398000164400001650c000165600001662c
000166fc00016768000167ec00016858000168b0000168e4000169180001
695c000169d000016a4400016aec00016b9400016c0000016c7000016ce4
00016d2c00016d6c00016dac00016df800016e3c00016e8800016eb40001
6f1c00016f8c0001702c00017074000170b400017188000171ec00017234
000172e00001731c000173940001740c000174b40001752c0001759c0001
759c000175c400017624000176d0000176f80001772000017760000177c0
000178980001798000017a0000017a8400017aa400017ac400017b0c0001
7bd400017c5800017cbc00017d8800017e8000017ef000017f7c00018000
000180b000018160000181d800018278000182ec00018378000183dc0001
846000018514000185c800018694000187180001874000018780000188a8
0001894400018a1400018b1800018c0400018c9c00018cf400018dcc0001
8ed800018f6c0001907c0001910c00019194000192940001937c00019468
000195300001964800019734000197e8000198c40001994000019a1c0001
9afc00019bdc00019ca800019d3400019e0400019ec800019fdc0001a0d4
0001a1fc0001a2a00001a32c0001a43c0001a5300001a5d00001a7940001
a84c0001a8f40001a9180001aa380001aaf80001ab700001ac400001ac98
0001acdc0001ae1c0001af3c0001b05c0001b2200001b3040001b4200001
b5840001b6740001b7200001b8300001b9540001ba480001bba40001bc88
0001bdc40001bee40001bff80001c0800001c1400001c2080001c3180001
c40c0001c62c0001c6ec0001c8a80001c9b80001caa40001cb680001ccb0
0001cdb00001cf100001d06c0001d1f80001d2d80001d3680001d4ec0001
d5dc0001d7000001d7e00001d8b80001d95c0001d9f40001daac0001db24
0001dc240001dc7c0001dcc00001dd9c0001de800001df600001e0780001
e1b00001e3680001e5500001e6dc0001e9000001eb2c0001ed700001eee0
0001f0e40001f1fc0001f3140001f4280001f5800001f6680001f7b80001
f8f80001fa280001fb280001fc1c0001fdc00001feb4000200d4000201d0
000203580002044c0002051c000206200002069c00020790000209280002
09d800020a5800020b3400020c0800020cbc00020e1800020f3800021040
000210ac00021184000212bc000213a00002148000021560000216800002
1768000218d000021964000219ec00021a9000021b3400021c9c00021d7c
00021e4400021f900002204c00022118000221f0000222f4000224240002
248800022538000225a800022610000226e4000227cc0002288c000229cc
00022a6000022af800022bb000022c6800022d4400022e4c00022f7c0002
308c0002312c0002316c000232c8000234c40002373c00023a3000023bec
00023e04000240a80002427800024364000243e00002444c000245380002
469000024718000247c80002498000024a5800024b5000024bc400024c68
00024cc800024dc000024e3400024ee800024f7000024fdc000250900002
518800025230000252cc000253c40002552000025650000256ac00025728
000257a800025850000258f80002593c000259e800025a6400025b680002
5c1800025c8400025d3800025d9000025e8400025f740002602c00026068
000260cc0002610c000261a80002623c000262cc000263ac000264600002
653c000265b000026638000266b800026770000267d00002680400026868
000268f40002695800026a0000026a7800026af000026b7800026c840002
6d0800026da800026dec00026e5800026f0400027008000270fc000272e8
000273a4000274ac0002762400027698000277bc00027868000279140002
797000027a3400027adc00027bd400027ca400027d2c00027e8400027f48
00028034000280ec0002810c00028288000283a4000284fc0002868c0002
86e0000287d4000288c00002897800028acc00028c7c00028d6800028e74
00028f580002910800029180000291fc00029294000292f00002931c0002
93680002945c000294b40002953000029570000296c80002976800029880
0002992c0002999c00029a4000029aec00029bf400029c9000029d980002
9e4000029efc00029f680002a0740002a0dc0002a1700002a2540002a328
0002a3d80002a4e40002a5880002a6240002a6c00002a7080002a7780002
a7c40002a8400002a8b80002a9440002a9d80002aa3c0002aaa80002aadc
0002ab400002ab800002abf40002ac5c0002acac0002ace00002ad940002
ae580002ae9c0002aee80002af340002af800002afc00002b0080002b050
0002b0700002b0ac0002b1c00002b2480002b3940002b3ec0002b49c0002
b5980002b6dc0002b6ec0002b8200002b9540002b9640002ba380002bb3c
0002bcd00002bd8c0002bd9c0002be940002bf2c0002bfd80002c08c0002
c1880002c2340002c5200002c7d00002c8280002c92c0002c9dc0002ca40
0002cb7c0002cc900002cd4c0002cdf80002ceac0002cf4c0002cfc00002
d0240002d1740002d3800002d3e40002d4780002d5280002d59c0002d62c
0002d6c00002d72c0002d8380002d94c0002da580002db200002dc280002
dc980002dd280002dde00002deb80002df880002e0500002e0ac0002e1e0
0002e3300002e3d40002e4600002e6740002e7840002e85c0002e9600002
ea440002eb100002ec740002ed800002ef000002f0040002f0ac0002f10c
0002f24c0002f3580002f4040002f4b00002f55c0002f5f40002f6680002
f6c80002f8100002f9300002f9940002f9fc0002fa840002fb340002fba8
0002fc340002fcc80002fd300002fe680002ff80000300c4000301880003
0258000302c800030354000304180003050c0003051c000305f40003064c
00030780000308d00003097000030b3000030c6800030d3800030eac0003
101c0003119c000312b4000312c4000314380003157c0003175c00031908
0003198000031a8000031b9400031c4c00031e0800031fdc000320740003
2118000321b4000323b0000324d0000325d4000326e8000327c4000328f8
00032a0400032bfc00032c5800032cc000032d2000032d7800032dd80003
2e5c00032ee000032f1400032f4800032f8800032fc80003301000033058
000331d400033350000334740003355c000336040003374c000337cc0003
395000033a4000033c0000033ce000033d9400033ec000033f4000033ff8
0003411c00034250000342e8000343a4000344900003458c000348a00003
48b8000349a000034bb800034da800034e88000351040003519c00035254
000353340003542c000357fc00035814000358e800035c8400035ddc0003
5e1800035ee400035ff4000360dc0003618000036224000362a800036334
000364a0000364c4000364e80003650c0003653000036554000365780003
659c000365c0000365e40003673c00036770000367a4000367d80003680c
0003684000036874000368a8000368dc0003691000036af000036b240003
6b5800036c2000036d2800036ecc00036f5c00036f7c00036f9c00036fbc
00036fec0003701c0003704c000371240003734400037364000374900003
74ac000374c8000374e4000375000003751c000375480003757400037590
000375ac000375c8000375e4000376680003773c00037758000377740003
7790000377ac000377c8000377e4000377f800037814000378e0000378f0
0003790000037a0400037a1400037a2400037a3400037ae400037b5c0003
7b6c00037c1c00037d4000037e6800037f7c000380840003814c000381c0
000382b0000383600003848800038498000384a8000384b8000384c80003
84d8000384e8000384f80003850800038580000385cc000386cc00038774
000387b00003881400038878000388b40003892400038958000389b80003
8a0400038aac00038bc800038c1800038c4c00038c9800038cf400038d34
00038da400038e7800038ffc000390d400039194000392300003929c0003
9380000394200003953000039580000395d0000395f00003961000039630
000396500003967000039690000396b0000396d0000396f0000397100003
9730000397500003977000039790000397b0000397d0000397f000039810
00039830000398500003987000039890000398b0000398d0000398f00003
991000039930000399500003997000039990000399b0000399d0000399f0
00039a1000039a3000039a5000039a7000039a9000039ab000039ad00003
9af000039b1000039b3000039b5000039b7000039b9000039bb000039bd0
00039bf000039c1000039c3000039c5000039c7000039c9000039cb00003
9cd000039cf000039d1000039d3000039d5000039d7000039d9000039db0
00039dd000039df000039e1400039e1400039f340003a1500003a3280003
a3b40003a3c80003a3e80003a4680003a5040003a5540003a5a40003a6a8
0003a85c0003a9e80003ab740003ac780003ad1c0003adec0003ae700003
af6c0003b0b40003b1900003b2bc0003b3e40003b4ac0003b55c0003b5dc
0003b61c0003b6840003b6840003b6b80003b7040003b71c0003b7500003
b7600003b7e80003b8840003b8c40003b9040003b9840003ba980003bba0
0003bca00003bd700003be9c0003bf5c0003c0380003c1140003c2400003
c2c80003c2fc0003c3640003c3dc0003c3dc0003c3dc0003c3dc0003c3dc
0003c3dc0003c3dc0003c3dc0003c3dc0003c3dc0003c3dc0003c3dc0003
c4900003c5000003c5800003c6080003c6700003c8c40003cdc80003cea0
0003cf0c0003d0200003d0940003d10c0003d10c0003d2180003d2180003
d2d80003d3540003d44c0003d5140003d6380003d77c0003d8a80003d9dc
0003dafc0003dbd00003dd2c0003de440003e00c0003e1100003e2b40003
e4d00003e60c0003e7f40003e99c0003eab40003ecf00003ee940003f074
0003f0bc0003f0f00003f13c0003f1940003f22c0003f28c0003f2ec0003
f3700003f3d00003f3d00003f4840003f5500003f5b80003f6200003f644
0003f6b40003f7b00003f85c0003f9240003f9e00003faac0003fb8c0003
fc100003fc380003fcbc0003fce00003fd040003fd580003fd980003fdd4
0003fdf80003fe1c0003fe400003fe640003fe880003feac0003fed00003
ff440003ffa40004004000040064000400cc000400f40004011c00040144
0004016c000401f00004023000040270000402b0000402f0000403740004
03f000040454000404ec00040564000405e00004061c00040664000406ac
000406e800040724000407600004079c000407d800040814000408500004
08600004092800040aa400040b5000040ba400040bbc00040bd400040cf0
00040d5000040dfc00040eb400040f5800040ff0000410980004113c0004
11540004116c000411840004119c000411b4000411dc0004120c0004123c
0004126c0004129c000412cc000412fc0004132c0004135c0004138c0004
13bc000414f80004151000041590000416300004175c00041790000417d8
0004181c000418480004186c00041890000418b000041a5c00041bb40004
1bd800041bf000041d8800041ed000041ee800041ef800041f2400041f3c
00041f5000041f6800042100000422f4000423180004233c000423600004
2384000423b4000423d4000423f400042414000425880004268c00042874
00042a1400042b9c00042cc000042dc400042eb000042ed000042ef00004
2f1000042f3000042f5000042f7000042f90000430ec0004310c0004312c
00043140000431540004319c000432000004325c000432c8000433480004
33c40004343c000434a4000434c8000434e8000435300004355000043570
00043590000435b0000436b4000436cc000436e400043784000437a80004
37bc000437d0000437e4000437f80004380c000438200004383400043848
0004385c000438700004388400043898000438ac000438c0000438d40004
38e8000438fc0004391000043924000439380004394c0004396000043974
000439880004399c000439b0000439c4000439d8000439ec00043a000004
3a5000043a6400043a7800043a8c00043aa000043ab400043ac800043adc
00043af000043b0400043b1800043b2c00043b4000043b5400043b680004
3b7c00043b9000043ba400043bb800043bcc00043be000043c3c00043c9c
00043cfc00043d5c00043da800043e1400043e7400043ed000043f2c0004
3f8c00043fd800044048000440b40004411800044174000441d800044224
000442940004430400044370000443d4000444300004447c000444e40004
4550000445bc000446200004467c000446c80004472400044784000447ec
00044854000448b80004491c0004497c000449e000044a4000044a8c0004
4af800044b6000044bc000044c1c00044c7800044cc400044d3400044da4
00044e1000044e7400044ed000044f1c00044f8400044ff00004505c0004
50c00004511c00045168000451c80004522c00045298000453040004536c
000453b80004541400045474000454dc0004554c000455b8000456180004
5678000456d80004573800045784000457f000045860000458c800045928
0004597c000459c800045a3000045a9c00045b0800045b6c00045bc80004
5c1400045c7400045cd800045d4400045db000045e1800045e6400045ec0
00045f2400045f900004600000046070000460bc00046118000461780004
61d800046240000462ac0004630c00046370000463d0000464300004647c
000464e000046548000465b00004661000046668000466b4000467100004
6774000467dc00046844000468ac000468f800046954000469b800046a24
00046a9400046b0400046b5000046bb400046c1000046c7400046ce00004
6d5000046d9c00046dfc00046e5800046ebc00046f1c00046f8800046fe8
00047048000470a800047104000471200004716000047170000471800004
7194000471a8000471bc000471d0000471e0000472000004722000047234
000472480004725c000472700004728400047298000472ac000473340004
734c000473a800047404000474180004742c000474400004745400047468
0004747c00047490000474a4000474b8000474cc00047518000475480004
75680004757c00047590000475a400047604000476180004762c00047640
00047660000476b80004770c00047760000477dc0004785c0004793c0004
7988000479b800047a0c00047a5800047aa000047aec00047b6400047be4
00047c2400047c6400047ca400047ce400047d2400047d6400047da40004
7de400047e1400047e4400047e7400047ea400047ebc00047ed400047eec
00047f0400047f1c00047f3400047f4c00047f6400047f7c000480040004
8028000480b4000480cc000480e4000480fc000481140004812c00048144
000481640004817c00048194000481ac000481c4000481e4000481fc0004
8228000482540004826c00048284000482a8000483a0000483b8000483d0
000483e80004840000048418000484300004844800048460000484780004
8490000484a8000484c0000484d8000484f8000485180004853800048558
0004857800048598000485b8000485d8000485f000048608000486200004
86380004865000048704000487c00004887c000489580004897c00048994
000489ac000489c4000489dc000489f400048a1800048ae800048c3c0004
8d0c00048f0400048f1c00048f4000048f6400048f8800048fac00048fc4
00048fdc0004908c0004913c000491540004916c000491840004919c0004
91b4000491cc000491e4000492080004926800049290000492f000049308
000493200004933800049350000493680004938000049398000493b00004
93c8000493e800049400000494180004952c000496140004962c00049658
000496700004969400049808000498200004983800049850000498680004
988000049898000498b0000498c8000498e0000499040004991c00049934
000499580004997000049988000499a0000499b8000499d000049a280004
9a4c00049aa400049abc00049ae000049af800049b1000049b2800049b40
00049b5800049b7000049b8800049ba000049bb800049bd000049be80004
9c0000049c1800049c3000049c5000049c7000049c9000049cb000049cd0
00049cf000049d1000049d3000049d4800049d6000049d7800049d900004
9da800049dc000049dd800049dfc00049e2800049e4c00049e6400049e90
00049ea800049ec000049ed800049ef000049f0800049f2000049f440004
9f7000049f8800049fa000049fb800049fd000049fe80004a0000004a018
0004a0300004a0480004a0600004a0780004a0900004a0bc0004a0e80004
a1000004a1180004a1b40004a2780004a2900004a3240004a33c0004a354
0004a36c0004a3840004a39c0004a3b40004a4140004a42c0004a44c0004
a4640004a47c0004a4940004a4ac0004a54c0004a5ec0004a6040004a628
0004a6400004a6640004a6880004a6ac0004a6c40004a7300004a7540004
a7780004a7900004a7a80004a7c00004a7d80004a7f00004a8080004a820
0004a8380004a8500004a8680004a8800004a8980004a8b00004a9500004
a9740004aa140004aa2c0004aa440004aa5c0004aa740004aa8c0004aaa4
0004aac40004aadc0004ace00004acf80004ad100004ad3c0004ad700004
ad940004adc00004ade40004ae100004ae280004ae540004ae6c0004ae84
0004ae9c0004aeb40004aecc0004aee40004aefc0004af140004af2c0004
af440004afcc0004b0540004b06c0004b0900004b1680004b18c0004b230
0004b2c00004b2d80004b2f00004b3080004b3200004b3380004b35c0004
b3740004b3940004b3ac0004b3c40004b3dc0004b3f40004b40c0004b4f8
0004b51c0004b5340004b54c0004b5700004b59c0004b5b40004b5cc0004
b6100004b6540004b7440004b8140004b8380004b8500004b8680004b880
0004b8980004b8b00004b8c80004b8e00004b8f80004b9100004b9280004
b9400004b9580004b9700004b9880004b9a00004b9cc0004b9f80004ba24
0004ba500004ba680004ba800004baa40004babc0004bae00004baf80004
bb100004bb280004bb400004bb580004bb700004bb880004bbac0004bbc4
0004bc4c0004bcd40004bcf80004bd100004bd280004bd400004bd580004
bd700004bde00004be040004be1c0004be340004be4c0004be640004be7c
0004bea00004beb80004bed00004bee80004bf000004bf180004bf300004
bf480004bf600004bfd00004bfe80004c0000004c0240004c0880004c0a0
0004c0b80004c0d00004c0e80004c1000004c1180004c1300004c1480004
c1600004c1780004c1900004c1a80004c2c00004c2d80004c2f00004c308
0004c3200004c3380004c3500004c36c0004c3840004c39c0004c3b40004
c3cc0004c3e80004c4000004c4180004c4440004c45c0004c5d80004c7f4
0004c80c0004c8240004c83c0004c8540004c86c0004c8840004c89c0004
caa00004cab80004cad00004cae80004cc5c0004cc740004cc8c0004cca4
0004ccbc0004cda80004cee80004cfa40004cfbc0004cfd40004cfec0004
d0040004d01c0004d16c0004d2740004d28c0004d2a40004d2bc0004d2d4
0004d2ec0004d3040004d31c0004d3340004d34c0004d4400004d4580004
d4700004d4880004d4a00004d4b80004d4d00004d4e80004d5000004d518
0004d5380004d6f80004d8680004d8800004d8980004d8b00004d8d40004
db040004db1c0004db340004db4c0004db700004dcac0004dcc40004dce8
0004dda80004ddc00004ddd80004ddf00004de140004dec80004dee00004
df040004e0240004e03c0004e0540004e06c0004e0900004e1fc0004e214
0004e22c0004e2440004e25c0004e2740004e28c0004e2a40004e2bc0004
e2d40004e2ec0004e3040004e31c0004e4700004e5c40004e8e40004e8fc
0004e9140004e92c0004e9440004e95c0004e9740004e98c0004eab40004
eacc0004eb8c0004eba40004ec1c0004ec340004ec580004ed5c0004ed74
0004ed8c0004eda40004edbc0004edd40004edec0004ee040004ee1c0004
ee340004ee4c0004ee640004ee880004eeb40004ef040004ef380004ef50
0004ef680004ef800004f04c0004f1180004f2c00004f2d80004f35c0004
f3740004f38c0004f3a40004f3bc0004f3d40004f5000004f5100004f528
0004f5400004f5900004f5a80004f5c80004f5e00004f5f80004f66c0004
f6840004f75c0004f7740004f78c0004f7a40004f9240004fa9c0004fab4
0004facc0004fae40004fafc0004fb140004fb2c0004fb440004fb5c0004
fb740004fcbc0004fcd40004fcec0004fd040004fd1c0004fd340004fd4c
0004fd640004fd7c0004fd940004fe240004fe3c0004feec0004ff040004
ff1c0004ff340004ff4c0004ff640004ff7c0004ff9c0004ffb4000500e8
0005010000050118000501440005015c000501740005018c000501a40005
01bc000501d4000501ec000502040005021c000502340005024c00050264
0005027c00050294000502ac000502c4000503bc000503d4000503ec0005
0518000506e0000507fc000508140005082c000508440005096000050978
00050990000509b000050b6000050b7800050b9000050ba800050bc00005
0bd800050bf000050cd400050cec00050d0400050d2c00050d4400050d60
00050f8400050fa800050fc0000511080005112000051138000511500005
116800051240000512580005127000051288000512a0000512b8000512d0
000512e80005130000051318000513440005136800051394000514f40005
15f40005160c000516240005163c000516540005166c000516840005169c
000516b4000516cc000516e4000516fc000517280005174c000517780005
193800051a9400051aac00051ac400051adc00051af400051b0c00051b24
00051b3c00051b5400051b6c00051b8400051b9c00051bb400051bcc0005
1be400051bfc00051c2800051c4000051c5800051c7c00051ca000051cb8
00051cd000051ce800051e0000051e1800051e3000051e4800051e600005
1f5800051f7000051f8800051fa000051fb800051fd000051fe800052000
00052088000520a0000520b8000521dc000521f40005220c000522240005
223c000522b8000522d0000522e800052300000523180005233000052348
000523600005237800052390000523a8000523c0000523d8000523f00005
2408000524200005243800052524000525f800052724000527cc000528b0
0005295c00052a5400052b1800052b9800052d9400052f90000530000005
309800053168000531fc00053238000532d80005335c000533e4000534b8
000535640005362c000536c80005374c000537b40005386c000538ec0005
3970000539e400053a4800053aac00053b6400053c0000053c2400053cfc
00053d1400053d2c00053d4400053d5c00053d7400053d8c00053da40005
3dbc00053dd400053dec00053e0400053e2400053e4400053e6400053e84
00053ea400053ec400053ee400053f0400053f1c00053f3400053f4c0005
3f6400053f7c00053f9400053fac00053fc400053fdc00053ff40005400c
000540240005403c000540540005406c0005408c000540ac000540cc0005
40ec0005410c0005412c0005414c0005416c0005418c000541ac000541cc
000541e4000541fc000542140005422c000542440005425c000542740005
428c000542a4000542bc0005434c000543640005437c00054394000543ac
000543c4000543dc000543f40005440c000544240005443c000544540005
446c0005448c000544ac000544cc000544ec0005450c0005452c0005454c
0005456c00054588000545a8000545c8000545e0000545f8000546800005
47440005475c000547740005478c000547a4000547bc000547d4000547ec
000548040005481c000548340005484c000548640005487c000548940005
48ac000548c4000549e4000549fc00054a1400054a2c00054a4400054a5c
00054a7400054a8c00054aa400054abc00054ad400054aec00054b040005
4b1c00054b3400054b4c00054b6400054b7c00054b9400054bac00054bc4
00054bdc00054cd800054d9400054dac00054dc400054ddc00054df40005
4e0c00054e2400054e3c00054e5400054e6c00054e8400054e9c00054eb4
00054ecc00054eec00054f0c00054f2c00054f4c00054f6c00054f8c0005
4fac00054fcc00054fec0005500c0005502c000550c8000550e0000550f8
00055110000551280005514c0005517000055194000551b8000551d00005
5298000552b0000552c8000552e0000552f8000553100005533000055354
0005536c000554340005544c000554640005547c000555ac000557780005
5790000557a8000557c0000558440005585c000558740005588c00055938
00055990000559a8000559c0000559d8000559f000055a8000055aa40005
5af000055b1400055b3400055b6400055b9000055ba800055bdc00055c24
00055c5c00055c9400055ccc00055d0400055d3c00055d7400055dcc0005
5e240005601800056064000560a8000560cc000560f00005611400056138
000561500005617400056198000561bc000561e0000561f8000562100005
622800056240000562580005627000056294000562b8000562dc00056300
000563180005634c00056380000563b4000563fc00056430000564780005
64d40005651800056574000565b80005662c000566a000056748000567f0
00056860000568cc0005693c000569a800056a2c00056a9c00056b0c0005
6b9000056c0000056c8400056cf800056d7c00056dc400056e0400056e40
00056e8000056ebc00056efc00056f4800056f8c00056fd8000570040005
706c000570dc0005717c000571c40005720400057244000573180005737c
000573c400057470000574ac000574e80005752400057560000575d80005
765000057700000577a800057858000578d0000579400005796800057990
000579b800057a1000057a7000057ac800057b9c00057c4800057d1c0005
7d4400057d6c00057dac00057e2800057e8400057ee400057f6000058038
00058120000581ac0005822c000582b80005833c0005835c0005837c0005
839c000583bc000583dc000583fc00058444000584f8000585c000058674
000586e0000587440005880c000588d8000589a000058a6000058b580005
8c1800058ca800058d1800058da800058e3000058ebc00058f4400058fc4
00059048000590c80005917000059220000592c800059370000594200005
94c800059538000595b000059620000596cc0005976c0005981800059890
000599040005997c000599f000059a8800059b1400059b9c00059c040005
9c6800059cd000059d4c00059dd000059e4c00059efc00059fb00005a060
0005a1100005a1c40005a2740005a2f80005a37c0005a3a40005a3cc0005
a3f40005a4340005a44c0005a51c0005a68c0005a7740005a82c0005a938
0005aa7c0005ab080005abc40005ac7c0005acfc0005ad840005ae380005
aeac0005af080005afc40005b01c0005b0480005b0ac0005b1340005b174
0005b2140005b2840005b3040005b3a00005b3e00005b44c0005b4fc0005
b5440005b5b40005b6300005b6ac0005b7400005b7640005b77c0005b794
0005b7ac0005b7c40005b7dc0005b7f40005b80c0005b8240005b83c0005
b8b00005b8c80005b8e00005ba740005ba8c0005baa40005bb580005bbd0
0005bc400005bcb80005bd400005bddc0005be640005bef40005bf7c0005
c00c0005c0300005c0480005c0680005c0880005c0a80005c2c80005c522
000100000bcf00ed0010008f00060002005000600077000000e60b970003
000100>
<00000022019e000100000000000000c300000001000000000001000400c3
0001000000000002000600c70001000000000003002900cd000100000000
0004000b00f60001000000000005003401010001000000000006000b0135
000100000000000700300140000100000000000800180170000100000000
000900370188000100000000000a047301bf000100000000000b00180632
000100000000000c0019064a000100000000000d00c30663000100000000
000e001a0726000100000000001000040740000100000000001100060744
00030001040900000186074a0003000104090001001608d0000300010409
0002000e08e60003000104090003005208f4000300010409000400160946
00030001040900050068095c0003000104090006001609c4000300010409
0007006009da000300010409000800300a3a0003000104090009006e0a6a
000300010409000a08e60ad8000300010409000b003013be000300010409
000c003213ee000300010409000d01861420000300010409000e003415a6
0003000104090010000815da0003000104090011000c15e2436f70797269
6768742028632920323031312d32303135206279207479506f6c616e6420
4c756b61737a20447a6965647a69632028687474703a2f2f7777772e7479
706f6c616e642e636f6d2f29207769746820526573657276656420466f6e
74204e616d6520224c61746f222e204c6963656e73656420756e64657220
7468652053494c204f70656e20466f6e74204c6963656e73652c20566572
73696f6e20312e312028687474703a2f2f736372697074732e73696c2e6f
72672f4f464c292e204c61746f4d656469756d7479506f6c616e64204c75
6b61737a20447a6965647a69633a4c61746f204d656469756d3a32303134
4c61746f204d656469756d56657273696f6e20322e3031353b2032303135
2d30382d30363b20687474703a2f2f7777772e6c61746f666f6e74732e63
6f6d2f4c61746f2d4d656469756d4c61746f20697320612074726164656d
61726b206f66207479506f6c616e64204c756b61737a20447a6965647a69
632e7479506f6c616e64204c756b61737a20447a6965647a69634c756b61
737a20447a6965647a69632077697468204164616d2054776172646f6368
20616e6420426f74696f204e696b6f6c74636865764c61746f2069732061
2073616e73657269662074797065666163652066616d696c792064657369
676e656420696e207468652053756d6d6572203230313020616e64206578
74656e64656420696e207468652053756d6d657220323031332062792057
61727361772d62617365642064657369676e6572204c756b61737a20447a
6965647a69632028224c61746f22206d65616e73202253756d6d65722220
696e20506f6c697368292e20497420747269657320746f20636172656675
6c6c792062616c616e636520736f6d6520706f74656e7469616c6c792063
6f6e666c696374696e67207072696f7269746965733a2069742073686f75
6c64207365656d20717569746520227472616e73706172656e7422207768
656e207573656420696e20626f647920746578742062757420776f756c64
20646973706c617920736f6d65206f726967696e616c2074726169747320
7768656e207573656420696e206c61726765722073697a65732e20546865
20636c6173736963616c2070726f706f7274696f6e732c20706172746963
756c61726c792076697369626c6520696e20746865207570706572636173
652c206769766520746865206c6574746572666f726d732066616d696c69
6172206861726d6f6e7920616e6420656c6567616e63652e204174207468
652073616d652074696d652c2069747320736c65656b2073616e73657269
66206c6f6f6b206d616b65732065766964656e7420746865206661637420
74686174204c61746f207761732064657369676e656420696e2074686520
32303130732c206576656e2074686f75676820697420646f6573206e6f74
20666f6c6c6f7720616e792063757272656e74207472656e642e20546865
2073656d692d726f756e6465642064657461696c73206f6620746865206c
6574746572732067697665204c61746f2061206665656c696e67206f6620
7761726d74682c207768696c6520746865207374726f6e67207374727563
747572652070726f76696465732073746162696c69747920616e64207365
72696f75736e6573732e20496e20323031332d323031342c207468652066
616d696c79207761732067726561746c7920657874656e64656420287769
7468207468652068656c70206f66204164616d2054776172646f63682061
6e6420426f74696f204e696b6f6c74636865762920746f20636f76657220
333030302b20676c79706873206f766572206e696e652077656967687473
2077697468206974616c6963732e204974206e6f7720737570706f727473
203130302b204c6174696e2d6261736564206c616e6775616765732c2035
302b20437972696c6c69632d6261736564206c616e677561676573206173
2077656c6c20617320477265656b20616e64204950412070686f6e657469
63732e20546865204c61746f20666f6e74732061726520617661696c6162
6c652066726565206f662063686172676520756e64657220746865205349
4c204f70656e20466f6e74204c6963656e73652066726f6d20687474703a
2f2f7777772e6c61746f666f6e74732e636f6d2f687474703a2f2f777777
2e7479706f6c616e642e636f6d2f687474703a2f2f7777772e6c61746f66
6f6e74732e636f6d2f436f707972696768742028632920323031312d3230
3135206279207479506f6c616e64204c756b61737a20447a6965647a6963
2028687474703a2f2f7777772e7479706f6c616e642e636f6d2f29207769
746820526573657276656420466f6e74204e616d6520224c61746f222e20
4c6963656e73656420756e646572207468652053494c204f70656e20466f
6e74204c6963656e73652c2056657273696f6e20312e312028687474703a
2f2f736372697074732e73696c2e6f72672f4f464c292e20687474703a2f
2f736372697074732e73696c2e6f72672f4f464c4c61746f4d656469756d
0043006f0070007900720069006700680074002000280063002900200032
003000310031002d00320030003100350020006200790020007400790050
006f006c0061006e00640020004c0075006b00610073007a00200044007a
006900650064007a00690063002000280068007400740070003a002f002f
007700770077002e007400790070006f006c0061006e0064002e0063006f
006d002f0029002000770069007400680020005200650073006500720076
0065006400200046006f006e00740020004e0061006d006500200022004c
00610074006f0022002e0020004c006900630065006e0073006500640020
0075006e0064006500720020007400680065002000530049004c0020004f
00700065006e00200046006f006e00740020004c006900630065006e0073
0065002c002000560065007200730069006f006e00200031002e00310020
00280068007400740070003a002f002f0073006300720069007000740073
002e00730069006c002e006f00720067002f004f0046004c0029002e0020
004c00610074006f0020004d0065006400690075006d0052006500670075
006c00610072007400790050006f006c0061006e00640020004c0075006b
00610073007a00200044007a006900650064007a00690063003a004c0061
0074006f0020004d0065006400690075006d003a0032003000310034004c
00610074006f0020004d0065006400690075006d00560065007200730069
006f006e00200032002e003000310035003b00200032003000310035002d
00300038002d00300036003b00200068007400740070003a002f002f0077
00770077002e006c00610074006f0066006f006e00740073002e0063006f
006d002f004c00610074006f002d004d0065006400690075006d004c0061
0074006f00200069007300200061002000740072006100640065006d0061
0072006b0020006f00660020007400790050006f006c0061006e00640020
004c0075006b00610073007a00200044007a006900650064007a00690063
002e007400790050006f006c0061006e00640020004c0075006b00610073
007a00200044007a006900650064007a00690063004c0075006b00610073
007a00200044007a006900650064007a0069006300200077006900740068
0020004100640061006d002000540077006100720064006f006300680020
0061006e006400200042006f00740069006f0020004e0069006b006f006c
00740063006800650076004c00610074006f002000690073002000610020
00730061006e007300650072006900660020007400790070006500660061
00630065002000660061006d0069006c0079002000640065007300690067
006e0065006400200069006e0020007400680065002000530075006d006d
006500720020003200300031003000200061006e00640020006500780074
0065006e00640065006400200069006e0020007400680065002000530075
006d006d0065007200200032003000310033002000620079002000570061
0072007300610077002d0062006100730065006400200064006500730069
0067006e006500720020004c0075006b00610073007a00200044007a0069
00650064007a00690063002000280022004c00610074006f00220020006d
00650061006e00730020002200530075006d006d00650072002200200069
006e00200050006f006c0069007300680029002e00200049007400200074
007200690065007300200074006f0020006300610072006500660075006c
006c0079002000620061006c0061006e0063006500200073006f006d0065
00200070006f00740065006e007400690061006c006c007900200063006f
006e0066006c0069006300740069006e00670020007000720069006f0072
00690074006900650073003a002000690074002000730068006f0075006c
00640020007300650065006d002000710075006900740065002000220074
00720061006e00730070006100720065006e007400220020007700680065
006e0020007500730065006400200069006e00200062006f006400790020
0074006500780074002000620075007400200077006f0075006c00640020
0064006900730070006c0061007900200073006f006d00650020006f0072
006900670069006e0061006c002000740072006100690074007300200077
00680065006e0020007500730065006400200069006e0020006c00610072
006700650072002000730069007a00650073002e00200054006800650020
0063006c006100730073006900630061006c002000700072006f0070006f
007200740069006f006e0073002c00200070006100720074006900630075
006c00610072006c0079002000760069007300690062006c006500200069
006e00200074006800650020007500700070006500720063006100730065
002c0020006700690076006500200074006800650020006c006500740074
006500720066006f0072006d0073002000660061006d0069006c00690061
00720020006800610072006d006f006e007900200061006e006400200065
006c006500670061006e00630065002e0020004100740020007400680065
002000730061006d0065002000740069006d0065002c0020006900740073
00200073006c00650065006b002000730061006e00730065007200690066
0020006c006f006f006b0020006d0061006b006500730020006500760069
00640065006e007400200074006800650020006600610063007400200074
0068006100740020004c00610074006f0020007700610073002000640065
007300690067006e0065006400200069006e002000740068006500200032
0030003100300073002c0020006500760065006e002000740068006f0075
0067006800200069007400200064006f006500730020006e006f00740020
0066006f006c006c006f007700200061006e007900200063007500720072
0065006e00740020007400720065006e0064002e00200054006800650020
00730065006d0069002d0072006f0075006e006400650064002000640065
007400610069006c00730020006f006600200074006800650020006c0065
00740074006500720073002000670069007600650020004c00610074006f
002000610020006600650065006c0069006e00670020006f006600200077
00610072006d00740068002c0020007700680069006c0065002000740068
00650020007300740072006f006e00670020007300740072007500630074
007500720065002000700072006f00760069006400650073002000730074
006100620069006c00690074007900200061006e00640020007300650072
0069006f00750073006e006500730073002e00200049006e002000320030
00310033002d0032003000310034002c0020007400680065002000660061
006d0069006c00790020007700610073002000670072006500610074006c
007900200065007800740065006e00640065006400200028007700690074
00680020007400680065002000680065006c00700020006f006600200041
00640061006d002000540077006100720064006f0063006800200061006e
006400200042006f00740069006f0020004e0069006b006f006c00740063
006800650076002900200074006f00200063006f00760065007200200033
003000300030002b00200067006c00790070006800730020006f00760065
00720020006e0069006e0065002000770065006900670068007400730020
00770069007400680020006900740061006c006900630073002e00200049
00740020006e006f007700200073007500700070006f0072007400730020
003100300030002b0020004c006100740069006e002d0062006100730065
00640020006c0061006e006700750061006700650073002c002000350030
002b00200043007900720069006c006c00690063002d0062006100730065
00640020006c0061006e0067007500610067006500730020006100730020
00770065006c006c00200061007300200047007200650065006b00200061
006e00640020004900500041002000700068006f006e0065007400690063
0073002e00200054006800650020004c00610074006f00200066006f006e
00740073002000610072006500200061007600610069006c00610062006c
0065002000660072006500650020006f0066002000630068006100720067
006500200075006e0064006500720020007400680065002000530049004c
0020004f00700065006e00200046006f006e00740020004c006900630065
006e00730065002000660072006f006d00200068007400740070003a002f
002f007700770077002e006c00610074006f0066006f006e00740073002e
0063006f006d002f0068007400740070003a002f002f007700770077002e
007400790070006f006c0061006e0064002e0063006f006d002f00680074
00740070003a002f002f007700770077002e006c00610074006f0066006f
006e00740073002e0063006f006d002f0043006f00700079007200690067
00680074002000280063002900200032003000310031002d003200300031
00350020006200790020007400790050006f006c0061006e00640020004c
0075006b00610073007a00200044007a006900650064007a006900630020
00280068007400740070003a002f002f007700770077002e007400790070
006f006c0061006e0064002e0063006f006d002f00290020007700690074
006800200052006500730065007200760065006400200046006f006e0074
0020004e0061006d006500200022004c00610074006f0022002e0020004c
006900630065006e00730065006400200075006e00640065007200200074
00680065002000530049004c0020004f00700065006e00200046006f006e
00740020004c006900630065006e00730065002c00200056006500720073
0069006f006e00200031002e0031002000280068007400740070003a002f
002f0073006300720069007000740073002e00730069006c002e006f0072
0067002f004f0046004c0029002e00200068007400740070003a002f002f
0073006300720069007000740073002e00730069006c002e006f00720067
002f004f0046004c004c00610074006f004d0065006400690075006d004b
b800c85258b101018e59b001b9080008006370b1000642b66e5a46362205
002ab1000642400c61084d083d062908170705082ab1000642400c6b0657
0645043306200505082ab1000b42be188013800f800a800600000500092a
b1001042be00400040004000400040000500092ab1036444b12401885158
b0408858b1036444b12601885158ba08800001044088635458b103644459
595959400c63084f083f062b081907050c2ab801ff85b0048db1020044b1
05644400000000>
[16369 15841 16349 16249 16253 16313 16205 16261 16137 16193 16373 16333 16029
16381 16281 16213 16125 16373 16377 16373 16341 16381 16357 4063 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 2 <> Lato-Medium AddT42Char 
5 15160 336 <00010056fed501e1061400170006b3110701302b0114121716060f012e03
35343e0237171e0107060201006a66111011574b69411e1e41694b571110
11666a0274d4fe6eb421240b3573e3e5ea7a7beae5e373350b2421b4fe6d
0000>Lato-Medium AddT42Char 
5 15252 337 <00010038fed501c4061400170006b3110701302b0134022726363f011e03
15140e0207272e01373612011a6b66111111574b68421e1e42684b571111
11666b0274d40193b421240b3573e3e5ea7b7aeae5e373350b2421b40192
0000>Lato-Medium AddT42Char 
5 13716 311 <00010066feee016500f9001f001e401b14010047000101005b0201000064
004c01000b09001f011f030a142b33222e0235343e0233321e0215140e02
072726353436373e0337e11b2d211212212e1c203121101a324a2f210f09
070a201f1b061423301c182b20131729361f2d64625c271f0e11070f070b
242f3920>Lato-Medium AddT42Char 
5 14748 330 <0001007a0206026e02ac0003001840150000010100550000000159000100
014d1110020a162b132115217a01f4fe0c02aca60000>Lato-Medium AddT42Char 
5 13912 314 <00010069fff1017000f9001300134010000000015b0001016c014c282402
0a162b37343e0233321e0215140e0223222e02691423301c1b3024151524
301b1c302314751b3024151524301b1c3024141424300000>Lato-Medium AddT42Char 
6 9920 399 <0002003afff1044e05ac00130027001f401c000202015b0001016b4b0003
03005b0000006c004c28282824040a182b0114020e0123222e0102353412
3e0133321e011207342e0223220e0215141e0233323e02044e518dbf6e6e
bf8c50508cbf6e6ebf8d51ca3559743f3f7459343459743f3f74593502ce
bcfeecb55858b50114bcbc0115b55858b5feebbca2da85383885daa2a2da
84383884da00>Lato-Medium AddT42Char 
6 10076 400 <0001009c000003fe059f0011002840250e07020102014a000202634b0403
020101005a00000064004c0000001100111b1111050a172b251521352111
3437070e012e012f0101331103fefcf8013003f40e1c1913063d01ae9f95
959503ad2d30cf0b06040d07550173faf600>Lato-Medium AddT42Char 
6 10184 401 <0001005a0000041e05ac00300032402f1d0100022d010100024a00020203
5b0003036b4b04010000015900010164014c01002321151305040030012f
050a142b2532161d012135343637013e0335342e0223220e02070e012f01
3e0333321e0215140e0207013e013303da2024fc3c101301c6395c402326
425a343457442e0a0e2b29660e527ca15d5e9f74422f516b3cfe942a5526
b9251e7643142d1201c7396a696e3d3c5b3c1e1e364a2b261a0712649867
343768955e50897c753cfe8c0b0e0000>Lato-Medium AddT42Char 
6 10380 402 <00010051fff0041d05ac0042003840350f0103041c010203024a00040003
02040363000505005b0000006b4b000202015b0001016c014c3b3931302f
2e2624181624060a152b133e0333321e0215140e02071e0115140e022322
2e0227373616171e0333323e0235342e0223353e0335342e0223220e0207
0e01277c0f527ca15d5d9c6f3e223f5a38898a4c84af6371a2724b1a5521
3e0e0f2742634b486c48241c4f8c705c7f4e23244159343458442e0a0e2b
2804156498673435618852456a50371226ab8365a16f3b37638b53240e0c
1d1e4b432e2f4b5c2d385e43268e01244058363b583b1d1e364a2b261a07
>Lato-Medium AddT42Char 
15 13196 1141 <00020066fff00436059c001300310033403017010102014a000200010002
0163000404634b05010000035b0003036c034c0100312f25231b190b0900
130113060a142b25323e0235342e0223220e0215141e02030e01073e0133
321e0215140e0223222e0235343637013e013b0102424570502c2b4d6c42
456e4e2a264a6b1711210f307544559a75444883b66f6eb17d44535a0167
0f3623ae932d4e6c3f456d4c282f4f6a3a426e4e2c02f31629141f22386c
a06863ad7f494681b77060d57901e1141b000000>Lato-Medium AddT42Char 
2 2304 13 <000100b10000042b059c0009002940260000000102000161050104040359
000303634b00020264024c00000009000911111111060a182b0111211521
112311211501870240fdc0d6037a04effe1fadfd9f059cad>Lato-Medium AddT42Char 
2 2388 14 <00010059fff0054505ac0031003d403a130102012b01030401010003034a
060105000403050463000202015b0001016b4b000303005b0000006c004c
00000031003125282c2823070a192b01110e012322242602353412362433
321e0217070e01272e0323220e0215141e0233323e0237112322263d0105
456df691aefee7c66b67c00111aa56937e6b2e3d0e2e1b1a3f57744f76be
86484c8bc77b30534c4723d4141902bbfdd04e4d6cc2010ea2a3010fc16b
1a30432a60170c110f2822184d90cb7e84d1914c0b141e12012d18127900
0000>Lato-Medium AddT42Char 
2 2600 15 <000100b100000549059c000b002740240004000100040161060502030363
4b0201000064004c0000000b000b1111111111070a192b01112311211123
11331121110549d5fd13d6d602ed059cfa640287fd79059cfd86027a>Lato-Medium AddT42Char 
2 3036 19 <00010017fff002ae059c001500524bb01c5058b507010001014a1bb50701
0002014a594bb01c50584011000303634b02010101005b0000006c004c1b
40180001030203010270000303634b000202005b0000006c004c59b61522
1424040a182b01140e02232227373e0133321633323e0235113302ae3c73
ab6f646a0c021717113b3040634423d501f478c085471c7e12171126517e
5803ad000000>Lato-Medium AddT42Char 
2 3192 20 <000100b10000053e059c0021002740240d010300014a0000000302000363
05010101634b0401020264024c111129272520060a1a2b0133323637013e
013b01010e010716170123222e0227012e032b0111231133018646262f13
01c9162e22b6fdec14271537290229b9141d151107fe270a141a221757d5
d5032f131702131b15fd9c1a200b133afd5a060b100b02300d120b05fd75
059c>Lato-Medium AddT42Char 
2 3344 21 <000100b1000003e7059c0005001f401c000101634b03010202005a000000
64004c0000000500051111040a162b25152111331103e7fccad5b3b3059c
fb170000>Lato-Medium AddT42Char 
2 3540 24 <000100b100000697059c0020002d402a1a0d020103014a00010300030100
700504020303634b0201000064004c00000020001f21153611060a182b01
11231134363701062b01222701161511231133321617011e01173637013e
01330697ba0302fe2219341e3418fe1906bb9e1c1f0e01e00e180b151c01
d70d1f1c059cfa6403fe17341bfc93313103703831fc02059c0b19fca41a
3a1d3b37035b190b0000>Lato-Medium AddT42Char 
2 4920 30 <000200b100000481059c000a00190032402f050100000304000363000101
025b06010202634b00040464044c0c0b0100181716140b190c190907000a
010a070a142b01323e023534262b011113321e0215140e022b0111231102
64517b532aa3a6dede8acc86414688cb84ded502b92a4d6b418396fdc402
e34075a66565a97a43fdef059c000000>Lato-Medium AddT42Char 
2 5636 34 <0001003dfff003ea05ac003f003e403b3f01010520010403024a00000103
010003700003040103046e000101055b0005056b4b000404025b0002026c
024c3d3b2a2825231c1a2322060a162b010e0123222e0223220e0215141e
0615140e0223222e0227373e0133321e0233323e0235342e0635343e0233
32161703980a1611122e4560433f5f40213b607a807a603b417cb5734582
7465283d0919101537517151426847263a607a807a603a3c73a86c79cb4b
04b2111021292121394d2d3a4c36282b38557b595fa67c471b31452b660c
102c352c23415c383f50362629365783604d906f434d48000000>Lato-Medium AddT42Char 
2 6292 36 <0001001e00000484059c0007001b4018020100000359000303634b000101
64014c11111110040a182b01211123112135210484fe38d4fe36046604ea
fb1604eab2000000>Lato-Medium AddT42Char 
2 7472 45 <0002003dfff0036a040b000f00390071b61e0f020100014a4bb01e505840
2600070605060705700005000001050063000606025b0002026e4b000101
035b0401030364034c1b402a000706050607057000050000010500630006
06025b0002026e4b000303644b000101045b0004046c044c59400b232318
2725272810080a1c2b010e0315141e0233323e0237013e0133321e021511
2322262f010e0323222e0235343e023735342623220e022322262702ab77
a6682e192b3a222d4b423c1dfdc455c77757865c2f571d1e0915274c535e
393c694e2d4193edad625f40573f2f19141d0901c3041d30412826372310
1221301f026f515039668e56fd78131a5924372714214466443c6f583804
4a7372202720160f0000>Lato-Medium AddT42Char 
2 8640 48 <00020089fff2041305c4000c002500984bb0225058400c0d0c000300011f
010300024a1b400c0d0c000300011f010400024a594bb0095058401b0005
05654b000101025b0002026e4b000000035b040103036c034c1b4bb02250
58401b000505654b000101025b0002026e4b000000035b040103036f034c
1b401f000505654b000101025b0002026e4b000404644b000000035b0003
036f034c59594009112628252422060a1a2b251e01333236353426232206
07353e0133321e0215140e0223222e022707062b011133014c3070428893
8277547b353fa066598f64363d71a2653152453a1a09082a7ec3fa3f32c2
c4b5a94c469146564581b8747bca904f13243421552905c4>Lato-Medium AddT42Char 
2 8904 49 <0001004ffff203900408002c006b400a2c0101051a010203024a4bb00950
58402400000103010003700003020103026e000101055b0005056e4b0002
02045b0004046c044c1b402400000103010003700003020103026e000101
055b0005056e4b000202045b0004046f044c594009282623282322060a1a
2b010e0123222e0223220e0215141e0233323e0233321f010e0323222e02
35343e023332161703510911101023354b37486e4926284a6a413f523624
13180d382357626b375fa579463f7bb4746da641033a0b0d191d1934608a
56598b5f311f241f12482b3c26124686c37c71c08b4f46400000>Lato-Medium AddT42Char 
2 11756 55 <00020052fff203dc05c4000e00250066400c24010004140e00030100024a
4bb0225058401c06010505654b000000045b0004046e4b000101025b0301
020264024c1b402006010505654b000000045b0004046e4b000202644b00
0101035b0003036f034c59400e0f0f0f250f252824242622070a192b012e
0123220615141e0233323637131123222f010e0123222e0235343e023332
1617110318306f458693213f5c3a557c36c476290a1141a56c578d64363c
72a2665c813303023f32c1b9618957294c4504a4fa3c27754d5d4483c27e
71c28e513c37022c0000>Lato-Medium AddT42Char 
2 12536 59 <0002004ffff203da04080008002d006e4bb0095058402600060405040605
70070101000406010463000000035b0003036e4b000505025b0002026c02
4c1b40260006040504060570070101000406010463000000035b0003036e
4b000505025b0002026f024c59401400002c2a2725211f19170f0d000800
0824080a152b01342e0223220607010e0323222e0235343e0233321e0215
140623211e0333323e02333217032a21405c3c7b8d1302b5245e6a713769
b38349427bb26f5d9d7241141bfd66032e517045415f452f12180d026d3a
6248288e7efe242a3d26124789cb846ab7884e3d74aa6d2d1f5b875a2c1e
231e1200>Lato-Medium AddT42Char 
2 13240 61 <0001002e000002af05b3001f00384035100f02020101010504024a000202
015b0001016b4b000404005903010000664b0601050564054c0000001f00
1f1115352516070a192b3311272e013d013335343e02333217070e032322
0e021d0121152111cc6a171d9e325d8352453a04010e1721132d4a341c01
1dfee903580d051716515c57885f3114620d0d06011634553f568efca600
0000>Lato-Medium AddT42Char 
3 6072 93 <0003003bfe9403eb0409000f0023005d0097400f2801000153320204004b
010205034a4bb01a5058402c09010000040500046300050002030502630a
010808664b000101075b0007076e4b000303065b00060670064c1b402f0a
01080701070801700901000004050004630005000203050263000101075b
0007076e4b000303065b00060670064c59401d24240100245d245d5c5a44
423a38312f201e16140907000f010f0b0a142b01323e0235342623220615
141e0201342e04270e0115141e0233323e021315140f011e0115140e0223
22270e0115141e0615140e0223222e02353436372e0135343e02372e0135
343e0233321701ee344f351b6b68676b1b354f016a28455c656a31344321
456949486e4b27c62d6d0e103a668d54453c1e1f3b5f7b7f7b5f3b417cb2
7171a76f375c512c34102131204b563a678f55845f01fb1c33482b586969
582b47331dfdd0242b190b0605071a4a3220382917192d3e042c49240910
1f45264b79562e0f122b1523220f040917335947427c603a2c4a62354a67
1d144539162f2f2a112a8b5d4b78562e3700>Lato-Medium AddT42Char 
3 6820 95 <00010089000003e105c40015002b40280001020011010102024a00040465
4b000202005b0000006e4b0301010164014c1113231522050a192b013e01
33321e021511231134262322060711231133014c409b65547f562cc46467
4b8338c3c30377415038658e56fd7902876d79473dfd1705c400>Lato-Medium AddT42Char 
3 7260 98 <0002006d0000017a05b90003001700274024000202035b000303654b0401
0101664b00000064004c000014120a080003000311050a152b0111231113
140e0223222e0235343e0233321e020155c3e81625321b1b302515152530
1b1b32251603f8fc0803f8013a1b3125151525311b1c3125151525310000
>Lato-Medium AddT42Char 
3 8056 102 <0002ffb8fe95017a05b9001100250033403009010001014a000303045b00
0404654b05010202664b000101005b00000070004c000022201816001100
112525060a162b0111140e0223222627373e01333236351113140e022322
2e0235343e0233321e0201552147715021371c08041b264d40e81626311c
1b3025151525301b1c31261603f8fbc83f6d512e0a096a13044651043801
3a1b3125151525311b1c3125151525310000>Lato-Medium AddT42Char 
3 8332 104 <00010089000003fd05c4001d0031402e0d010300014a0000000302000363
06010505654b000101664b0401020264024c0000001d001d112527252107
0a192b011133323637013e013b010106071e01170123222627012e012b01
112311014c2e151c0f01300e221ab2fe991d21131d0e017eaf18230efec6
0f1e1e34c305c4fca10c12014f1313fe7725140d2214fe0d10150198170d
fe1f05c40000>Lato-Medium AddT42Char 
15 13144 1140 <0001008d0000015105c400030019401602010101654b00000064004c0000
0003000311030a152b011123110151c405c4fa3c05c4>Lato-Medium AddT42Char 
3 8752 108 <00010089000005f70408002a005b400b05010400290b020304024a4bb01e
5058401606010404005b0201020000664b08070503030364034c1b401a00
0000664b06010404015b020101016e4b08070503030364034c5940100000
002a002a23152315262421090a1b2b331133321f013e01333216173e0333
321e0215112311342623220e0215112311342623220607118975290a0e38
895c657e1d1646566132517f582ec4635f2a4c3921c45e5b3f6c2d03f827
6143556f5f364e32183362905cfd79028772741d3a5639fd790287767042
39fd0e000000>Lato-Medium AddT42Char 
3 8968 109 <00010089000003e1040800190044b513010102014a4bb01e505840120002
02005b040100006e4b0301010164014c1b4016000404664b000202005b00
00006e4b0301010164014c59b72113231524050a192b013e0333321e0215
11231134262322060711231133321701402148515d35547f562cc464674b
8338c375290a036b233a291738658e56fd7902876d79473dfd1703f82700
0000>Lato-Medium AddT42Char 
3 9408 111 <0002004ffff2042204080013001f004f4bb00950584017000303005b0401
00006e4b05010202015b0001016c014c1b4017000303005b040100006e4b
05010202015b0001016f014c594013151401001b19141f151f0b09001301
13060a142b01321e0215140e0223222e0235343e02133236353426232206
151416023a70b57f44447fb57071b580454580b571908e8e90928f8f0408
4989c17878c288494988c27878c18949fc82c2b0b0c3c3b0b0c2>Lato-Medium AddT42Char 
3 10280 114 <00020089feab0413040b000e00270082400b0e0002000121010300024a4b
b0095058401b000101025b050102026e4b000000035b0003036c4b000404
68044c1b4bb01a5058401b000101025b050102026e4b000000035b000303
6f4b00040468044c1b401f000505664b000101025b0002026e4b00000003
5b0003036f4b00040468044c59594009211328272622060a1a2b251e0133
323635342e0223220607273e0333321e0215140e02232226271123113332
17014c306f458693213f5c3a557d350a2049545f36578d64373d71a3665b
8233c375290afa3f32c1b9618957294c4685263f2d194484c27e71c18e51
3c36fe47054d2700>Lato-Medium AddT42Char 
3 11020 117 <00010089000002cf040b001800954bb01a5058400a060101001101030102
4a1b4bb02c5058400a0601010411010301024a1b400a0601020411010301
024a59594bb01a5058401202010101005b040100006e4b00030364034c1b
4bb02c50584016000404664b02010101005b0000006e4b00030364034c1b
401d0001020302010370000404664b000202005b0000006e4b0003036403
4c5959b72115221422050a192b013e0133321617070623222623220e0207
112311333216170141318a61213b160d071a0e38202f48392c13c3702017
05033564720f0f931b0b1b354d31fd8403f8171d0000>Lato-Medium AddT42Char 
3 11252 118 <0001003efff0031b0408003d003e403b3d0101051e010204024a00000103
010003700003040103046e000101055b0005056e4b000404025b0002026c
024c3b39282623211c1a2322060a162b010e0123222e0223220e0215141e
0615140e0223222627373e0133321e0233323e0235342e0635343e023332
161702e008120e1027374a332a45301a2d495d615d492d3363925e69b23c
2e081814132838503c324a31182d495e625e492d315d895865a33a03490d
0b161a161525331d2632241d20293d563e4779583246364b0e0f1c211b19
2b381f2835261c202a405c423b6c52314038>Lato-Medium AddT42Char 
3 13772 124 <00010029fff002c2053d0022003c40390901010320010005024a00020302
72040101010359000303664b000505005c060100006c004c010018161312
11100f0d050400220122070a142b05222635112322263d0137133e013b01
1121152111141633323e023332161f010e0101c77b85761117a52c041712
630120fee03b2e1b271c14080a0b063a3084108a80026015154f17012f11
13feab8efdad3c3b0e110e090a5e2c300000>Lato-Medium AddT42Char 
4 876 134 <0001007efff003d603f80019004db61805020302014a4bb01e5058401305
04020202664b000303005b0101000064004c1b40170504020202664b0000
00644b000303015b0001016c014c59400d00000019001923152621060a18
2b011123222f010e0323222e02351133111416333236371103d675280c0e
2148525c35547f562cc464674b823903f8fc082766233a291738658e5602
87fd796d79473e02e800>Lato-Medium AddT42Char 
4 1280 136 <00010013000003fb03f800120021401e0b010001014a0302020101664b00
000064004c0000001200112111040a162b0901230133321617131e01173e
0137133e013303fbfe64b0fe64a1171e05f30d130808140ef6061e1503f8
fc0803f81611fd90274d26264c2802701116>Lato-Medium AddT42Char 
4 1388 137 <0001001d0000060e03fb002d00274024261708030002014a050403030202
664b0101000064004c0000002d002c3c212921060a182b0901232227032e
0127060703062b010133321617131e01173e0137133e013b01321617131e
01173e0137133e0133060efeb99c1c0ad6080c050910d90a2194feb89a17
1f05b7090e0609150bcb051c1455161d05c60b140806100aba051f1403f8
fc082502961931193431fd6c2503f81611fd902648242448260274111515
11fd8c26492524492702701116000000>Lato-Medium AddT42Char 
4 1584 138 <00010013000003dd03f8001c0020401d1c140e05040002014a0301020266
4b0101000064004c28222920040a182b2123222627030e0107030e012b01
090133321617133e013713363b010103ddbc171b08f5050a08e10a1a15ae
0162feacbc171508f1050c0acf121eb3feac190e01830f1c0cfeb40e1902
0b01ed0e0efe8d0f1d10013320fe1c00>Lato-Medium AddT42Char 
4 1720 139 <00010011feab040103f800160022401f0f06020001014a0302020101664b
00000068004c0000001600152223040a162b09010e012b01130133321617
011e01173e0137133e01330401fdcc091e1d91bafe5faa191c060102080f
05071009f9071e1303f8fae11618019503b8180ffd9e172f17182f170261
11160000>Lato-Medium AddT42Char 
4 1844 140 <000100380000034d03f8000f0025402208010100014a0002020359000303
664b000000015900010164014c11151114040a182b011406070121152135
34363701213521034d0f0cfdeb021efcfd0e0d0218fdec02f603a615280e
fd3e99520e271102c799>Lato-Medium AddT42Char 
2 14852 64 <0001002e0000052a05bf003800e24bb009505840102401010425100f0305
0101010807034a1b4bb0135058401025100f03020101010807024a240101
481b40102401010425100f03050101010807034a59594bb0095058402900
0505045b000404654b000202015b000101634b0901070700590603020000
664b0b0a02080864084c1b4bb0135058402105010202015b04010101634b
0901070700590603020000664b0b0a02080864084c1b4029000505045b00
0404654b000202015b000101634b0901070700590603020000664b0b0a02
080864084c5959401400000038003837361111153525153525160c0a1d2b
3311272e013d013335343e02333217070e0323220e021d012135343e0233
3217070e0323220e021d012115211123112111cc6a171d9e325d8352453a
04010e1721132d4a341c01bc325d8452433c05010d1820142d4a341c011d
fee9c4fe4a03580d051716514c57885f3114630c0d06011634553f466857
885f3114620d0d06011634553f628efca6035afca6000000>Lato-Medium AddT42Char 
3 14972 129 <00010029fff0044c053d00240060400a1c01010610010002024a4bb01e50
58401c0005060572040101010659000606664b000202005c030100006400
4c1b40200005060572040101010659000606664b000000644b000202035c
0003036c034c59400a1128132a231110070a1b2b2123112111141633323e
023332161f010e0123222635112322263d0137133e013b011121044cc4fe
023b2e1b271c14080a0b063a3084477b85761117a62b0417126302c2035a
fdad3c3b0e110e090a5e2c308a80026015154f17012f1113feab0000>Lato-Medium AddT42Char 
18 5276 1474 <0001010a04b2021705c0001300134010000000015b00010165004c282402
0a162b01140e0223222e0235343e0233321e0202171625321b1b30251515
25301b1b32251605381b3125151525311b1c322515152532>Lato-Medium AddT42Char 
22 7344 2462 <ffff0029fff0047805c0022600810000000705c202610000>Lato-Medium AddT42Char 
5 14028 316 <0001005d03b00153060100110006b3050001302b132e013e013717160607
0e021617160607a72c1e184f423d10040918250c14200e0c1403b049a19e
9039250b1f0a1e596870361724080000>Lato-Medium AddT42Char 
5 14028 316 <0001005d03b00153060100110006b3050001302b132e013e013717160607
0e021617160607a72c1e184f423d10040918250c14200e0c1403b049a19e
9039250b1f0a1e596870361724080000>Lato-Medium AddT42Char 
5 14136 318 <ffff005d03b0028a06010026013c00000007013c01370000>Lato-Medium AddT42Char 
5 14208 320 <00010054febf014b011000110006b3050001302b011e010e010727263637
3e02262726363701002c1f1850423c11040919250c14200e0c14011049a1
9d9139260b1f091e5969703617240800>Lato-Medium AddT42Char 
5 14208 320 <00010054febf014b011000110006b3050001302b011e010e010727263637
3e02262726363701002c1f1850423c11040919250c14200e0c14011049a1
9d9139260b1f091e5969703617240800>Lato-Medium AddT42Char 
5 14160 319 <ffff006203ab029005fc00270140000e04ec01070140014504ec0012b100
01b804ecb0332bb10101b804ecb0332b0000>Lato-Medium AddT42Char 
5 14308 322 <00010062008001be03a700110006b3070401302b2516060f01033513171e
010f0106071e011701b00e081a3ffbfb3f1a080e99100d070e08f01a2b0c
1f01871a01861e0d2a1aff190c07120d>Lato-Medium AddT42Char 
5 14308 322 <00010062008001be03a700110006b3070401302b2516060f01033513171e
010f0106071e011701b00e081a3ffbfb3f1a080e99100d070e08f01a2b0c
1f01871a01861e0d2a1aff190c07120d>Lato-Medium AddT42Char 
5 14460 324 <ffff0062008002ee03a70026014200000007014201300000>Lato-Medium AddT42Char 
5 14384 323 <0001007a008001d603a700110006b3110201302b011503272e013f013637
2e012f0126363f0101d6fb3f1a080e990f0e080d08990e081a3f02211afe
791f0c2b1afe190d06130cff1a2a0d1e>Lato-Medium AddT42Char 
5 14384 323 <0001007a008001d603a700110006b3110201302b011503272e013f013637
2e012f0126363f0101d6fb3f1a080e990f0e080d08990e081a3f02211afe
791f0c2b1afe190d06130cff1a2a0d1e>Lato-Medium AddT42Char 
5 14484 325 <ffff007a0080030603a70026014300000007014301300000>Lato-Medium AddT42Char 
2 0 0 <0004002c00000403059c00250039003d0041004540420003020102030170
0001040201046e0000000203000263000400050804056300090906590006
06634b000808075900070764074c41401111142826232a1c240a0a1d2b13
3e0333321e0215140e040f012327263e0435342623220e0223222713343e
0233321e0215140e0223222e020121112137211121f71a3b46502f406a4a
291d2d3530230412850e051a2c362f2043362737271c0c1b0d5e121f2a19
182a1f12121f2a18192a1f12fea303d7fc29360365fc9b047716261d1124
415d39374f3b2b262417677523332b272d38272f3711141118fd07182b20
1212202b18192b1f12121f2b048bfa643a052800>Lato-Medium AddT42Char 
Lato-Medium /CharStrings get begin
/space 2 def
/parenleft 336 def
/parenright 337 def
/comma 311 def
/hyphen 330 def
/period 314 def
/zero 399 def
/one 400 def
/two 401 def
/three 402 def
/six 1141 def
/F 13 def
/G 14 def
/H 15 def
/J 19 def
/K 20 def
/L 21 def
/M 24 def
/P 30 def
/S 34 def
/T 36 def
/a 45 def
/b 48 def
/c 49 def
/d 55 def
/e 59 def
/f 61 def
/g 93 def
/h 95 def
/i 98 def
/j 102 def
/k 104 def
/l 1140 def
/m 108 def
/n 109 def
/o 111 def
/p 114 def
/r 117 def
/s 118 def
/t 124 def
/u 134 def
/v 136 def
/w 137 def
/x 138 def
/y 139 def
/z 140 def
/ff 64 def
/g2462 2462 def
/quotedblleft 318 def
/quotedblright 319 def
/guillemotleft 324 def
/guillemotright 325 def
end
Lato-Medium /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 54 /six put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 127 /ff put
dup 129 /g2462 put
dup 147 /quotedblleft put
dup 148 /quotedblright put
dup 171 /guillemotleft put
dup 187 /guillemotright put
pop
end
%ADOEndSubsetFont
/BPKFLK+Lato-Medium /Lato-Medium findfont ct_VMDictPut
/BPKFLK+Lato-Medium*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two /three 2{/.notdef}rp /six 
15{/.notdef}rp /F /G /H /.notdef /J /K /L 
/M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/j /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
/z 4{/.notdef}rp /ff /.notdef /g2462 17{/.notdef}rp /quotedblleft /quotedblright 
22{/.notdef}rp /guillemotleft 15{/.notdef}rp /guillemotright 68{/.notdef}rp]
BPKFLK+Lato-Medium nf
BPKFLK+Lato-Medium*1 [13.517 0 0 -15.6778 0 0 ]msf
68.041 157.293 mo
(\253\223My friends, Jesus is the Lord of risk, he is the Lord of the )
[5.62939 4.75781 12.3477 6.75146 3.62109 4.50781 4.69678 3.03467 6.90039 7.30566 7.33984 5.61621 
2.83838 3.62061 5.48096 6.90039 5.61621 7.29883 5.61621 3.62109 3.03467 5.61621 3.62061 4.63623 
7.30566 6.90039 3.62109 6.70459 7.43408 4.69678 7.33984 3.62061 7.43408 4.50781 3.62109 4.69678 
3.03467 5.61621 6.69775 2.83838 3.62061 7.30566 6.90039 3.62109 3.03467 5.61621 3.62061 4.63623 
7.30566 6.90039 3.62061 6.70508 7.43408 4.69678 7.33984 3.62061 7.43408 4.50781 3.62061 4.63623 
7.30566 6.90088 0 ]xsh
42.5088 172.971 mo
(eternal \223more\224. Jesus is not the Lord of comfort, security and )
[6.90039 4.63623 6.90039 4.69678 7.30566 6.49463 2.97363 4.92383 4.75781 10.915 7.43457 4.69678 
6.90039 4.75098 2.93311 4.92383 5.48096 6.90039 5.61621 7.29883 5.61621 4.92383 3.03467 5.61621 
4.92432 7.30566 7.43408 4.63623 4.92383 4.63623 7.30566 6.90039 4.92383 6.70459 7.43408 4.69678 
7.33984 4.92383 7.43408 4.5083 4.92383 6.21094 7.43408 10.915 4.50781 7.43408 4.69678 4.63623 
2.83838 4.92383 5.61621 6.90039 6.21094 7.29883 4.69678 3.03467 4.63623 6.75146 4.92432 6.49463 
7.30566 7.33984 0 ]xsh
42.5088 188.648 mo
(ease. Following Jesus demands a good dose of courage, a readi)
[6.90039 6.49463 5.61621 6.90039 2.93311 3.18311 7.38672 7.43408 2.97363 2.97363 7.43408 10.4146 
3.03467 7.30566 6.79883 3.18262 5.48096 6.90039 5.61621 7.29883 5.61621 3.18311 7.33984 6.90039 
10.915 6.49463 7.30566 7.33984 5.61621 3.18262 6.49463 3.18311 6.79883 7.43408 7.43408 7.33984 
3.18262 7.33984 7.43408 5.61621 6.90039 3.18311 7.43408 4.50781 3.18262 6.21094 7.43408 7.29883 
4.69678 6.49463 6.79883 6.90039 2.83838 3.18311 6.49463 3.18262 4.69678 6.90039 6.49463 7.33984 
0 ]xsh
400.13 188.648 mo
(-)sh
42.5088 204.326 mo
(ness to trade in the sofa for a pair of walking shoes and to set out )
[7.30566 6.90039 5.61621 5.61621 2.57373 4.63623 7.43408 2.57373 4.63672 4.69678 6.49463 7.33984 
6.90039 2.57373 3.03467 7.30566 2.57373 4.63623 7.30566 6.90039 2.57373 5.61621 7.43408 4.50781 
6.49463 2.57422 4.50781 7.43408 4.69678 2.57373 6.49463 2.57373 7.34668 6.49463 3.03467 4.69678 
2.57373 7.43408 4.50781 2.57373 10.415 6.49463 2.97363 6.69775 3.03467 7.30566 6.79883 2.57373 
5.61621 7.30566 7.43408 6.90039 5.61621 2.57373 6.49463 7.30566 7.33984 2.57373 4.63623 7.43408 
2.57422 5.61621 6.90039 4.63623 2.57373 7.43408 7.29883 4.63672 0 ]xsh
42.5088 220.004 mo
(on new and uncharted paths. To blaze trails that open up new )
[7.43408 7.30566 4.16455 7.30566 6.90039 10.4146 4.16504 6.49463 7.30566 7.33984 4.16455 7.29883 
7.30566 6.21094 7.30566 6.49463 4.69678 4.63623 6.90039 7.33984 4.16504 7.34668 6.49463 4.63623 
7.30566 5.61621 2.93311 4.16455 7.7583 7.43408 4.16455 7.33984 2.97363 6.49463 5.87988 6.90039 
4.16504 4.63623 4.69678 6.49463 3.03467 2.97363 5.61621 4.16455 4.63623 7.30566 6.49463 4.63623 
4.16504 7.43408 7.34668 6.90039 7.30566 4.16455 7.29883 7.34668 4.16455 7.30566 6.90039 10.4146 
0 ]xsh
42.5088 235.682 mo
(horizons capable of spreading joy.\224)
[7.30566 7.43408 4.69678 3.03467 5.87988 7.43408 7.30566 5.61621 3.15625 6.21094 6.49463 7.34668 
6.49463 7.33984 2.97363 6.90039 3.15625 7.43408 4.5083 3.15625 5.61621 7.34668 4.69678 6.90039 
6.49463 7.33984 3.03467 7.30566 6.79883 3.15625 3.03467 7.43408 6.75146 2.93311 0 ]xsh
68.041 256.063 mo
(\223God expects something from you, God wants something )
[4.75781 9.60352 7.43408 7.33984 4.70654 6.90039 6.55566 7.34668 6.90039 6.21094 4.63623 5.61621 
4.70605 5.61621 7.43408 10.915 6.90039 4.63623 7.30566 3.03467 7.30615 6.79883 4.70605 4.50781 
4.69678 7.43408 10.915 4.70654 6.75146 7.43408 7.29883 2.83838 4.70605 9.60352 7.43408 7.33984 
4.70654 10.4146 6.49463 7.30566 4.63623 5.61621 4.70605 5.61621 7.43408 10.915 6.90088 4.63623 
7.30566 3.03467 7.30566 6.79883 0 ]xsh
42.5088 271.741 mo
(from you. God hopes in you. God comes to break down all our )
[4.50781 4.69678 7.43408 10.915 3.88867 6.75146 7.43408 7.29883 2.93311 3.88867 9.60352 7.43408 
7.33984 3.88867 7.30566 7.43408 7.34668 6.90039 5.6167 3.88867 3.03467 7.30566 3.88867 6.75146 
7.43408 7.29883 2.93311 3.88867 9.60352 7.43408 7.33984 3.88867 6.21094 7.43408 10.915 6.90039 
5.61621 3.88867 4.63623 7.43408 3.88867 7.33984 4.69678 6.90039 6.49463 6.69775 3.88867 7.33984 
7.43408 10.4146 7.30566 3.88867 6.49463 2.97363 2.97363 3.88867 7.43457 7.29883 4.69678 0 
]xsh
42.5088 287.418 mo
(fences. He comes to open the doors of our lives, our dreams, our )
[4.50781 6.90039 7.30566 6.21094 6.90039 5.61621 2.93311 2.69824 10.0903 6.90039 2.69775 6.21094 
7.43408 10.9155 6.90039 5.61621 2.69775 4.63623 7.43408 2.69824 7.43408 7.34668 6.90039 7.30566 
2.69824 4.63623 7.30566 6.90039 2.69775 7.33984 7.43408 7.43408 4.69678 5.61621 2.69824 7.43408 
4.50781 2.69824 7.43408 7.29883 4.69678 2.69775 2.97363 3.03467 6.7583 6.90039 5.61621 2.83838 
2.69824 7.43408 7.29883 4.69678 2.69824 7.33984 4.69678 6.90039 6.49463 10.915 5.61621 2.83838 
2.69824 7.43408 7.29883 4.69727 0 ]xsh
42.5088 303.096 mo
(ways of seeing things. God comes to break open everything that )
[10.4146 6.49463 6.75146 5.61621 2.81836 7.43408 4.50781 2.81885 5.61621 6.90039 6.90039 3.03467 
7.30566 6.79883 2.81836 4.63623 7.30566 3.03467 7.30566 6.79883 5.61621 2.93311 2.81885 9.60352 
7.43408 7.33984 2.81836 6.21094 7.43408 10.915 6.90039 5.61621 2.81885 4.63623 7.43408 2.81836 
7.33984 4.69678 6.90039 6.49463 6.69775 2.81836 7.43457 7.34668 6.90039 7.30566 2.81836 6.90039 
6.7583 6.90039 4.69678 6.75146 4.63623 7.30566 3.03467 7.30566 6.79883 2.81885 4.63623 7.30566 
6.49512 4.63672 0 ]xsh
42.5088 318.774 mo
(keeps you closed in. He is encouraging you to dream. He wants )
[6.69775 6.90039 6.90039 7.34668 5.61621 3.40771 6.75146 7.43408 7.29883 3.40771 6.21143 2.97363 
7.43408 5.61621 6.90039 7.33984 3.40771 3.03467 7.30566 2.93311 3.40771 10.0903 6.90039 3.40771 
3.03467 5.61621 3.40771 6.90039 7.30566 6.21094 7.43408 7.29932 4.69678 6.49463 6.79883 3.03467 
7.30566 6.79883 3.40771 6.75146 7.43408 7.29883 3.40771 4.63623 7.43408 3.40771 7.33984 4.69678 
6.90039 6.49463 10.915 2.93311 3.4082 10.0903 6.90039 3.40771 10.4146 6.49463 7.30566 4.63623 
5.61572 0 ]xsh
42.5088 334.452 mo
(to make you see that, with you, the world can be di\177erent. For )
[4.63623 7.43408 3.73145 10.915 6.49463 6.69775 6.90039 3.73145 6.75146 7.43408 7.29883 3.73145 
5.61621 6.90039 6.90039 3.73145 4.63623 7.30566 6.49512 4.63623 2.83838 3.73145 10.4146 3.03467 
4.63623 7.30566 3.73145 6.75146 7.43408 7.29883 2.83838 3.73145 4.63623 7.30566 6.90039 3.73145 
10.4146 7.43408 4.69678 2.97363 7.33984 3.73145 6.21094 6.49463 7.30566 3.73145 7.33984 6.90039 
3.73145 7.33984 3.03467 8.79248 6.90039 4.69678 6.90088 7.30566 4.63623 2.93311 3.73145 7.38672 
7.43408 4.69678 0 ]xsh
42.5088 350.13 mo
(the fact is, unless you o\177er the best of yourselves, the world will )
[4.63623 7.30566 6.90039 2.91943 4.50781 6.49463 6.21094 4.63623 2.91895 3.03467 5.6167 2.83838 
2.91895 7.29883 7.30566 2.97363 6.90039 5.61621 5.61621 2.91943 6.75146 7.43408 7.29883 2.91943 
7.43408 8.79248 6.90039 4.69678 2.91895 4.63623 7.30615 6.90039 2.91895 7.33984 6.90039 5.61621 
4.63623 2.91943 7.43408 4.50781 2.91943 6.75146 7.43408 7.29883 4.69678 5.61621 6.90039 2.97363 
6.7583 6.90039 5.61621 2.83838 2.91943 4.63623 7.30566 6.90039 2.91895 10.4146 7.43408 4.69678 
2.97363 7.33984 2.91943 10.4146 3.03467 2.97363 2.97363 0 ]xsh
42.5088 365.808 mo
(never be di\177erent. This is the challenge.\224)
[7.30566 6.90039 6.7583 6.90039 4.69678 3.15625 7.33984 6.90039 3.15625 7.33984 3.03467 8.79248 
6.90039 4.69678 6.90039 7.30566 4.63623 2.93311 3.15674 7.7583 7.30566 3.03467 5.61621 3.15625 
3.03467 5.61621 3.15625 4.63623 7.30566 6.90039 3.15625 6.21094 7.30566 6.49463 2.97363 2.97363 
6.90039 7.30566 6.79883 6.90039 2.93311 0 ]xsh
68.041 386.188 mo
(\223So today, my friends, Jesus is invi\201ng you, calling you, to )
[4.75781 7.09619 7.43408 4.36963 4.63623 7.43457 7.33984 6.49463 6.75146 2.83838 4.36963 10.915 
6.75146 4.36963 4.5083 4.69678 3.03467 6.90039 7.30566 7.33984 5.61621 2.83838 4.36963 5.48096 
6.90039 5.61621 7.29883 5.61621 4.37012 3.03467 5.61621 4.36963 3.03467 7.30566 6.7583 3.03467 
8.16406 7.30566 6.79883 4.37012 6.75146 7.43408 7.29883 2.83838 4.36963 6.21094 6.49463 2.97363 
2.97363 3.03467 7.30566 6.79883 4.37012 6.75146 7.43408 7.29883 2.83838 4.36963 4.63623 7.43408 
0 ]xsh
42.5088 401.867 mo
(leave your mark on life, to leave a mark on history, your own and )
[2.97363 6.90039 6.49463 6.7583 6.90039 2.72754 6.75146 7.43408 7.29883 4.69678 2.72754 10.915 
6.49463 4.69678 6.69775 2.72754 7.43408 7.30566 2.72754 2.97363 3.03467 4.50781 6.90039 2.83838 
2.72754 4.63672 7.43408 2.72754 2.97363 6.90039 6.49463 6.7583 6.90039 2.72754 6.49463 2.72754 
10.915 6.49463 4.69678 6.69775 2.72754 7.43408 7.30566 2.72754 7.30566 3.03467 5.61621 4.63623 
7.43408 4.69678 6.75146 2.83838 2.72754 6.75146 7.43408 7.29883 4.69678 2.72754 7.43408 10.4146 
7.30566 2.72754 6.49463 7.30566 7.33984 0 ]xsh
42.5088 417.544 mo
(that of many others as well.\224\273 )
[4.63623 7.30566 6.49463 4.63623 3.15625 7.43408 4.50781 3.15625 10.915 6.49463 7.30566 6.75146 
3.15625 7.43408 4.63623 7.30566 6.90039 4.69678 5.6167 3.15625 6.49463 5.61621 3.15625 10.4146 
6.90039 2.97363 2.97363 2.93311 4.75098 5.63623 0 ]xsh
68.041 445.764 mo
(               \(Pope Francis, in Krakow, 30 July 2016\) )
[61.145 3.15625 3.15625 3.15625 3.15625 3.15625 3.15625 3.15625 3.15625 3.15625 3.15625 3.15625 
3.15625 3.15625 3.15674 3.37939 7.9209 7.43408 7.34668 6.90039 3.15625 7.38672 4.69678 6.49463 
7.30566 6.21094 3.03467 5.61621 2.83838 3.15625 3.03467 7.30566 3.15625 8.7793 4.69678 6.49463 
6.69775 7.43408 10.4146 2.83838 3.15625 7.58301 7.58301 3.15625 5.48096 7.29883 2.97363 6.75195 
3.15625 7.58301 7.58301 7.58301 7.58301 3.37939 0 ]xsh
.0342718 .634272 1 .00231937 cmyk
%ADOBeginSubsetFont: Lato-Regular Initial
ct_T42Dict begin
-0.543 -0.266 1.34 1.078
 256 array 0 1 255 {1 index exch /.notdef put} for  /Lato-Regular
Type42DictBegin
[<00010000000c000c000c000c4f532f326a11e78f000000cc000000606376
74203a28b3900000012c000000e66670676de414dbf00000021400000b97
676c796642649d8e0000849c000612ae6865616409382e9200000dac0000
0036686865610df10cba00000de400000024686d747890c51a2500000e08
00002f3c6c6f63612b081fde00003d4400002f406d6178700d960d6a0000
6c84000000206e616d65d9b80bc300006ca40000173a707265706f0a693a
000083e0000000b967646972000000000000000000000000000304540190
00050000057805140000011805780514000003ba005902260000020f0502
020204030203e10002ff5000ecff00000021000000007479504c00400000
feff064afe7a019007b601aa2000019f0000000003f5059900000020000b
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000b700b7008b008b0599000003f50000fea9
07b6fe5605a9fff10405fff2fea907b6fe5600b700b7008b008b05990000
059903f0fff3feaa07b6fe5605a9fff105a70405fff3fea907b6fe560082
00820062006206800599039302ea07b6fe56068005a1038b02dd07b6fe56
0082008200620062066c039306800599039302ea07b6fe560674038b0680
05a1038b02dd07b6fe5600b700b7008b008b0599000005ba03f50000fea9
07b6fe5605a9fff005ba0405fff2fe9407b6fe560000b0002c20b0005558
455920204bb8000e514bb006535a58b0341bb028596066208a5558b00225
61b908000800636323621b2121b00059b000432344b20001004360422db0
012cb02060662db0022c206420b0c050b004265ab228010a43456345525b
582123211b8a5820b050505821b040591b20b038505821b038595920b101
0a434563456164b028505821b1010a4345634520b030505821b030591b20
b0c050582066208a8a6120b00a5058601b20b020505821b00a601b20b036
505821b036601b605959591bb0012b595923b00050586559592db0032c20
4520b00425616420b005435058b0052342b00623421b212159b001602db0
042c232123212064b105624220b0062342b1010a434563b1010a43b00560
4563b0032a2120b00643208a208ab0012bb1300525b00426515860501b61
52595823592120b0405358b0012b1b21b0405923b000505865592db0052c
b007432bb20002004360422db0062cb00723422320b000234261b0026266
b00163b00160b0052a2db0072c20204520b00b4363b804006220b0005058
b040605966b001636044b001602db0082cb2070b004345422a21b2000100
4360422db0092cb000432344b20001004360422db00a2c20204520b0012b
23b00043b004256020458a2361206420b020505821b0001bb0305058b020
1bb040595923b00050586559b0032523614444b001602db00b2c20204520
b0012b23b00043b004256020458a23612064b0245058b0001bb0405923b0
0050586559b0032523614444b001602db00c2c20b0002342b20b0a034558
211b2321592a212db00d2cb1020245b06461442db00e2cb001602020b00c
434ab000505820b00c234259b00d434ab000525820b00d2342592db00f2c
20b0106266b0016320b80400638a2361b00e4360208a6020b00e2342232d
b0102c4b5458b10464445924b00d6523782db0112c4b51584b5358b10464
44591b215924b0136523782db0122cb1000f435558b10f0f43b0016142b0
0f2b59b00043b0022542b10c022542b10d022542b001162320b003255058
b101004360b00425428a8a208a2361b00e2a2123b00161208a2361b00e2a
211bb101004360b0022542b0022561b00e2a2159b00c4347b00d434760b0
026220b0005058b040605966b0016320b00b4363b804006220b0005058b0
40605966b0016360b10000132344b00143b0003eb20101014360422db013
2c00b10002455458b00f23422045b00b2342b00a23b00560422060b00161
b5101001000e0042428a60b112062bb0752b1b22592db0142cb100132b2d
b0152cb101132b2db0162cb102132b2db0172cb103132b2db0182cb10413
2b2db0192cb105132b2db01a2cb106132b2db01b2cb107132b2db01c2cb1
08132b2db01d2cb109132b2db0292c202eb0015d2db02a2c202eb001712d
b02b2c202eb001722db01e2c00b00d2bb10002455458b00f23422045b00b
2342b00a23b00560422060b00161b5101001000e0042428a60b112062bb0
752b1b22592db01f2cb1001e2b2db0202cb1011e2b2db0212cb1021e2b2d
b0222cb1031e2b2db0232cb1041e2b2db0242cb1051e2b2db0252cb1061e
2b2db0262cb1071e2b2db0272cb1081e2b2db0282cb1091e2b2db02c2c20
3cb001602db02d2c2060b01060204323b0016043b0022561b00160b02c2a
212db02e2cb02d2bb02d2a2db02f2c2020472020b00b4363b804006220b0
005058b040605966b001636023613823208a555820472020b00b4363b804
006220b0005058b040605966b00163602361381b21592db0302c00b10002
455458b00116b02f2ab1050115455830591b22592db0312c00b00d2bb100
02455458b00116b02f2ab1050115455830591b22592db0322c2035b00160
2db0332c00b0014563b804006220b0005058b040605966b00163b0012bb0
0b4363b804006220b0005058b040605966b00163b0012bb00016b4000000
0000443e2338b13201152a2db0342c203c204720b00b4363b804006220b0
005058b040605966b0016360b0004361382db0352c2e173c2db0362c203c
204720b00b4363b804006220b0005058b040605966b0016360b0004361b0
014363382db0372cb102001625202e2047b0002342b00225498a8a472347
23612058621b2159b0012342b236010115142a2db0382cb00016b00425b0
04254723472361b009432b658a2e2320203c8a382db0392cb00016b00425
b00425202e472347236120b0042342b009432b20b060505820b0405158b3
022003201bb30226031a5942422320b00843208a234723472361234660b0
0443b0026220b0005058b040605966b001636020b0012b208a8a6120b002
43606423b0034361645058b00243611bb003436059b00325b0026220b000
5058b040605966b0016361232020b00426234661381b23b0084346b00225
b0084347234723616020b00443b0026220b0005058b040605966b0016360
2320b0012b23b0044360b0012bb0052561b00525b0026220b0005058b040
605966b00163b004266120b00425606423b0032560645058211b23215923
2020b0042623466138592db03a2cb00016202020b00526202e4723472361
233c382db03b2cb0001620b0082342202020462347b0012b2361382db03c
2cb00016b00325b002254723472361b00054582e203c23211bb00225b002
25472347236120b00525b004254723472361b00625b0052549b0022561b9
080008006363232058621b215963b804006220b0005058b040605966b001
6360232e2320203c8a382321592db03d2cb0001620b00843202e47234723
612060b0206066b0026220b0005058b040605966b001632320203c8a382d
b03e2c23202e46b00225465258203c592eb12e01142b2db03f2c23202e46
b00225465058203c592eb12e01142b2db0402c23202e46b0022546525820
3c5923202e46b00225465058203c592eb12e01142b2db0412cb0382b2320
2e46b00225465258203c592eb12e01142b2db0422cb0392b8a20203cb004
23428a3823202e46b00225465258203c592eb12e01142bb004432eb02e2b
2db0432cb00016b00425b00426202e4723472361b009432b23203c202e23
38b12e01142b2db0442cb108042542b00016b00425b00425202e47234723
6120b0042342b009432b20b060505820b0405158b3022003201bb3022603
1a594242232047b00443b0026220b0005058b040605966b001636020b001
2b208a8a6120b00243606423b0034361645058b00243611bb003436059b0
0325b0026220b0005058b040605966b0016361b0022546613823203c2338
1b212020462347b0012b2361382159b12e01142b2db0452cb0382b2eb12e
01142b2db0462cb0392b212320203cb00423422338b12e01142bb004432e
b02e2b2db0472cb000152047b0002342b20001011514132eb0342a2db048
2cb000152047b0002342b20001011514132eb0342a2db0492cb100011413
b0352a2db04a2cb0372a2db04b2cb000164523202e20468a236138b12e01
142b2db04c2cb0082342b04b2b2db04d2cb20000442b2db04e2cb2000144
2b2db04f2cb20100442b2db0502cb20101442b2db0512cb20000452b2db0
522cb20001452b2db0532cb20100452b2db0542cb20101452b2db0552cb2
0000412b2db0562cb20001412b2db0572cb20100412b2db0582cb2010141
2b2db0592cb20000432b2db05a2cb20001432b2db05b2cb20100432b2db0
5c2cb20101432b2db05d2cb20000462b2db05e2cb20001462b2db05f2cb2
0100462b2db0602cb20101462b2db0612cb20000422b2db0622cb2000142
2b2db0632cb20100422b2db0642cb20101422b2db0652cb03a2b2eb12e01
142b2db0662cb03a2bb03e2b2db0672cb03a2bb03f2b2db0682cb00016b0
3a2bb0402b2db0692cb03b2b2eb12e01142b2db06a2cb03b2bb03e2b2db0
6b2cb03b2bb03f2b2db06c2cb03b2bb0402b2db06d2cb03c2b2eb12e0114
2b2db06e2cb03c2bb03e2b2db06f2cb03c2bb03f2b2db0702cb03c2bb040
2b2db0712cb03d2b2eb12e01142b2db0722cb03d2bb03e2b2db0732cb03d
2bb03f2b2db0742cb03d2bb0402b2db0752cb3090402034558211b232159
422bb00865b003245078b1050115455830592d0000010000000203d7ed1b
39375f0f3cf5001907d000000000d1e8a87900000000d1e9371ffbbbfde7
0a7d086d0000000900020001000000000001000007b6fe5600000abffbbb
f7d50a7d000100000000000000000000000000000bcf0427002d00000000
02000000054a0006054800050745fffa050d00b70538005f0538005f05f1
00b706010003048300b7048300b7046b00b705b5005e05f700b70606001b
023000b702310062034d0018052d00b7040300b704200019040300b70741
00b705f700b705f700b70641005e0641005e0885006004b100b704ad00b7
0641005f04e500b7043d0042043d0042049d001e04ba002d05bf00a505bf
00a5054a00060817001f0512001404e0000204b4003503e2004103e20041
064a00440460008d03bb005403bc00540820005407bb0054067a0054067c
0054046000560460005604610057046c0052042000530420005302bd002f
0724002f099a002f0533002f071f002f0995002f04790031047900310478
003104790031047800310479003104780031047800310479003106ef0031
06ed002f06ee003106ef003106ee003106ef003106ee003106ee003106ef
00310479003106ef003106bb002f09320031049b00310710002f0559002f
07d000310410003e04600056045c008d045cffa7045cfff301e0007101e0
003d01e100970417006301e0ffb901e1ffba03f8008d03f8008d0269002b
01d80093066d008d045c008d045c008d046e0054046d004b06d200540461
008d0461008d0460005602d8008d03620043036200430638004306390043
0488008d0238003102cd002b02cb002902d5002e055f002b04cf002a04d0
002b0556002b07e8002b0744002a0746002b045b0083045b008304080017
0623002103e40017040700150388003a02df00640324005e032c006f0227
002a02630052020e003202630034023f0032018b0025023b002702640053
012000420121ffea02440053012400530378005302620053026500320264
0053026300340198005301e1002b01ab00220262004c021f0009034d001b
023b00180220000701f2002b032000830320002c03200122032001100320
005e032000540320005e0320004f0000012f0320006f0320005403200061
0320005103200071032000790320007e03200064032000c8032000d20320
00c8032000db032000bb032000a30320011203200116032000f2032000e3
032001290320013e044800b7054c001b0641005e0548000404d6005505f7
00b704c0004206810047066000630650006904a00054045b008c046e0071
043f002b044e0050038b005503100052048f001204aa0071050e002b0212
00860436002c04ab008d04030016031400520318004f04cf004a04650080
04ac005403a0005203a6001a0451008205c2005105c3005203bdfffe05f7
007e05f70058032001590320006001a9005701a9005704d800b7043400b7
043400b70624000e081d0011047f002a05f700b7053d00b705abfff9083c
fff9088800b70641005e05bf00b704e3000705740003061d004d061800b7
05bf00b7052a005c086900b708c200b705c2001d070700b704c000b70547
00390548005f082800b70532fffc05c7001b05d6001b05aa003604920071
044f005103e1008d033a008d033a008d04d400170628001903820036047f
008d040b008d04920000068b00000583008d0466008d0660008d046e0054
0466008d03f3001b043600150582005104b9008d0466008d04060051066d
008d06c1008d0490001c05a3008d03be008d03c5003c03c50054061d008d
03da000e044effd70466001e0320006d032000b30320006d021a008e037f
005103cc005c01c6006b020b008801f4007d01d8006f05dc006f01ac0062
01ab006802db006202db006801af005c02df005c023200640233007c035a
0064035b007c0388004301f500b501fb00b80388004302e7007d048800b4
0633008003960041048800d10208006f0216005a0216003f026400b60264
003e025a0044025a00420352007b048800760488007603de006505790046
04880084048800780198007f02e5007f0590005806890068067f0065067f
0065067f006505dd005805d00080033d0059048800840488001704380010
048800620488008b04880030048800290488003104380031067e003b090b
00ce0488003504f8006a03060026043c005904250051046c002903e6003f
0443006103d20031044e006c04060047043800370438008a043800550438
00580438000c043800660438005d0438006204380061043800600524006a
03180021046d00510481005304ab0029043e004b0424003a044400470488
003c048800a40488005e0488005604880017048800700488006c04880069
029c003d029c006a029c004a029c0046029c0024029c0054029c0052029c
0057029c0050029c0053029c0058029c006e029c006e014e003f014e0037
029c003d029c0067029c0048029c0045029c0021029c0054029c0051029c
0054029c0050029c00540118fe9d05ca006105b0005f0488006504880096
04880082048800640488009604880097048800af048800a2048800e10488
0065048800b9048800c9048800940672006a0433004005c2006e04820055
03f3000604e3002c056700460556004a0488006a07d0006c07d0007605dc
00b205dc00b305dc003005dc008d05dc003005dc008d07d0006c05dc00b1
032000d5032000cf0320005e032000540320ff300320ff300320005e0320
00540320005d032000540320005003200055032000500320000103200050
0320005503200050032000540320012006a1005e069000a504c8005404f3
008304bd0056052e0072052e007c059e00b705b400b7056f0066046f00b0
048000b00443006801fe004d02bb003802550067035900380252002c02e6
000e02d8001a028dfff80290002b0000fdb303200150032000bf0320ffe3
0320ffb303200050032000550320007e0320012a032001140305009a0305
009a0305009a030500940305009a0305009a0305009a03050071030500d0
032000c80320015003050035030500350305003503050094030500390305
00a3032001260320012603200050045400200454018400000000030500fb
032000f50320004b030500e10305010e030500170320014c023b00690399
00a4032000d0087f0054087f0054087f0069087f0069087f0074087f0054
087f0069022f0059023a0054014a0064025d005402570068020a0054025a
0054025800710349007101ad006d01af00410239003e024000410320003b
0320003b0000ff7c0320007e030500e1030500170638002e054400380542
003405400060071c002e04d80052047e005405a4005804a20065046bff76
05bb005e053bffe1027f00af055a00b7086e00a805f7ff760641005e07cf
006005dd002e04ab00b70434004e0538002f049d001e0650006905ac00aa
05a3000104bc0039049600340497005c047f003b05f5005e084f00b7057b
00b705b400b704fd006704c3003505e000050603006204f0001205900029
05bf00a504e400b7058e00b704c3003505450037046d004404a600b70461
fff90460008d047effe803c1005504600056040c002d02a4ff7606ad008d
0455008d03f8008d0434000e062e00540461008d0363004702e1002c02cd
002b04b800140391003d03700044036a00220376003c0420004d04520005
036ffff0050800560425004c03a0003a0227006a04b5008d02e1003006f4
005606f40056036200430357003b0396000c046000560481002a02a8ff92
048000450376002c0427005f04aa008d046f008d03a0003a04070039033b
0034035d008d05c200510478003104780031047800310478003104780031
06ee003106ee003106ee003106ee003106ee003104cf002a0744002a03e2
0082046000550460008d0460008d03c1003803dc00540460005604600056
0420004d0420004d058e004a038b005504cc003504660053046000570431
005103d9fff604070007045c0083045c008d045c008d0302002101cd008d
0489008d066d0083066e0083066d008d045cff83045c008d0466008d046e
00540623005305ea005102d8000f02d8000f02d8000f02d8008d02d8008d
028000ca0280000603bc008d03bb008d0368004901cdff4901cdff480221
ff4902d7001702c4003104c6003804a70059043100760406001606230021
0406001003b40014038a003b0474003b036ffff0037a002202c5ff2402c5
003203cc000c039e007105bd005d04660057043700520222ff4a03f7000a
02ed008d04600056071400560753005607ff0056054b002703f6002a05c3
002a0690002f05090085051000860429006f045cff78045cff7803fb0016
054200020647004f0400003603e00052045b008d046600160358008d038b
003601cd0068026f001003e8008d032a0043049c005103e0003904ba0054
04c100570538005606d2005103bc005804980068049800690385008d03bb
002503bb0025034a0017043d008004cb0068063d005304c4005b03fb0016
05e400230388003a036f00380360004704460028031a008d03f900150466
008d04b100540442001b02e9001003cf000102c1006702d5002103270067
027100670271003e03030038033500670156006601d3001702dc0067020d
006703e5006703350067030d0052035400380297002f0299006702bd0067
026f00180317005d0451001e0227004c0263003403550034023e003201e9
003501f000230124004102630053020e0027026b0035026c0036028c0043
0377004d0239001702650053023c000f0256003103300032020000070264
004b0330003206ce008305850029046d0027041b002502c9005203cc002a
04c6003404db0036027b001303a2003b02630052021b00320266003101e9
0023015600040263004c0157002b014e004e01200053016700390174ffda
014e004e01500042019d0053037700530377004d0264ffb502640053026a
0053026500320330003101e6002f0124ffb701b50022028d002902840035
0276005d024b0046021f000901f0002b0270002b01e0fffb02890044027d
006c01a5001b01b9002f02420068028e00c7041600c701a9006d01900065
01900062022600260226003e03a4005903a4005901ed00b602cd00c102cd
00c103050090030500900305009003050090000000900259002f02e300a1
02e300a102e300a102e300a102e300a103e8009203e80092023d00310320
007e04e90016046f00b7057b00560478001706a100b705a100180488005c
046e007103a8005303aa004504f6002b049e003e06b700230465007f0465
ffea05c30052038b007f046e005403f5001a052b008d04a8001003970053
0461002e04e5003e01f600a7063300b705240027049a002704f100b70881
0010059500b7058000b705a10027063f001d065000b707fb00b7087800b7
067e005f04a5001e05030013055700130719001d0583005c052a005c04f7
00b706a1001e06a1001e057a00b705f7fff905f700b7064300b7052a005c
078c00b705a40058049600340641005e043600b7049b002605630013056a
004004aa003a0622003a060b001c04bf001b0716fff9076300b705f6005e
04f9001c04a2006505eefff904c6008d0414002d0393002e03d2008d0692
00190474008d0457008d0461002d04dd001c04b9008d05d4008d0662008d
04cd005303fb001b04020014040a001804440016058c001c045900510405
005003fe008d05180035051800350432008d04ea00000466008d04bd008d
0404005005d9008d0420004d0377fff8046e0054033d008c0394002e0443
001604260038060b00550528001503cd0017063c00000611008d04580052
0492001b038b005504da000005c0005305600060057c0068048800480488
0038063a005e04880031077200d108430061069e00cc05d2004e04f4004e
0976003e04db003a0488002305bd005d05d0006a04ba005e0568005e0669
001804a600b004af00710488009605f4007b0488009b0321013c0321ffe7
05dcffce05dc02b305dc02b305dcffce05dc02b305dcffce086f00a9051c
003e04f600b7043700640547ffe80597006a0482002a066d008304460053
04560014038500480468fffb048c007603b6001e07620055086700670771
00b70572ffff07c600b7066b001908c100b7045a001b0a3c005f069a005e
0868006804fc005f06110075056f008d0458000b0621008d0503001606d1
008d0371001a0868005404e9005306190059039600540000001803200061
0320005e032000610000ffd10000ffca000000a0000000a00481005408a3
004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b
08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3
004b08a3004b08a3004b08a3004b08a3004b08a3004b01d800930488006c
048800610643005801f8007d029c004a029c0047029c006905bc005805ab
005a05cc005803700053091700580000fffe0363006c02e7007d048800b4
06320080024e006e024e008d0375006e0375008d0220007b048800d10488
00d10488007d0235009f037e0058022d0061022d004f027f00c5027f004a
026e004c026e004e03c2fff2068a006805fd006a046b005e04960068050c
00590466005204390064048800300526004404c3005104e500670543005a
05c7005a04380022043800790438007d0438004e04380041043800540438
003704d5005b03f80059040b006704660065047800510460005504380054
0495006504d3005d04380058043800860438009c04380086043800930438
00a5043800b9043800cc0438005a04380086043800860438007104380059
029c0037029c0058029c006e029c006e014e005c014e005a029c0071029c
005f029c0049029c0067029c0041029c0030029c0050029c0044029c0046
029c002d014e003c014e0039029c0037029c0058029c006e029c006e014e
005d014e0059029c003d029c0025029c0053029c0052029c0057029c0050
029c0053029c0060029c0048029c0067029c0041029c0030029c004c029c
0044029c0042029c002a014e003e014e0037029c0037014e005d014e005a
02b70084029c0060029c0049029c0068029c0041029c0030029c004b029c
0044029c0042029c0029029c0039029c0058029c006e029c006e014e005c
014e0059029c0072029c003d029c0066029c004b029c0044029c001a029c
0054029c0051029c0051029c0050029c0055029c0060029c0049029c0066
029c0042029c0030029c0052029c0042029c0046029c002c014e003a014e
003b02e7009300640000062a00500613001906130019035400380000fc15
0000fc150258fffa02560038025affff022c003802190054046000560427
00530393005604b8005f03bc008d03b1006a029c002f034400610352006a
035a00630329005a034e0061032a0060036e003e031200580000ffe90000
ff41000000000438009c01ab005b02db005b02b60064030500a30320012e
0320012e03200150032000e80320006f032000af0320009a0320008d0320
00a80320008d032000980320001803200018032000610320012e03200071
0320007e017d006705dc000003e8000005dc000003e80000029a000001f4
0000014d00000488000001a9000000fa0000007d00000320fff403200007
0320012e0320012e05ad003308be00650877004e05dc00b1000000fb0529
00d00000ffe90000fe1401f400000208008701900000089f0049089f0049
08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3
004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b
08a3004b08a3004b08a3004b08a3004b08a3004b08a3004b04b0005e0329
00890329008904b0006f032900830000fc15000000000000fc3400000000
000000000320006f03200054032000710320007103200079032000180320
006c03200061032000510320005e0320005e0320004f0320ffe402b60088
032000e303200051032000650320feed0320ff960000fffe032000510320
0051032000610320004f0320fff303200079032000710320ffac03200064
0320006f0320005403e8004b030500a3030500a3030500e10305010e0320
00c80305009a0305009a0305009a0305009504e2004b04e2004b045400e9
0320008f032000d10320008f030500400553009a0553009a032000710320
007103200071032000710320007e0320007e0320007e053e002f04790031
06ef0031032000830320011201e0ffb9036ffff0058900b7050b00640484
00770488005b0000ffbe00000078000000780000ffd104790031049a0031
049b00310559002f0559002f0353000205ae005b0597005b05a6005b05a3
005b05a8005805b5005805cc004505d0005a05ce005a0557005c0640005e
0212ffb1041d00200420000a046d005303200071032000ef032000cf01ed
00b605f100b7046000560320006a0460ff9e04600056042c00b7045b0083
0382003603bb0054037600b50438009c03990042059900c70508003703a3
008e047f002a0538005f03bb005403bb0032053c005f053e002f022c0099
0320002a019000620190006503c6003d033e0039079600270460ffa0035e
00020365ffd80363003603dc006801210042019a00520263004c0220000a
02640053024200120203000a0416003201900062019000650000fe700000
fe70032000830320005e0320005e0320007e0320006f0000ff900320005e
0320007e0000fdb30305003504880000032000bf0305009a030500a301ad
006d05f7007302d80077045c008d02ea001e02cd00220000fd630000fd0c
0000fe020000fdf00000fd3e0000fd340000fd3e0000fd2f0000fd4f0000
fd340000fd410000fd310000fd510000fd590000fd5e0000fd440000fda8
0000fdb20000fd9b0000fd830000fdf20000fdf60000fdd20000fdc30000
fd400000fd4d0000fd4d0000fe8e0000fdcf0000fdaf0000fe730000fd3e
0000fd3e0000fd5e0000fd4f0000fd510000fe0e0000fe0e0000fe300000
fdc80000fd4f0000fd8f0000fd7a0000fd6d0000fd880000fd780000fd6d
0000fcf80000fcf80000fd410000fecf045600a1045600a1045600a10456
00a102e30070045600700456007004560070045600700456007002e30062
045600620456006204560062045600620456006202e3005d0456005d0456
005d0456005d0456005d0456005d02e3005b0456005b0456005b0456005b
0456005b0456005b02e30071045600710456007104560071045600710456
0071045600a1045600a1045600a1045600a102e300700456007004560070
04560070045600700456007002e300620456006204560062045600620456
00620456006202e3005d0456005d0456005d0456005d0456005d0456005d
02e30062045600620456006204560062045600620456006202e300710456
007104560071045600710456007104560071045600a1045600a1045600a1
045600a102e30070045600700456007004560070045600700456007002e3
0062045600620456006204560062045600620456006202e3005d0456005d
0456005d0456005d0456005d0456005d02e3006204560062045600620456
0062045600620456006202e3007104560071045600710456007104560071
04560071045600a1045600a1045600a1045600a102e30070045600700456
007004560070045600700456007002e3005b0456005b0456005b0456005b
0456005b0456005b02e3005d0456005d0456005d0456005d0456005d0456
005d02e30062045600620456006204560062045600620456006202e30071
0456007104560071045600710456007104560071045600a1045600a10456
00a1045600a10000fe8e0000fdf80000fe730000fdf80000fd630000fd0c
0000fe020000fdf0032001220320002c032001210000fe090000fd8f0000
fd4f0000fdc80000fe300000fe0e0000fe0e0000fd21046e005403050035
000000350000fd7a0000fd6d0000fd880000fd780000fd6d0000fcf80000
fcf80000fd410000fe0e0000fecf0000fd410000fd340000fd410000fdb5
0000fdaf0000fe000000fcda0000fdf20000fdf60000fe1e0000fe1e0000
fc1d0000fcd90000fc8a0000fbbb0000fc4c0000fd110000fd410000fd4f
0000fcd20000fc400000fcec0000fca20000fc530000fc6e0000fd510000
fd510000fd510000fd510000fd5e0000fd5e0000fd5e0000fd5e0000fcf8
0000fcf80000fcf80000fcf8054a0006054a0006054a0006054a0006054a
0006054a0006054a0006054a0006054a0006054a0006054a000605460004
054a0006054a0006054a0006054a0006054a0006054a0006054a0006054a
0006054a0006054a0006054a0006054a0006054a0006054a0006054a0006
054a0006054a0006054a000605530006054a0006054aff5e054aff49054a
ffa9054a0006054aff57054aff47054affa9054a0006054a0004054a0006
054a0006054a0006054a0006054aff5e054aff49054affa9054a0006054a
ff57054aff47054affa90546000405460004054a00060745fffa0745fffa
0743fff8050d00b7050d00b7051e0008050d00b7050d00b7050d00b70538
005e0538005e0538005e0538005e0538005f054e0028053c005f0538005e
05f100b705f100b705f100b705f100b705f100b70abf00b7097f00b70601
000306010003048300b7048300b7048300b7048300b7048300b7048300b7
048300b7048300b7048300b7051f000a048300b7048300b7048300b70483
00b7048300b7048300b7048300b70483001d048300b7048300b7048300b7
04830099048300b7048300b704b4ffcc048300b7048300b7048300b70483
00b7048300b70483ff270483fe430483fe2e0483ff2f0483fe3c0483fe2c
0487ff550483ff44048300b7046b00b705b5005e05b5005e05b5005e05b5
005e05b5005e05b5005e05b5005e05f700b705f700b705fcff7205f700b7
05f700b705f700b705f700b705f700b705f700b705f7ff2705f7fe4305f7
fe2e05f7fe8e05f7ff2f05f7fe3c05f7fe2c05f7fe8e05fcff5505f7ff3e
05f700b705f7ff2705f7fe4305f7fe2e05f7fe8e05f7ff2f05f7fe3c05f7
fe2c05f7fe8e0230ffac023000900230ffdf0230ffdf0230ffdc02300004
0230ffef023000a0023000b70230ff5f0230ffdc023000b70230ffdc0230
005b023000a70230ffda0230ff370230ffef0230fff40230ffdc0230ff17
0230fe340230fe1f0230fe7f0230ff200230fe2d0230fe1d0230fe7f0230
ff420230ff2a023000040230ffef023000b7023000b705be00b7034d0018
034d0018035e0018052d00b7052d00b7052d00b7052d00b7052d00b7052d
00b70403009a040300b704150011040300b70403000e040300b7040300b7
077f00b705fc00b7074100b7074100b7074100b7074100b7074100b705f7
00b705f700b705f700b705f700b705f700b705f700b705f700b705f700b7
05f700b705f700b7096200b707df00b70641005e0641005e0641005e0641
005e0641005e0641005e0641005e0641005e0641005e063fff8d0641005e
0641005e0641005e0641005e0641005e0641005e0641005e0641005e0641
005e0641005e0641005e0641005e0641005e0641005e0641005e0641005e
0641005e0641005e0641005e0641005e0641ff470641fe630641fe4e0641
ff4f0641fe5c0641fe4c0641ff710641ff530641005e063e005e04b100b7
04b100b704b100b704b100b704c3000604b100b704b100b704ad00b704e5
00b704e500b704e500b704e5007004e500b704e500b704e500b704e500b7
04e500b7043d0042043d0042043d0042043d0042043d0042043d0042043d
0042043d0042043d0042043d0042049d001e049d001e049d001e049d001e
049d001e04beffcf049d001e049d001e049d001e049d001e05bf00a505bf
00a505bf00a505bf00a505bf00a505bf00a505bf00a505bf00a505bf00a5
05bf00a505bf00a505bf00a505bf00a505bf00a505bf00a505bf00a505bf
00a505bf00a505bf00a505bf00a505bf00a505bf00a5054a0006054a0006
0817001f0817001f0817001f0817001f0817001f0817001f051200140512
0014051200140512001404e0000204e0000204e0000204e0000204e00002
04dffef004e0000204e0000204e0000204e0000204e0000204e0000204df
fecc04dffdc404dffdc904dffe2b04dffed904dffedc04e0000204e00002
04dc000004b4003504b4003504b4003504b4003504b4003504b4003504b4
003503e2004103e2004103e2004103e2004103e2004103e2004103e20041
03e2004103e2004103e2004103e2004103e2004103e2004103e3ff8b03e2
004103e2004103e2004103e2004103e2004103e2004103e2004103e20041
03e2004103e2004103e2004103e2004103e3002d0423004103e2004103e2
004103e2004103e2003c03e20041064a0044064a0044064a00440460008d
0460008d0460008d0462008d03bb005403bb005403bb005403bb005403bb
005403beffe803bb005403bc005404600056046000560460005604600056
04a500560460005608000056042000530420005304200053042000530420
005304200053042000530420005304200053042000530420005304200053
0420005304200053042000530420ffd10420005304200053042000530420
00530427001d042000530420005304200053042000530420005304200053
042000530420005302bd002f02d2002f0479003104790031049e00310478
0031047900310479003104790031049e003106ef003106ef003107170031
06ee003106e4003106ef003106ef003107170031049b00310410003e0410
003e0410003e0410003e0410003e0410003e0410003e0460005604600056
04600056046000560460005604600056058c005604600056046000560460
0056045cffaa045c008d045c008d045cffaf045c0045045c008d045cfff3
03de007101e0007101e0007101e0ffcc0209006701e0ffe801e0008701e0
ffc301e0ffd401e0ffe801e0ffd601e0ffe301ccffcc01e0ffe801e0003b
01e0ffc301feffdb01e0ffc601fe000d01cd008d01fe008e01e0ffe301e0
ff4801e0ffb90228ffdb01ccffaf01e0ffb901f1ffc903f8008d03f8ffa7
03f8008d03f8008d03f8008d045c008d03f9008d01d8006301d800870225
001f01d8007e01d8ffd501d8ffcf01d8ffbc0271004303da0093066f008d
066d008d066d008d066d008d06bb008d0675008e045c008d045c008d045c
008d045c008d045c008d045c008d045c008d045c008d045c008d04a9008d
064c008d046e0054046e0054046e0054046e0054046e0054046e0054046e
0054046e0054046e0054046e0054046e0054046e0054046e0054046d0054
046effda046e0054046e0054046e0054046e0054046e0054046e0054046e
0054046e0054046e0054046e0054046e0054046e0054046e0054046d0054
046e0054046d0054046d0054046e0054046e0054046e0054046e0054046e
0054046e0054046e004b0460008d0460008d0460008d0460fff60463008d
0460008d02d8008d02d8007202d8008202f9001802d8008d02d8007902d8
007902df004f02d8008c02d8fff703620043036200430362004303620043
03620043036200430362004303620043036200430362004303a900430238
003102cb002902cd002c02cc002b02cd002b02cd002b02cd002b02ecffaa
04d0002b04d0002b04ce002904d0002b04d0002b04d0002b04ce002904d0
002b04d0002b04ce002904ce002904ce002904ff002b04ff002b04d0002b
04d0002b0745002b0745002b074300290745002b0745002b0745002b0743
00290745002b0745002b0743002907440029074300290771002b0771002b
0745002b0745002b045b0083045b0083045b0083045b0083045b0083045b
0083045b0083045a0083045c0083045b0083045b0083045b0083045b0083
045b0083045b0083045b0083045b0083045b0083045b0083045b0083045b
008304980083045b0083045b00810408001704080017040f001606230021
06230021062300210623002106230021062300210623002103e4001703e4
001703e40017043e00160407001504070015040700150407001504070015
040700150407001504070015040700150407001504070015040700150407
001504070015040700150389003b0388003a0388003a0388003a0388003a
0388003a03dd003a0227002a0226002a02630052020e003202630034023f
0032023e0032018b0025023b0027023b0027026d005b0198007d013afffc
024400530134005b0378005302650032026500320264005301a5005301ec
003401ab00220262004c021f0009034a0019024a0020023b001802420017
01f2002b0547000404c0004206600063064dffc4065e00700650ff800650
fe9c0650fe870650fee70650ff880650fe950650fe850650fee70650ffaa
064fff86065000690650ff800650fe9c0650fe870650fee70650ff880650
fe950650fe850650fee704a0005404a0005404a0005404a0005404a00054
04a0005404a0005404a0005404a0005404a0005404a0005404a0005404a0
005404a0005404a0005404a0005404a0005404a0005404a0005404a00054
04a0005404a0005404a0005404a0005404a0005404a00054038b0055038b
0055038b0055038b0055038b0055038b0055038b0055038b0055038b0055
048f001204a60029048f0012048f0012048f0012048f0012048f0012048f
0012048f0012048f0012048f0012048f0012048f0012048f0012048f0012
048f0012048f0012048f0012048f0012048f0012048f0012048f0012048f
0012048f0012048f0012021200860212ffb0022b0086028000440212007f
0212ffff0212ffea0212ffde0212007f0212fff80212ffe80212ffde0212
ffb00212ff680212ffb102120086021200390212ffbf0212ffc10212ffce
051300b40465008004650080045100820451008204510082045100820451
008204510082045100820451008204510082045100820451008204510082
0451008204510082045100820451008204510082045100820451008205c2
005105f7007e05f7005805f7005805f7005805f7005805f7005805f70058
05f7005805f7005805f7005805f7005805f7005805f7005805f7005805f7
005805f7005805f7005805f7005805f7005805f7005805f7005805f70058
05f7005805f7005805f7005804d800b7043400b7081d0011081d0011047f
002a05f700b705f700b705f700b705f700b7053d00b70641005e04e30007
04e3000704e3000704e30007052a005c070700b7054700390574000303e1
008d033a008d0628001906280019038000360388003d03810036047f008d
047f008d047f008d047f008d047f008d040a008d0583008d0466008d0406
005105a3008d03c5003c043600150198004d020b008801a9007704b7001f
01a9006902d9006901a5008d03fd008d06330080064c008d031400000314
0000000000000000000000000000000000000208006f0223007c06960047
04880094048800ef06a0005e06a0005e06a0005e06a0005e06a1005e0690
00a5069000a5069000a5069000a5069000a504c8005404c8005404c80054
04c8005404c8005404f3008304f3008304f3008304f3008304f300830000
fdb30000fdb30000fdb3032001500000015000000150032000bf000000bf
000000bf000000bf0000ffe30000ffb300000050000000550320007e0000
007e0000007e0000007e0320012a0320012a0000012a0000012a0000012a
0320011400000114000001140000009a0000009a0305009a0000009a0000
009a0000009a000000940000009a0000009a0000009a00000071000000d0
000000c80000015000000035000000350000003500000035000000940000
0039030500a3000000a3000000a3000000a3000001260000012603200050
00000050000000500000002000000184030500fb000000fb000000fb0320
00f5000000f5000000f50320004b0000004b0000004b000000e10000010e
000000170320014c01b6007c0000014c0000014c00000069000000a40320
00d0000000d0000000d000000054087f00540000005400000054087f0069
000000690000006900000069087f00740000007400000074087f00540000
0069022f00590000005900000059023a00540000005400000054014a0064
0000006400000064025d0054000000540000005402570068000000680000
0068020a00540000005400000054025a0054000000540000005402580071
000000710000007103490071000000710000007101ad006d0000006d0000
006d0000006d01af004100000041000000410239003e0000003e0000003e
0240004100000041000000410320003b0000003b0000003b0320003b0000
003b0000003b0320007e0000007e030500e1000000e1000000e100000017
0496003404960034049d005603c1003803b800320258ff8e0300ff4903ba
00020322ff8f031900240385008d02e9001002c100670327006702710067
03030038033500670156006601d3001702dc0067020d006703e500670335
00670299006702bd0067026f00180317005d0451001e028e00c7041600c7
00000065000000650226003e04e9ff0604e9001604e9fdcf04e9fdc404e9
fe3604e9feee04e9fedc04e9001604e9001604e9fed7063a00b705a40058
0641005e0427004d0420004d046e00540000fff403200007000000070000
00070320012e0000012e0000012e0320012e0000012e0000012e08670067
061100750abf00b708000056097f00b7073f00230532002d000000000000
00fc000000fc000000fc000001840000026000000314000003d8000004a4
00000654000006d000000780000007e00000088c000008e0000009ac0000
0a0400000a8c00000ab800000b3800000bd800000c7000000cb000000d1c
00000d3400000dd800000e4c00000f3800000fd8000010f0000012f00000
13780000140800001514000015bc000016a400001884000018c800001934
000019a800001a9800001b0800001bc800001c5000001cc000001d240000
1e3c00001f7400002174000022600000234c000024b000002650000028d4
00002c58000031400000321c00003234000033300000342c000035200000
3634000036ec0000398000003cc000003f900000415c000043bc00004480
0000455c000046640000467c000047ec000048040000481c000049400000
49f800004b2000004d8c00004f4c00004f64000051a8000051c0000051d8
00005364000054d0000055d40000573c0000593800005ba800005c940000
5e2c00005fb000006208000063a0000064ec0000655c0000660c0000669c
000067340000682c00006860000069d000006aa400006b1000006bac0000
6c4400006c9c00006cb400006d8800006e2000006f4000006ff800007104
0000727400007368000074380000754c0000763400007718000078ac0000
7b3c00007e7c00007fb400008058000081340000814c00008248000083e0
0000860c000087180000885400008a3400008cc800008e3800008ed40000
8f9800009008000090cc00009154000091cc000092300000930800009394
0000940c000094dc000095800000962c000096d8000097a0000098240000
999800009a0c00009aa400009b7000009bf400009c2800009cc000009ce0
00009d6800009e0800009eb800009f2c00009ff80000a0b40000a1300000
a1980000a2480000a2c80000a33c0000a39c0000a3e40000a42c0000a474
0000a4bc0000a5180000a56c0000a5d00000a62c0000a67c0000a7200000
a7b40000a8600000a8f40000a9280000a95c0000a9c40000aa240000aac4
0000ab480000ac240000acd80000ad480000adbc0000ae100000ae6c0000
af380000afb00000b01c0000b04c0000b0880000b0f40000b1ac0000b210
0000b2800000b2c00000b3740000b4380000b4d40000b5ac0000b7000000
b8380000b94c0000ba540000bb780000bcac0000bd680000bdf00000bea8
0000bfb00000c0040000c10c0000c2580000c2cc0000c3b40000c4900000
c5900000c6300000c6e40000c7980000c8cc0000c9540000ca1c0000cb0c
0000cc740000cd580000ce500000ceac0000cf6c0000cf8c0000cfe40000
d0800000d0bc0000d1040000d1b80000d2a40000d3dc0000d45c0000d4e8
0000d5800000d68c0000d7980000d8600000d8a00000d98c0000da080000
dac40000db240000db880000dbfc0000dc540000dcc40000dd600000dd78
0000de040000ded40000dfb80000e1100000e1c80000e2680000e2e80000
e39c0000e4b80000e6000000e6c80000e7040000e7740000e8200000e900
0000ea340000eabc0000eb480000ebd80000ecd80000ed800000edd80000
eeb40000ef8c0000efcc0000f0100000f0b00000f26c0000f2cc0000f330
0000f3940000f3ec0000f45c0000f4f40000f5980000f6240000f7200000
f8280000f9680000fa1c0000fae40000fb980000fc0c0000fca80000fd1c
0000fdac0000fe840000ff800000fff4000100180001003c000100900001
00b0000100fc0001011c0001013400010164000101b0000101c800010214
000102680001028000010298000102d80001030400010348000103880001
03bc000103f0000104240001045c000104cc0001052400010580000105e8
0001064400010698000107800001086000010954000109f400010acc0001
0c0800010c7000010cd000010d6000010db000010dc800010f0800011058
000111d80001134c000114dc0001159c0001172c000117bc000118a40001
19d000011aec00011c8000011ddc00011ec000011f6800012014000120c0
000122ac000123d4000124d4000125a0000125f800012608000126180001
2628000126380001264800012658000126680001267800012744000127ac
000128780001297400012a0c00012acc00012b9400012bfc00012d000001
2dc800012e6400012ecc00012edc00012eec00012efc00012f0c00012f1c
00012f2c00012fc800013034000130f8000131e800013274000133380001
33a00001346400013484000134a4000134c4000134e40001350400013524
000135440001356400013584000135a4000135c4000135e4000136040001
36240001364400013748000137b00001385c000139c000013a4800013bb8
00013cfc00013d6400013eec00013f9000013fd000014000000140300001
4088000140bc00014108000141b800014204000142bc0001442800014478
000144c400014538000145b0000146280001468800014744000148280001
495400014a4c00014aec00014b6c00014bbc00014c3400014cb000014d34
00014dc000014e3400014eac00014f3400014fb000015034000150b40001
517c0001521c000152b000015348000153d000015474000154f40001558c
0001566c000157580001582000015918000159b400015a4c00015ae80001
5b8000015c7400015d7400015e5400015f6400015fb8000160a000016158
00016254000163480001646800016500000168040001697400016aac0001
6bf400016d4400016e1c00016f4c00016fd000017094000170e8000171b4
00017284000172f000017374000173e00001744400017478000174ac0001
74f000017560000175d40001767c00017724000177900001780400017870
000178b8000178f80001793800017984000179c800017a1400017a400001
7aa800017b1800017bb800017c0000017c4000017cfc00017d6000017da8
00017e5c00017e9800017f1000017f8800018034000180b0000181240001
81240001814c000181ac0001825c00018284000182ac000182ec0001834c
0001843c00018524000185a4000186280001864800018668000186b00001
8774000187f8000188600001892c00018a2400018a8800018b1000018b94
00018c3c00018ce800018d6000018e0000018e7000018f0400018f680001
8fe80001909c000191500001921c000192a0000192c8000193080001940c
000194a800019574000196d8000197cc00019864000198c0000199c80001
9ad400019b6800019ce400019d7800019e0000019f1400019ffc0001a0cc
0001a1940001a2ac0001a3740001a42c0001a5040001a5800001a6200001
a7000001a7ec0001a8c00001a94c0001aa180001aad80001ac140001ad0c
0001ae340001aed40001af5c0001b06c0001b1600001b2000001b3780001
b4300001b4dc0001b5000001b6200001b6dc0001b7540001b8200001b878
0001b8bc0001b9e00001bae80001bbe80001bdb40001be980001bfb80001
c0f40001c1d00001c2800001c3900001c4b00001c5a80001c7040001c7e8
0001c9640001cacc0001cbd80001cc600001cd1c0001cde80001ceec0001
cfe00001d1f80001d2b00001d4700001d5800001d66c0001d7800001d8d0
0001da080001db680001dcc80001de500001df280001dfb80001e1380001
e2200001e3400001e4200001e5240001e5c80001e65c0001e7140001e78c
0001e8900001e8e80001e92c0001e9fc0001eb140001ec280001ed700001
eee00001f0d00001f2ac0001f4780001f66c0001f9ac0001fc940001fe0c
0001ffec0002010800020220000203340002048400020568000206b40002
07f40002092400020a2400020b1800020cb800020db000020fcc000210c8
000212540002134c0002141800021518000215900002167c0002180c0002
18e80002196c00021a4000021b1800021bcc00021d2800021e4800021f50
00021fc40002209c000221f8000222d4000223b400022494000225b40002
269c000228040002289c00022928000229cc00022a7000022bdc00022cf8
00022de800022f3c00022ff8000230f0000231c8000232cc000233fc0002
34600002351c00023588000235f4000236c8000237b000023868000239b0
00023aa800023ba800023c6000023d1c00023df800023f00000240300002
41a80002424800024288000243e400024548000247400002497400024acc
00024d3000025158000253640002544c000254c8000255340002561c0002
5770000257f8000258a800025a6800025b3c00025c3400025ca800025d50
00025db000025ea800025f1c00025fd000026058000260c4000261780002
627000026338000263e0000265000002666800026798000267f400026870
000268f00002699800026a4000026a8400026b3000026ba800026ca80002
6d6000026dcc00026e8800026eec00026ff0000270e000027198000271d4
000272380002727800027314000273a400027430000274d80002758c0002
7668000276d00002772c000277800002783800027898000278cc00027938
000279c400027a0400027aa800027b1c00027b9000027c1800027d240002
7dac00027e5000027e9400027f0000027fb4000280b8000281d000028428
000284e4000285f000028754000287bc000288e00002898800028a380002
8a9400028b4000028bec00028c9000028d5c00028de400028f6c00029024
00029108000291c0000291e00002935c00029478000295d0000297580002
97ac000298a00002998c00029a4000029bbc00029d7000029e7800029f78
0002a0a40002a1ec0002a2640002a2e00002a3780002a3cc0002a3f80002
a4440002a5400002a5940002a6100002a6500002a7a80002a84c0002a964
0002aa100002aa800002ab280002abd40002acd00002ad680002ae740002
af1c0002afe40002b0500002b1000002b16c0002b2080002b2f00002b3c4
0002b46c0002b5780002b61c0002b6b80002b7500002b7980002b8080002
b8540002b8d00002b9480002b9d80002ba700002bad40002bb400002bb74
0002bbd00002bc0c0002bc800002bce80002bd380002bd6c0002be240002
bee40002bf280002bf740002bfc00002c00c0002c04c0002c0900002c0d8
0002c0f80002c1340002c1e00002c2640002c3340002c38c0002c4380002
c5100002c5ec0002c5fc0002c7300002c8600002c8700002c96c0002ca74
0002cc080002ccc40002ccd40002cdc40002ce600002cf100002cfb80002
d0900002d13c0002d4280002d7080002d7640002d8580002d9080002d96c
0002dab00002dbc40002dc780002dd280002ddd40002de700002dee40002
df480002e0940002e2a00002e3040002e3980002e4480002e4bc0002e54c
0002e5e40002e6500002e7940002e8ac0002e9c40002ea900002eba00002
ec100002eca00002ed580002ee600002ef2c0002eff40002f0500002f190
0002f2e00002f3880002f4140002f61c0002f7240002f7f40002f8f80002
f9d80002faa40002fc0c0002fd180002fea00002ffa400030050000300b0
000301fc00030304000303ac0003045c000305080003059c000306100003
0670000307c0000308e400030948000309b400030a3c00030aec00030b60
00030be000030c7000030cd000030e0800030f1c0003106c000311300003
12140003128400031308000313c4000314b8000314c8000315a0000315f8
0003172c000318800003192800031ad800031c1400031cec00031e540003
1fbc0003213c0003227c0003228c00032408000325480003272c000328d4
0003294c00032a4c00032b6400032c1c00032dd800032fb4000330500003
30f00003318c00033384000334a00003359c000336b800033794000338bc
000339c400033bb400033c1000033c7800033cd800033d3000033d900003
3e1800033eb800033eec00033f2000033f6000033fa000033fe800034030
000341b00003429c000343c0000344a40003454c0003468c0003470c0003
48b4000349a400034b6800034c5400034cf400034e3400034eb400034f6c
00035090000351c00003525800035314000353f8000354f40003577c0003
57940003587c00035a9800035cec00035dd000036038000360cc00036184
0003626400036354000367040003671c000367f000036b8c00036d440003
6d8000036e4c00036f5c00037044000370e80003718c00037214000372a8
000374180003743c0003746000037484000374a8000374cc000374f00003
7514000375380003755c000376b4000376e80003771c0003775000037784
000377b8000377ec00037820000378540003788800037a2400037a580003
7a8c00037b5400037c5c00037e0000037e9000037eb000037ed000037ef0
00037f2000037f5000037f80000380580003827800038298000383c40003
83e0000383fc0003841800038434000384500003847c000384a8000384c4
000384e0000384fc00038518000385940003866800038684000386a00003
86bc000386d8000386f40003871000038724000387400003880c0003881c
0003882c0003893000038940000389500003896000038a1000038a880003
8a9800038b4800038c7000038d9400038ebc00038ffc000390c400039138
00039228000392d8000393fc0003940c0003941c0003942c0003943c0003
944c0003945c0003946c0003947c000394f40003954000039644000396ec
000397280003978c000397ec0003982c000398ec00039920000399800003
99cc00039a7400039b9000039be000039c1400039c6000039cbc00039cfc
00039d7000039e4400039fac0003a0800003a1440003a1e40003a2500003
a3340003a3d40003a4e40003a5340003a5840003a5a40003a5c40003a5e4
0003a6040003a6240003a6440003a6640003a6840003a6a40003a6c40003
a6e40003a7040003a7240003a7440003a7640003a7840003a7a40003a7c4
0003a7e40003a8040003a8240003a8440003a8640003a8840003a8a40003
a8c40003a8e40003a9040003a9240003a9440003a9640003a9840003a9a4
0003a9c40003a9e40003aa040003aa240003aa440003aa640003aa840003
aaa40003aac40003aae40003ab040003ab240003ab440003ab640003ab84
0003aba40003abc40003abe40003ac040003ac240003ac440003ac640003
ac840003aca40003acc40003ace40003ad040003ad240003ad440003ad64
0003ad840003ada40003adc80003adc80003aee80003b1040003b2dc0003
b3680003b37c0003b39c0003b4200003b4e80003b5380003b5880003b674
0003b8680003b9f80003bb8c0003bc900003bd340003be040003be880003
bf900003c0d40003c1ac0003c2d40003c3fc0003c4c80003c57c0003c5fc
0003c63c0003c6a40003c6a40003c6d80003c7240003c73c0003c7700003
c7800003c8100003c8940003c8d40003c9140003c9b80003cac80003cbc8
0003cccc0003cd8c0003ce840003cf3c0003d0180003d0f40003d21c0003
d2ac0003d2e00003d3480003d3c80003d3c80003d3c80003d3c80003d3c8
0003d3c80003d3c80003d3c80003d3c80003d3c80003d3c80003d3c80003
d4780003d4e80003d56c0003d5fc0003d6640003d8b80003dd6c0003de40
0003dea80003dfc00003e0340003e0ac0003e0ac0003e1b80003e1b80003
e2780003e2f40003e3ec0003e4b40003e5d00003e7180003e8440003ea1c
0003eb440003ec180003eda40003eeb80003f03c0003f1400003f2a00003
f4740003f5b00003f8600003fa100003fb280003fd540003feb00004008c
000400d40004010800040154000401ac00040244000402a4000403040004
0384000403e4000403e4000404c800040590000405f80004066000040684
000406ec00040814000408c00004098800040a1c00040ae800040bbc0004
0c4000040c6800040cec00040d1000040d3400040d8400040dc400040e00
00040e2400040e4800040e6c00040e9000040eb400040ed800040efc0004
0f7000040fd8000410a0000410c40004112c000411540004117c000411a4
000411cc0004126c000412ac000412ec0004132c0004136c000413d00004
142c0004149000041528000415a00004161c00041658000416a0000416e8
00041724000417600004179c000417d800041814000418500004188c0004
189c0004199400041b4c00041bf800041c4c00041c6400041c7c00041d8c
00041dec00041e9800041f5000041ff40004209000042138000421dc0004
23240004233c000423540004236c00042384000423ac000423dc0004240c
0004243c0004246c0004249c000424cc000424fc0004252c0004255c0004
258c000426ac000426c400042744000427e4000429180004294c00042994
000429d800042a0400042a2800042a4c00042a6c00042be400042d380004
2d5c00042d7400042f10000430540004306c0004307c000430a8000430c0
000430d4000430ec00043288000433d8000433fc00043420000434440004
346800043498000434b8000434d8000434f8000436a8000437dc000439d0
00043b4c00043cd400043df800043f400004403000044050000440700004
4090000440b0000440d0000440f0000441100004426800044288000442a8
000442bc000442d0000443180004437c000443d800044444000444e80004
4568000445e0000446480004466c0004468c000446d4000446f400044714
000447340004475400044858000448700004488800044934000449580004
496c0004498000044994000449a8000449bc000449d0000449e4000449f8
00044a0c00044a2000044a3400044a4800044a5c00044a7000044a840004
4a9800044aac00044ac000044ad400044ae800044afc00044b1000044b24
00044b3800044b4c00044b6000044b7400044b8800044b9c00044bb00004
4c0000044c1400044c2800044c3c00044c5000044c6400044c7800044c8c
00044ca000044cb400044cc800044cdc00044cf000044d0400044d180004
4d2c00044d4000044d5400044d6800044d7c00044d9000044dec00044e4c
00044eac00044f0c00044f5800044fc0000450200004507c000450d80004
513400045180000451f00004525c000452c0000453200004537c000453c8
00045438000454a80004551400045578000455d400045620000456880004
56f000045758000457bc0004581400045860000458c00004592400045990
000459f800045a6000045abc00045b1c00045b8000045be000045c2c0004
5c9c00045d0800045d6c00045dc800045e2400045e7000045ee000045f50
00045fbc000460200004607c000460c8000461300004619c000462080004
626c000462c80004631400046374000463dc00046448000464b400046520
0004656c000465d0000466300004669c0004670c00046778000467d80004
683800046898000468f800046944000469b000046a2000046a8c00046aec
00046b3c00046b8800046bf000046c5c00046cc800046d2c00046d880004
6dd400046e3400046e9800046f0400046f7000046fd80004702400047084
000470e800047158000471c80004723800047284000472e0000473380004
73980004740400047470000474d00004753400047594000475f00004763c
000476a00004770800047770000477d40004782c00047878000478d40004
7938000479a000047a0800047a7000047abc00047b1800047b7c00047bec
00047c5c00047ccc00047d1800047d7400047dd000047e3400047ea00004
7f1000047f5c00047fb80004801400048074000480d800048144000481a4
0004820400048264000482c0000482dc0004831c0004832c0004833c0004
835000048364000483780004838c0004839c000483bc000483dc000483f0
00048404000484180004842c000484400004845400048468000484ec0004
850400048560000485bc000485d0000485e4000485f80004860c00048620
00048634000486480004865c0004867000048684000486d0000487000004
872000048734000487480004875c000487b8000487cc000487e0000487f4
000488140004886c000488bc0004890c00048984000489fc00048a9c0004
8ae800048b1800048b6c00048bb800048c0000048c4c00048cc400048d44
00048d8400048dc400048e0400048e4400048e8400048ec400048f040004
8f4400048f7400048fa400048fd4000490040004901c000490340004904c
000490640004907c00049094000490ac000490c4000490dc000491640004
9188000492100004922800049240000492580004927000049288000492a0
000492c0000492d8000492f0000493080004932000049340000493580004
9384000493b0000493c8000493e0000494040004950c000495240004953c
000495540004956c000495840004959c000495b4000495cc000495e40004
95fc000496140004962c000496440004966400049684000496a4000496c4
000496e40004970400049724000497440004975c000497740004978c0004
97a4000497bc0004987000049934000499f800049adc00049b0000049b18
00049b3000049b4800049b6000049b7800049b9c00049c6800049dbc0004
9e880004a0780004a0900004a0b40004a0d80004a0fc0004a1c00004a1d8
0004a1f00004a2a00004a3500004a3680004a3800004a3980004a3b00004
a3c80004a3e00004a3f80004a41c0004a47c0004a4a40004a5040004a51c
0004a5340004a54c0004a5640004a57c0004a5940004a5ac0004a5c40004
a5dc0004a5fc0004a6140004a62c0004a7400004a82c0004a8440004a870
0004a9200004a9440004aab40004aacc0004aae40004aafc0004ab140004
ab2c0004ab440004ab5c0004ab740004ab8c0004abb00004abc80004abe0
0004ac040004ac1c0004ac340004ac4c0004ac640004ac7c0004acd40004
acf80004ad500004ad680004ad8c0004ada40004adbc0004add40004adec
0004ae040004ae1c0004ae340004ae4c0004ae640004ae7c0004ae940004
aeac0004aec40004aedc0004aefc0004af1c0004af3c0004af5c0004af7c
0004af9c0004afbc0004afdc0004aff40004b00c0004b0240004b03c0004
b0540004b06c0004b0840004b0a80004b0d40004b0f80004b1100004b13c
0004b1540004b16c0004b1840004b19c0004b1b40004b1cc0004b1f00004
b21c0004b2340004b24c0004b2640004b27c0004b2940004b2ac0004b2c4
0004b2dc0004b2f40004b30c0004b3240004b33c0004b3680004b3940004
b4700004b5600004b6000004b6cc0004b6e40004b7780004b7900004b7a8
0004b7c00004b7d80004b7f00004b8080004b8680004b8800004b8a00004
b8b80004b9440004ba340004ba4c0004baf00004bb940004bbac0004bbd0
0004bbe80004bc0c0004bc300004bc540004bc6c0004bce00004bd040004
bd280004bd400004bd580004be180004bf440004bf5c0004bf740004bf8c
0004bfa40004bfbc0004bfd40004bfec0004c0040004c01c0004c0bc0004
c0e00004c1800004c1980004c1b00004c1c80004c1e00004c1f80004c210
0004c2300004c2480004c3b40004c3cc0004c3e40004c4100004c4440004
c4680004c4940004c4b80004c4e40004c4fc0004c5280004c5400004c558
0004c5700004c5880004c5a00004c5b80004c5d00004c5e80004c6000004
c6180004c6a00004c7280004c7400004c7640004c83c0004c8600004c908
0004c9980004c9b00004c9c80004c9e00004c9f80004ca100004ca340004
ca4c0004ca6c0004ca840004ca9c0004cab40004cacc0004cae40004cbcc
0004cbf00004cc080004cc200004cc440004cc700004cc880004cca00004
cce40004cd280004ce180004cee80004cf0c0004cf240004cf3c0004cfc8
0004cfe00004cff80004d0100004d0280004d0400004d0580004d0700004
d0880004d0a00004d0b80004d0d00004d0e80004d1140004d1400004d16c
0004d1980004d1b00004d1c80004d1ec0004d2b00004d2d40004d2ec0004
d3040004d31c0004d3340004d34c0004d3640004d37c0004d3a00004d3b8
0004d4400004d4c80004d4ec0004d5040004d51c0004d5340004d54c0004
d5640004d5d40004d5f80004d6100004d6280004d6400004d6580004d670
0004d6940004d6ac0004d6c40004d6dc0004d6f40004d70c0004d7240004
d73c0004d7540004d7c00004d7d80004d7f00004d8140004d8780004d890
0004d8a80004d8c00004d8d80004d8f00004da600004da780004da900004
daa80004dac00004dad80004daf00004dc080004dc200004dc380004dddc
0004df780004e1a40004e3940004e5500004e5680004e5800004e5980004
e5b00004e5cc0004e5e40004e5fc0004e6280004e6400004e7c40004eb2c
0004eb440004eb5c0004eb740004eb8c0004eba40004ebbc0004ebd40004
edd40004edec0004ee040004ee1c0004efdc0004eff40004f1340004f14c
0004f1640004f2500004f3980004f4540004f46c0004f4840004f49c0004
f4b40004f5e80004f7740004f8740004f88c0004f8a40004f8bc0004fa0c
0004fa240004fa3c0004fa540004fa6c0004fa840004fb780004fb900004
fba80004fbc00004fbd80004fbf00004fd740004fef0000500f8000502c8
000504640005062400050790000507a8000507c0000509080005092c0005
0b5c00050b7400050b8c00050ba400050bc800050d3400050d4c00050d70
00050e6400050e7c00050e9400050eac00050ed000050fb400050fcc0005
0ff000051148000511600005117800051190000511b40005135800051370
000515600005157800051590000515a8000515c0000515d8000515f00005
1608000517b0000517c8000517e00005192c00051a7800051d7000051d88
00051da000051db800051dd000051de800051e0000051e1800051f380005
1f500005200c000520240005209c000520b4000520d80005220000052218
00052230000522b0000522c8000522e0000522f800052310000523280005
2340000523580005237000052394000523c000052410000524440005245c
000524740005248c0005255c00052660000527e4000528980005291c0005
29340005294c000529640005297c0005299400052ac400052ad400052aec
00052b0400052b5400052b6c00052b8c00052ba400052c2800052c9c0005
2cb400052d8800052da000052db800052dd000052f480005308c000530a4
000530bc000530d4000530ec000531040005311c000531340005314c0005
323c000533840005339c000533b4000533cc000534e0000534f800053510
000535280005354000053558000535ec00053604000536bc000536d40005
36ec000538300005396c00053b2800053cbc00053e1c00053e3400053f24
00053f3c00053f5400053f8000053f9800053fb000053fc800053fe00005
3ff8000540100005402800054040000540580005407000054088000540a0
000540b8000540d0000540e800054100000541f40005420c000542240005
434c0005454c000546640005467c00054694000546ac000547c8000547e0
000547f800054818000549c8000549e0000549f800054a1000054b3c0005
4b5400054b6c00054c5000054c6800054c8000054ca800054cc000054cdc
00054efc00054f2000054f38000550c4000550dc000550f40005510c0005
52400005535c000553740005538c000553a40005551c000555340005554c
000555640005557c00055594000555c0000555e400055610000557c40005
590c000559240005593c000559540005596c0005598400055b6000055b78
00055b9000055ba800055bc000055bd800055c0400055c2800055c540005
5e700005601c000560340005604c000560640005607c0005617000056188
000561a0000561b8000561d0000561e80005620000056218000562300005
6248000562600005628c000562a4000562bc000562e000056304000563f8
0005641000056428000565440005655c000565740005658c000565a40005
6698000566b0000566c8000567d4000567ec000568040005681c00056834
000568bc000568d4000568ec00056a1000056a2800056a4000056b000005
6b1800056b9000056ba800056bc000056bd800056bf000056c0800056c20
00056c3800056c5000056c6800056c8000056c9800056cb000056cc80005
6d7400056d8c00056da400056e9000056ff0000570bc0005716400057240
000573640005745c00057520000575a0000577a4000579a800057a180005
7ab400057b7800057c0400057c4000057ce000057d6800057dfc00057f24
00058004000580c800058190000582140005827c00058338000583b80005
843c000584b400058514000585780005862c000586c8000586ec000587c4
000587dc000587f40005880c000588240005883c000588540005886c0005
88840005889c000588b4000588cc000588ec0005890c0005892c0005894c
0005896c0005898c000589ac000589cc000589e4000589fc00058a140005
8a2c00058a4400058a5c00058a7400058a8c00058aa400058abc00058ad4
00058aec00058b0400058b1c00058b3400058b5400058b7400058b940005
8bb400058bd400058bf400058c1400058c3400058c5400058c7400058c94
00058cac00058cc400058cdc00058cf400058d0c00058d2400058d3c0005
8d5400058d6c00058d8400058e7000058e8800058ea000058eb800058ed0
00058ee800058f0000058f1800058f3000058f4800058f6000058f780005
8f9000058fb000058fd000058ff000059010000590300005905000059070
00059090000590ac000590cc000590ec000591040005911c000591a40005
92680005928000059298000592b0000592c8000592e0000592f800059310
0005932800059340000593580005937000059388000593a0000593b80005
93d0000593e8000595080005952000059538000595500005956800059580
00059598000595b0000595c8000595e0000595f800059610000596280005
9640000596580005967000059688000596a0000596b8000596d0000596e8
00059700000597f0000599540005996c000599840005999c000599b40005
99cc000599e4000599fc00059a1400059a2c00059a4400059a5c00059a74
00059a8c00059aac00059acc00059aec00059b0c00059b2c00059b4c0005
9b6c00059b8c00059bac00059bcc00059bec00059c8800059ca000059cb8
00059cd000059ce800059d0c00059d3000059d5400059d7800059d900005
9e5800059e7000059e8800059ea000059eb800059ed000059ef000059f14
00059f2c00059ff40005a00c0005a0240005a03c0005a1700005a3400005
a3580005a3700005a3880005a4100005a4280005a4400005a4580005a500
0005a5580005a5700005a5880005a5a00005a5b80005a6480005a66c0005
a6b80005a6dc0005a6fc0005a72c0005a7580005a7700005a7a40005a7ec
0005a8240005a85c0005a8940005a8cc0005a9040005a93c0005a9940005
a9ec0005abd80005ac280005ac740005ac980005acbc0005ace00005ad04
0005ad1c0005ad400005ad640005ad880005adac0005adc40005addc0005
adf40005ae0c0005ae240005ae3c0005ae600005ae840005aea80005aecc
0005aee40005af180005af4c0005af800005afb00005afe40005b0140005
b0540005b0980005b0d80005b11c0005b18c0005b2000005b2a80005b350
0005b3c00005b42c0005b49c0005b5080005b57c0005b5f00005b6640005
b6d80005b74c0005b7bc0005b8280005b8980005b8e00005b9200005b95c
0005b99c0005b9d80005ba180005ba640005baa80005baf40005bb200005
bb880005bbf80005bc980005bce00005bd200005bd600005be1c0005be80
0005bec80005bf7c0005bfb80005bff40005c0300005c06c0005c0e40005
c15c0005c2100005c2bc0005c3700005c3ec0005c4600005c4880005c4b0
0005c4d80005c5300005c5900005c5e80005c6c00005c7700005c8480005
c8700005c8980005c8d80005c9540005c9b00005ca100005ca8c0005cb7c
0005cc640005ccf00005cd700005cdfc0005ce800005cea00005cec00005
cee00005cf000005cf200005cf400005cf880005d03c0005d1000005d1b4
0005d2200005d2880005d3500005d41c0005d4e40005d5a40005d69c0005
d75c0005d7e00005d8440005d8c80005d9500005d9d80005da600005dae0
0005db640005dbe40005dc840005dd2c0005ddcc0005de740005df200005
dfc80005e0380005e0b00005e1200005e1cc0005e26c0005e3180005e38c
0005e3fc0005e4700005e4e00005e5a80005e63c0005e6f40005e75c0005
e7c00005e8280005e8a40005e9240005e9a00005ea500005eb040005ebb4
0005ec640005ed180005edc80005ee4c0005eed00005eef80005ef200005
ef480005ef880005efa00005f06c0005f2180005f2fc0005f3b00005f500
0005f68c0005f7840005f8c80005fa040005fa840005fb080005fbbc0005
fc280005fc840005fd400005fd980005fdc40005fe300005feb80005fef8
0005ff9400060000000600800006012000060160000601cc000602800006
02c800060338000603b400060430000604c8000604ec000605040006051c
000605340006054c000605640006057c00060594000605ac000605c40006
063800060650000606680006084000060858000608700006092000060998
00060a0800060a8000060b0c00060b9000060c1c00060cb400060d440006
0ddc00060e0000060e1800060e3800060e5800060e7800061068000612ae
000100000bcf00e40010008c00060002005000600077000000e60b970003
000100>
<0000001e016e000100000000000000c300000001000000000001000400c3
0001000000000002000700c70001000000000003002a00ce000100000000
0004000c00f80001000000000005003401040001000000000006000c0138
000100000000000700300144000100000000000800180174000100000000
00090037018c000100000000000a047301c3000100000000000b00180636
000100000000000c0019064e000100000000000d00c30667000100000000
000e001a072a0003000104090000018607440003000104090001000808ca
0003000104090002000e08d20003000104090003005408e0000300010409
00040018093400030001040900050068094c0003000104090006001809b4
0003000104090007006009cc000300010409000800300a2c000300010409
0009006e0a5c000300010409000a08e60aca000300010409000b003013b0
000300010409000c003213e0000300010409000d01861412000300010409
000e00341598436f707972696768742028632920323031312d3230313520
6279207479506f6c616e64204c756b61737a20447a6965647a6963202868
7474703a2f2f7777772e7479706f6c616e642e636f6d2f29207769746820
526573657276656420466f6e74204e616d6520224c61746f222e204c6963
656e73656420756e646572207468652053494c204f70656e20466f6e7420
4c6963656e73652c2056657273696f6e20312e312028687474703a2f2f73
6372697074732e73696c2e6f72672f4f464c292e204c61746f526567756c
61727479506f6c616e64204c756b61737a20447a6965647a69633a4c6174
6f20526567756c61723a323031344c61746f20526567756c617256657273
696f6e20322e3031353b20323031352d30382d30363b20687474703a2f2f
7777772e6c61746f666f6e74732e636f6d2f4c61746f2d526567756c6172
4c61746f20697320612074726164656d61726b206f66207479506f6c616e
64204c756b61737a20447a6965647a69632e7479506f6c616e64204c756b
61737a20447a6965647a69634c756b61737a20447a6965647a6963207769
7468204164616d2054776172646f636820616e6420426f74696f204e696b
6f6c74636865764c61746f20697320612073616e73657269662074797065
666163652066616d696c792064657369676e656420696e20746865205375
6d6d6572203230313020616e6420657874656e64656420696e2074686520
53756d6d65722032303133206279205761727361772d6261736564206465
7369676e6572204c756b61737a20447a6965647a69632028224c61746f22
206d65616e73202253756d6d65722220696e20506f6c697368292e204974
20747269657320746f206361726566756c6c792062616c616e636520736f
6d6520706f74656e7469616c6c7920636f6e666c696374696e6720707269
6f7269746965733a2069742073686f756c64207365656d20717569746520
227472616e73706172656e7422207768656e207573656420696e20626f64
7920746578742062757420776f756c6420646973706c617920736f6d6520
6f726967696e616c20747261697473207768656e207573656420696e206c
61726765722073697a65732e2054686520636c6173736963616c2070726f
706f7274696f6e732c20706172746963756c61726c792076697369626c65
20696e20746865207570706572636173652c206769766520746865206c65
74746572666f726d732066616d696c696172206861726d6f6e7920616e64
20656c6567616e63652e204174207468652073616d652074696d652c2069
747320736c65656b2073616e7365726966206c6f6f6b206d616b65732065
766964656e742074686520666163742074686174204c61746f2077617320
64657369676e656420696e207468652032303130732c206576656e207468
6f75676820697420646f6573206e6f7420666f6c6c6f7720616e79206375
7272656e74207472656e642e205468652073656d692d726f756e64656420
64657461696c73206f6620746865206c6574746572732067697665204c61
746f2061206665656c696e67206f66207761726d74682c207768696c6520
746865207374726f6e67207374727563747572652070726f766964657320
73746162696c69747920616e6420736572696f75736e6573732e20496e20
323031332d323031342c207468652066616d696c79207761732067726561
746c7920657874656e646564202877697468207468652068656c70206f66
204164616d2054776172646f636820616e6420426f74696f204e696b6f6c
74636865762920746f20636f76657220333030302b20676c79706873206f
766572206e696e6520776569676874732077697468206974616c6963732e
204974206e6f7720737570706f727473203130302b204c6174696e2d6261
736564206c616e6775616765732c2035302b20437972696c6c69632d6261
736564206c616e6775616765732061732077656c6c20617320477265656b
20616e64204950412070686f6e65746963732e20546865204c61746f2066
6f6e74732061726520617661696c61626c652066726565206f6620636861
72676520756e646572207468652053494c204f70656e20466f6e74204c69
63656e73652066726f6d20687474703a2f2f7777772e6c61746f666f6e74
732e636f6d2f687474703a2f2f7777772e7479706f6c616e642e636f6d2f
687474703a2f2f7777772e6c61746f666f6e74732e636f6d2f436f707972
696768742028632920323031312d32303135206279207479506f6c616e64
204c756b61737a20447a6965647a69632028687474703a2f2f7777772e74
79706f6c616e642e636f6d2f29207769746820526573657276656420466f
6e74204e616d6520224c61746f222e204c6963656e73656420756e646572
207468652053494c204f70656e20466f6e74204c6963656e73652c205665
7273696f6e20312e312028687474703a2f2f736372697074732e73696c2e
6f72672f4f464c292e20687474703a2f2f736372697074732e73696c2e6f
72672f4f464c0043006f0070007900720069006700680074002000280063
002900200032003000310031002d00320030003100350020006200790020
007400790050006f006c0061006e00640020004c0075006b00610073007a
00200044007a006900650064007a00690063002000280068007400740070
003a002f002f007700770077002e007400790070006f006c0061006e0064
002e0063006f006d002f0029002000770069007400680020005200650073
0065007200760065006400200046006f006e00740020004e0061006d0065
00200022004c00610074006f0022002e0020004c006900630065006e0073
0065006400200075006e0064006500720020007400680065002000530049
004c0020004f00700065006e00200046006f006e00740020004c00690063
0065006e00730065002c002000560065007200730069006f006e00200031
002e0031002000280068007400740070003a002f002f0073006300720069
007000740073002e00730069006c002e006f00720067002f004f0046004c
0029002e0020004c00610074006f0052006500670075006c006100720074
00790050006f006c0061006e00640020004c0075006b00610073007a0020
0044007a006900650064007a00690063003a004c00610074006f00200052
006500670075006c00610072003a0032003000310034004c00610074006f
00200052006500670075006c0061007200560065007200730069006f006e
00200032002e003000310035003b00200032003000310035002d00300038
002d00300036003b00200068007400740070003a002f002f007700770077
002e006c00610074006f0066006f006e00740073002e0063006f006d002f
004c00610074006f002d0052006500670075006c00610072004c00610074
006f00200069007300200061002000740072006100640065006d00610072
006b0020006f00660020007400790050006f006c0061006e00640020004c
0075006b00610073007a00200044007a006900650064007a00690063002e
007400790050006f006c0061006e00640020004c0075006b00610073007a
00200044007a006900650064007a00690063004c0075006b00610073007a
00200044007a006900650064007a00690063002000770069007400680020
004100640061006d002000540077006100720064006f0063006800200061
006e006400200042006f00740069006f0020004e0069006b006f006c0074
0063006800650076004c00610074006f0020006900730020006100200073
0061006e0073006500720069006600200074007900700065006600610063
0065002000660061006d0069006c0079002000640065007300690067006e
0065006400200069006e0020007400680065002000530075006d006d0065
00720020003200300031003000200061006e006400200065007800740065
006e00640065006400200069006e0020007400680065002000530075006d
006d00650072002000320030003100330020006200790020005700610072
007300610077002d00620061007300650064002000640065007300690067
006e006500720020004c0075006b00610073007a00200044007a00690065
0064007a00690063002000280022004c00610074006f00220020006d0065
0061006e00730020002200530075006d006d00650072002200200069006e
00200050006f006c0069007300680029002e002000490074002000740072
00690065007300200074006f0020006300610072006500660075006c006c
0079002000620061006c0061006e0063006500200073006f006d00650020
0070006f00740065006e007400690061006c006c007900200063006f006e
0066006c0069006300740069006e00670020007000720069006f00720069
0074006900650073003a002000690074002000730068006f0075006c0064
0020007300650065006d0020007100750069007400650020002200740072
0061006e00730070006100720065006e007400220020007700680065006e
0020007500730065006400200069006e00200062006f0064007900200074
006500780074002000620075007400200077006f0075006c006400200064
006900730070006c0061007900200073006f006d00650020006f00720069
00670069006e0061006c0020007400720061006900740073002000770068
0065006e0020007500730065006400200069006e0020006c006100720067
00650072002000730069007a00650073002e002000540068006500200063
006c006100730073006900630061006c002000700072006f0070006f0072
00740069006f006e0073002c00200070006100720074006900630075006c
00610072006c0079002000760069007300690062006c006500200069006e
00200074006800650020007500700070006500720063006100730065002c
0020006700690076006500200074006800650020006c0065007400740065
00720066006f0072006d0073002000660061006d0069006c006900610072
0020006800610072006d006f006e007900200061006e006400200065006c
006500670061006e00630065002e00200041007400200074006800650020
00730061006d0065002000740069006d0065002c00200069007400730020
0073006c00650065006b002000730061006e007300650072006900660020
006c006f006f006b0020006d0061006b0065007300200065007600690064
0065006e0074002000740068006500200066006100630074002000740068
006100740020004c00610074006f00200077006100730020006400650073
00690067006e0065006400200069006e0020007400680065002000320030
003100300073002c0020006500760065006e002000740068006f00750067
006800200069007400200064006f006500730020006e006f007400200066
006f006c006c006f007700200061006e0079002000630075007200720065
006e00740020007400720065006e0064002e002000540068006500200073
0065006d0069002d0072006f0075006e0064006500640020006400650074
00610069006c00730020006f006600200074006800650020006c00650074
0074006500720073002000670069007600650020004c00610074006f0020
00610020006600650065006c0069006e00670020006f0066002000770061
0072006d00740068002c0020007700680069006c00650020007400680065
0020007300740072006f006e006700200073007400720075006300740075
00720065002000700072006f007600690064006500730020007300740061
00620069006c00690074007900200061006e006400200073006500720069
006f00750073006e006500730073002e00200049006e0020003200300031
0033002d0032003000310034002c0020007400680065002000660061006d
0069006c00790020007700610073002000670072006500610074006c0079
00200065007800740065006e006400650064002000280077006900740068
0020007400680065002000680065006c00700020006f0066002000410064
0061006d002000540077006100720064006f0063006800200061006e0064
00200042006f00740069006f0020004e0069006b006f006c007400630068
00650076002900200074006f00200063006f007600650072002000330030
00300030002b00200067006c00790070006800730020006f007600650072
0020006e0069006e00650020007700650069006700680074007300200077
0069007400680020006900740061006c006900630073002e002000490074
0020006e006f007700200073007500700070006f00720074007300200031
00300030002b0020004c006100740069006e002d00620061007300650064
0020006c0061006e006700750061006700650073002c002000350030002b
00200043007900720069006c006c00690063002d00620061007300650064
0020006c0061006e00670075006100670065007300200061007300200077
0065006c006c00200061007300200047007200650065006b00200061006e
00640020004900500041002000700068006f006e00650074006900630073
002e00200054006800650020004c00610074006f00200066006f006e0074
0073002000610072006500200061007600610069006c00610062006c0065
002000660072006500650020006f00660020006300680061007200670065
00200075006e0064006500720020007400680065002000530049004c0020
004f00700065006e00200046006f006e00740020004c006900630065006e
00730065002000660072006f006d00200068007400740070003a002f002f
007700770077002e006c00610074006f0066006f006e00740073002e0063
006f006d002f0068007400740070003a002f002f007700770077002e0074
00790070006f006c0061006e0064002e0063006f006d002f006800740074
0070003a002f002f007700770077002e006c00610074006f0066006f006e
00740073002e0063006f006d002f0043006f007000790072006900670068
0074002000280063002900200032003000310031002d0032003000310035
0020006200790020007400790050006f006c0061006e00640020004c0075
006b00610073007a00200044007a006900650064007a0069006300200028
0068007400740070003a002f002f007700770077002e007400790070006f
006c0061006e0064002e0063006f006d002f002900200077006900740068
00200052006500730065007200760065006400200046006f006e00740020
004e0061006d006500200022004c00610074006f0022002e0020004c0069
00630065006e00730065006400200075006e006400650072002000740068
0065002000530049004c0020004f00700065006e00200046006f006e0074
0020004c006900630065006e00730065002c002000560065007200730069
006f006e00200031002e0031002000280068007400740070003a002f002f
0073006300720069007000740073002e00730069006c002e006f00720067
002f004f0046004c0029002e00200068007400740070003a002f002f0073
006300720069007000740073002e00730069006c002e006f00720067002f
004f0046004c0000004bb800c85258b101018e59b001b9080008006370b1
000642b66e5a46362205002ab1000642400c61084d083d06290817070508
2ab1000642400c6b06570645043306200505082ab1000b42be188013800f
800a800600000500092ab1001042be00400040004000400040000500092a
b1036444b12401885158b0408858b1036444b12601885158ba0880000104
4088635458b103644459595959400c63084f083f062b081907050c2ab801
ff85b0048db1020044b105644400000000>
[16273 16109 16245 16317 16313 16381 16009 15813 16061 16337 16337 16365 16289
16369 16113 16189 16201 16345 16289 16381 16225 16281 16365 16301 8115 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 2 <> Lato-Regular AddT42Char 
6 4124 351 <00020058fff0057f05a9000b0048006a400e2b1e020504483e110b040005
024a4bb01e50584021000404035b0003036b4b000505015b02010101644b
000000015b0201010164014c1b401f000404035b0003036b4b000505015b
000101644b000000025b0002026c024c59400c454334322725252327060a
172b010e0115141e0233323637012322262f010e0123222e0235343e0237
2e0135343e0233321e02170706272e0323220e0215141e0217013e01373e
013b010e010701e36a6b304e643470b34301f5ad1d2415915ef59350997a
4a2f5472443d3a35648f594f825e37046f2110071f31452e3251391e1023
3626019c262e070214126d01464202c238a05e416344235245fee80e1692
5b6b3667945d467d6a541e4e914e49805f3733546f3c1608271a382e1e20
394d2d2340424426fe5d449349131673dd610000>Lato-Regular AddT42Char 
6 12672 399 <0002003cfff1044c05a900130027001f401c000202015b0001016b4b0003
03005b0000006c004c28282824040a182b0114020e0123222e0102353412
3e0133321e011207342e0223220e0215141e0233323e02044c518cbf6d6e
bd8c50508cbd6e6dbf8c51b9375d7a42427a5c37375c7a42427a5d3702cc
bcfeedb45858b40113bcbc0114b55858b5feecbca4df883b3b88dfa4a4de
883b3b88de00>Lato-Regular AddT42Char 
6 12936 401 <0001005e0000041a05a900300032402f1d0100022d010100024a00020203
5b0003036b4b04010000015900010164014c01002321151305040030012f
050a142b2532161d012135343637013e0335342e0223220e02070e012f01
3e0333321e0215140e0207013e013303db1d22fc44101101cb395e422428
455e36375c47300a0c29255d0e517b9e5c5b9e744230526b3cfe86285226
a9221b6c3d13281101cd3a6b6c6f3f3f5f3e1f20394e2f23170510629766
353667945e50897c763cfe7e0b0d0000>Lato-Regular AddT42Char 
2 252 3 <0002000600000544059900070015002f402c04010004014a050100000201
000262000404634b0301010164014c0000151413110e0d0a080007000706
0a142b01032e012706070301232226270321030e012b01013303b0e10a16
0a1516e103ab961a200886fd7d8606221996023dc4021402471a45275136
fdbafdec1a14015afea6121c05990000>Lato-Regular AddT42Char 
2 1920 11 <000100b70000042b0599000b002f402c0003000405030461000202015900
0101634b06010505005900000064004c0000000b000b1111111111070a19
2b250721112115211121152111042b01fc8d0373fd4f022efdd29e9e0599
9efe2498fe17>Lato-Regular AddT42Char 
2 3184 21 <000100b7000003e405990005001f401c000101634b03010202005a000000
64004c0000000500051111040a162b25152111331103e4fcd3c1a3a30599
fb0a0000>Lato-Regular AddT42Char 
2 3544 25 <000100b70000054005990017001d401a0403020202634b0101000064004c
000000170017111721050a172b011123222627011e011511231133321e02
17012e013511054061171f0ffcc30202aa640d120e0e08033d02030599fa
6710130438193015fc03059903070d0afbc91a311603f7000000>Lato-Regular AddT42Char 
2 5396 33 <000200b7000004da0599000a00230036403321010300014a060100000302
000363000101055b000505634b0401020264024c01001816151413110d0b
0907000a010a070a142b01323e023534262b011101232227012e012b0111
231121321e0215140e0207161702445481572ca8a8d40362ac3519fe8c11
272993c1019588c6813e305b8353251b02e3294b683f8082fde3fd1d2902
001815fdaa05993768935b4c84694a131528>Lato-Regular AddT42Char 
2 5564 34 <00010042fff003e305a9003f003e403b3f0101051e010403024a00000103
010003700003040103046e000101055b0005056b4b000404025b0002026c
024c3d3b2a2823211c1a2322060a162b010e0123222e0223220e0215141e
0615140e0223222627373e0133321e0433323e0235342e0635343e023332
1617039409150f112e456145416343223b617b817b613b407bb3728ce451
3808170e0d212a36455837456c4b283b607c807c603b3b71a56b78c54b04
b90f0f222922233c512f3c4f38292c37547a595ea57a4665565c0b0f1520
2620152645603b41533827293656815f4c8e6e424c48>Lato-Regular AddT42Char 
2 6276 36 <0001001e0000048005990007001b4018020100000359000303634b000101
64014c11111110040a182b01211123112135210480fe30c1fe2f046204f6
fb0a04f6a3000000>Lato-Regular AddT42Char 
2 0 0 <0004002d000003fb0599002500350039003d004540420003020102030170
0001040201046e0000000203000263000400050804056300090906590006
06634b000808075900070764074c3d3c1111122824232a1c240a0a1d2b13
3e0333321e0215140e040f012327263e0435342623220e02232227133436
33321e0215140e022322260121112137211121fa1939444f2e3f6749291e
2d36302304117a0c041a2d37302049392938281c0b190c633e3016281d11
111d2816303efea103cefc32320363fc9d047516261d1123405b3837503b
2b262517697522332b282e3a28333c12161216fcfb2f40111e291717281e
113f04a4fa6736052c000000>Lato-Regular AddT42Char 
Lato-Regular /CharStrings get begin
/space 2 def
/ampersand 351 def
/zero 399 def
/two 401 def
/A 3 def
/E 11 def
/L 21 def
/N 25 def
/R 33 def
/S 34 def
/T 36 def
end
Lato-Regular /Encoding get
dup 32 /space put
dup 38 /ampersand put
dup 48 /zero put
dup 50 /two put
dup 65 /A put
dup 69 /E put
dup 76 /L put
dup 78 /N put
dup 82 /R put
dup 83 /S put
dup 84 /T put
pop
end
%ADOEndSubsetFont
/BPKFLL+Lato-Regular /Lato-Regular findfont ct_VMDictPut
/BPKFLL+Lato-Regular*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 9{/.notdef}rp /zero /.notdef /two 
14{/.notdef}rp /A 3{/.notdef}rp /E 6{/.notdef}rp /L /.notdef /N 
3{/.notdef}rp /R /S /T 171{/.notdef}rp]
BPKFLL+Lato-Regular nf
BPKFLL+Lato-Regular*1 [-.131242 -23.949 -24.9997 .137 0 0 ]msf
483.726 365.859 mo
(LENT & EASTER 2020)
[-.0673828 -12.2979 -.0761719 -13.8311 -.0996094 -18.2842 -.0742188 -13.4229 -.0332031 -6.13086 -.09375 -17.0518 
-.0332031 -6.13086 -.0761719 -13.8311 -.0888672 -16.2129 -.0712891 -12.9922 -.0771484 -14.1406 -.0761719 -13.8311 
-.0820313 -15.0039 -.0332031 -6.13086 -.0761719 -13.8906 -.0761719 -13.8906 -.0761719 -13.8906 0 0 
]xysh
50.0179 159.812 mo
61.3773 159.812 li
61.3773 147.134 li
50.0179 147.134 li
50.0179 159.812 li
cp
f
0 0 0 0 cmyk
BPKFLL+Lato-Regular*1 [-.131242 -23.949 -24.9997 .137 0 0 ]msf
482.724 364.993 mo
(LENT & EASTER 2020)
[-.0673828 -12.2979 -.0751953 -13.8311 -.100586 -18.2842 -.0732422 -13.4229 -.0341797 -6.13086 -.0927734 -17.0518 
-.0341797 -6.13086 -.0751953 -13.8311 -.0888672 -16.2129 -.0712891 -12.9922 -.0771484 -14.1406 -.0761719 -13.8311 
-.0820313 -15.0039 -.0341797 -6.13086 -.0761719 -13.8906 -.0761719 -13.8906 -.0761719 -13.8906 0 0 
]xysh
48.0526 158.245 mo
59.4125 158.245 li
59.4125 145.566 li
48.0526 145.566 li
48.0526 158.245 li
cp
f
.0342718 .634272 1 .00231937 cmyk
%ADOBeginSubsetFont: MyriadPro-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BPKFLH+MyriadPro-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7F6E9050DD22BC553EE5F7922A8ADEDC07A01F7B105B52C93
140A17E8B7241EACBEA2687306972DC74307685A6EB403D72888BB6CDAE34B6F
5BD94D24D35C9B32240E697697F0C667F348A9AA6D1AA8F808560D3403E08C23
785C2F462E038605A74BFC462CAD77A155> |-
/a <1C60D8A8C9B78B91867A8DC7C15FB2F1EFCCE662FE7E94DF6E422BBEE733
C40005F950BE001A85FB18F16EDDD78EA9287A60A5CBA8B22ED04E570487D4E4
7A24696C134488F6B4DE203D6F39405EBBCBDE5CFFFC8648423EA0B3C27EB422
5E5E652B6D79CCB8B3AE62BAC7528DDA3911701824A77C0E6A2D10C763C72CF8
52D7B5856A1E76DFB22B9139C6EA43865D14EA05097CBD2FD3CB8DC2BD6A4A24
B7F121234DAB325D8CE7D2C070908ED25D3EDD8F22C271E57983A20E17E3E44F
60BAD0C748C7EDB2> |-
/r <1C60D8A8C9B73F598778880A172F88C30710D240CCED7C8042CEB5D16AD4
014412164D2E5CE50643F3222A2D1E2193299A28687E04259DD82DB4B205C655
02E945C44D259F3E8EF34E40019810E93C5B189FE3489ADD720C28488257B1BC
CC9D4DF69CFC02946C690A45D1F417> |-
/y <1C60D8A8C9B7B07F0BB44E341970E343D9CADF3339ADC30CA1B27F9C4503
CABE459C32DD3D76D51C1B63499603C4AF1266550CD6F2C01EEA4A9FB245944E
4590044FACB58BA7BA710148605DB61A6A63D013E0A78A59CADD1B1D581B111E
6DB756219B76AA8667F44946> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BPKFLH+MyriadPro-Bold /Encoding get
dup 80 /P put
dup 97 /a put
dup 114 /r put
dup 121 /y put
pop
%ADOEndSubsetFont
/BPKFLH+MyriadPro-Bold*1 
[32{/.notdef}rp /space 38{/.notdef}rp /G 8{/.notdef}rp /P 6{/.notdef}rp /W 
9{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp 
/l 2{/.notdef}rp /o /p /.notdef /r /s /t 
4{/.notdef}rp /y 134{/.notdef}rp]
BPKFLH+MyriadPro-Bold nf
BPKFLH+MyriadPro-Bold*1 [-.131242 -23.949 -24.9997 .137 0 0 ]msf
481.85 456.678 mo
(iPray)
[-.0361328 -6.56152 -.0751953 -13.6992 -.0478516 -8.83691 -.0683594 -12.3574 0 0 ]xysh
0 0 0 0 cmyk
BPKFLH+MyriadPro-Bold*1 [-.131242 -23.949 -24.9997 .137 0 0 ]msf
480.039 456.68 mo
(iPray)
[-.0361328 -6.56152 -.0751953 -13.6992 -.0478516 -8.83691 -.0683594 -12.3574 0 0 ]xysh
463.805 382.327 mo
463.35 381.705 462.924 381.107 462.48 380.522 cv
462.33 380.323 462.432 380.231 462.566 380.12 cv
463.32 379.497 464.129 378.95 465.003 378.499 cv
468.01 376.952 471.249 376.427 474.676 376.753 cv
477.053 376.979 479.313 377.655 481.434 378.81 cv
482.351 379.309 483.226 379.887 484.017 380.58 cv
484.262 380.794 484.266 380.802 484.074 381.049 cv
483.685 381.55 483.287 382.044 482.898 382.546 cv
482.782 382.696 482.682 382.711 482.531 382.569 cv
480.607 380.764 478.286 379.832 475.759 379.39 cv
472.973 378.902 470.252 379.069 467.631 380 cv
466.339 380.459 465.16 381.103 464.161 382.033 cv
464.065 382.123 463.958 382.201 463.805 382.327 cv
.0258488 .403723 .890745 .000640879 cmyk
f
479.77 386.495 mo
479.617 386.477 479.555 386.403 479.488 386.343 cv
478.171 385.157 476.61 384.524 474.903 384.256 cv
472.901 383.942 470.971 384.121 469.152 384.948 cv
468.388 385.296 467.699 385.749 467.133 386.369 cv
466.936 386.583 466.924 386.581 466.736 386.329 cv
466.325 385.775 465.925 385.213 465.509 384.662 cv
465.388 384.502 465.412 384.419 465.552 384.294 cv
466.536 383.412 467.684 382.8 468.953 382.407 cv
472.116 381.428 475.282 381.564 478.434 382.847 cv
479.379 383.23 480.244 383.76 481.034 384.412 cv
481.172 384.525 481.242 384.617 481.113 384.78 cv
480.654 385.355 480.205 385.938 479.77 386.495 cv
0 .520195 .909026 .000274662 cmyk
f
477.407 389.468 mo
477.244 389.678 477.069 389.879 476.92 390.099 cv
476.789 390.293 476.67 390.278 476.474 390.155 cv
474.974 389.21 473.373 388.969 471.695 389.332 cv
471.044 389.473 470.448 389.743 469.891 390.093 cv
469.619 390.265 469.616 390.266 469.435 390.022 cv
469.116 389.59 468.807 389.151 468.48 388.725 cv
468.337 388.539 468.338 388.449 468.542 388.306 cv
469.909 387.343 471.454 386.907 473.153 386.927 cv
474.74 386.947 476.215 387.398 477.574 388.264 cv
478.097 388.597 478.096 388.598 477.738 389.052 cv
477.629 389.191 477.52 389.332 477.411 389.471 cv
477.407 389.468 li
cp
.0342718 .634272 1 .00231937 cmyk
f
463.682 104.639 mo
463.227 104.017 462.801 103.419 462.357 102.834 cv
462.207 102.635 462.307 102.543 462.443 102.432 cv
463.197 101.809 464.006 101.262 464.88 100.811 cv
467.887 99.2641 471.126 98.7397 474.553 99.0654 cv
476.929 99.2915 479.189 99.9677 481.31 101.123 cv
482.228 101.622 483.102 102.199 483.894 102.892 cv
484.138 103.106 484.142 103.114 483.951 103.361 cv
483.562 103.862 483.163 104.356 482.775 104.858 cv
482.659 105.009 482.559 105.023 482.408 104.882 cv
480.484 103.076 478.163 102.145 475.636 101.703 cv
472.849 101.215 470.129 101.381 467.507 102.312 cv
466.216 102.771 465.036 103.415 464.038 104.346 cv
463.941 104.435 463.835 104.514 463.682 104.639 cv
.0258488 .403723 .890745 .000640879 cmyk
f
479.647 108.808 mo
479.494 108.789 479.432 108.715 479.365 108.655 cv
478.048 107.47 476.487 106.836 474.78 106.568 cv
472.778 106.254 470.848 106.433 469.029 107.261 cv
468.265 107.608 467.576 108.061 467.01 108.681 cv
466.813 108.896 466.801 108.894 466.613 108.642 cv
466.202 108.087 465.802 107.525 465.385 106.975 cv
465.265 106.814 465.289 106.732 465.429 106.607 cv
466.413 105.724 467.561 105.113 468.83 104.72 cv
471.993 103.74 475.159 103.877 478.311 105.159 cv
479.256 105.543 480.12 106.073 480.911 106.725 cv
481.048 106.838 481.119 106.93 480.99 107.092 cv
480.531 107.667 480.082 108.25 479.647 108.808 cv
0 .520195 .909026 .000274662 cmyk
f
477.284 111.78 mo
477.12 111.99 476.945 112.192 476.797 112.412 cv
476.665 112.605 476.546 112.59 476.351 112.467 cv
474.851 111.523 473.25 111.282 471.572 111.644 cv
470.92 111.785 470.325 112.055 469.768 112.405 cv
469.496 112.577 469.493 112.579 469.312 112.334 cv
468.993 111.903 468.684 111.463 468.356 111.038 cv
468.214 110.851 468.215 110.762 468.418 110.618 cv
469.786 109.656 471.331 109.219 473.03 109.24 cv
474.616 109.259 476.092 109.71 477.451 110.577 cv
477.974 110.91 477.973 110.911 477.615 111.365 cv
477.506 111.503 477.397 111.644 477.288 111.784 cv
477.284 111.78 li
cp
.0342718 .634272 1 .00231937 cmyk
f
.0342718 .634272 1 .00231937 cmyk
BPKFLI+MyriadPro-Regular*1 [26.9951 0 0 -28.1795 0 0 ]msf
750.972 569.68 mo
(LENT)sh
750.972 591.348 mo
(EASTER)sh
0 0 0 0 cmyk
BPKFLI+MyriadPro-Regular*1 [26.9951 0 0 -28.1795 0 0 ]msf
749.677 569.717 mo
(LENT)sh
749.677 591.385 mo
(EASTER)sh
.0342718 .634272 1 .00231937 cmyk
BPKFLI+MyriadPro-Regular*1 [13.4116 0 0 -14 0 0 ]msf
809.117 570.584 mo
(AND)sh
0 0 0 0 cmyk
BPKFLI+MyriadPro-Regular*1 [13.4116 0 0 -14 0 0 ]msf
809.681 570.345 mo
(AND)sh
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/BPKFLK+Lato-Medium*1 uf
/BPKFLK+Lato-Medium uf
/Lato-Medium uf
/BPKFLJ+KeepCalm-Medium*1 uf
/BPKFLJ+KeepCalm-Medium uf
/KeepCalm-Medium uf
/BPKFLI+MyriadPro-Regular*1 uf
/BPKFLI+MyriadPro-Regular uf
/MyriadPro-Regular uf
/BPKFLL+Lato-Regular*1 uf
/BPKFLL+Lato-Regular uf
/Lato-Regular uf
/BPKFLH+MyriadPro-Bold*1 uf
/BPKFLH+MyriadPro-Bold uf
/MyriadPro-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
